
SoilSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ddc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08002e9c  08002e9c  00003e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f1c  08002f1c  00004028  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002f1c  08002f1c  00004028  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002f1c  08002f1c  00004028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f1c  08002f1c  00003f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f20  08002f20  00003f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  08002f24  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000028  08002f4c  00004028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08002f4c  0000415c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd71  00000000  00000000  00004050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c03  00000000  00000000  0000fdc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  000119c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000076a  00000000  00000000  00012370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014711  00000000  00000000  00012ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c928  00000000  00000000  000271eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007fe41  00000000  00000000  00033b13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3954  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021d0  00000000  00000000  000b3998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000b5b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000028 	.word	0x20000028
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002e84 	.word	0x08002e84

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000002c 	.word	0x2000002c
 8000104:	08002e84 	.word	0x08002e84

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fbf6 	bl	8000a14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f842 	bl	80002b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8ec 	bl	8000408 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000230:	f000 f886 	bl	8000340 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8000234:	4b1b      	ldr	r3, [pc, #108]	@ (80002a4 <main+0x84>)
 8000236:	0018      	movs	r0, r3
 8000238:	f000 ff6a 	bl	8001110 <HAL_ADC_Start>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800023c:	2000      	movs	r0, #0
 800023e:	f000 fa11 	bl	8000664 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000242:	2101      	movs	r1, #1
 8000244:	2000      	movs	r0, #0
 8000246:	f000 fa77 	bl	8000738 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800024a:	4b17      	ldr	r3, [pc, #92]	@ (80002a8 <main+0x88>)
 800024c:	22e1      	movs	r2, #225	@ 0xe1
 800024e:	0252      	lsls	r2, r2, #9
 8000250:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000252:	4b15      	ldr	r3, [pc, #84]	@ (80002a8 <main+0x88>)
 8000254:	2200      	movs	r2, #0
 8000256:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000258:	4b13      	ldr	r3, [pc, #76]	@ (80002a8 <main+0x88>)
 800025a:	2200      	movs	r2, #0
 800025c:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800025e:	4b12      	ldr	r3, [pc, #72]	@ (80002a8 <main+0x88>)
 8000260:	2200      	movs	r2, #0
 8000262:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000264:	4b10      	ldr	r3, [pc, #64]	@ (80002a8 <main+0x88>)
 8000266:	2200      	movs	r2, #0
 8000268:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800026a:	4b0f      	ldr	r3, [pc, #60]	@ (80002a8 <main+0x88>)
 800026c:	0019      	movs	r1, r3
 800026e:	2000      	movs	r0, #0
 8000270:	f000 fb08 	bl	8000884 <BSP_COM_Init>
 8000274:	1e03      	subs	r3, r0, #0
 8000276:	d001      	beq.n	800027c <main+0x5c>
  {
    Error_Handler();
 8000278:	f000 f916 	bl	80004a8 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 HAL_ADC_PollForConversion(&hadc1,10);
 800027c:	4b09      	ldr	r3, [pc, #36]	@ (80002a4 <main+0x84>)
 800027e:	210a      	movs	r1, #10
 8000280:	0018      	movs	r0, r3
 8000282:	f000 ff93 	bl	80011ac <HAL_ADC_PollForConversion>
	 moisture = HAL_ADC_GetValue(&hadc1);
 8000286:	4b07      	ldr	r3, [pc, #28]	@ (80002a4 <main+0x84>)
 8000288:	0018      	movs	r0, r3
 800028a:	f001 f81d 	bl	80012c8 <HAL_ADC_GetValue>
 800028e:	0003      	movs	r3, r0
 8000290:	b29a      	uxth	r2, r3
 8000292:	4b06      	ldr	r3, [pc, #24]	@ (80002ac <main+0x8c>)
 8000294:	801a      	strh	r2, [r3, #0]

	 HAL_Delay(1000);
 8000296:	23fa      	movs	r3, #250	@ 0xfa
 8000298:	009b      	lsls	r3, r3, #2
 800029a:	0018      	movs	r0, r3
 800029c:	f000 fc38 	bl	8000b10 <HAL_Delay>
	 HAL_ADC_PollForConversion(&hadc1,10);
 80002a0:	46c0      	nop			@ (mov r8, r8)
 80002a2:	e7eb      	b.n	800027c <main+0x5c>
 80002a4:	20000054 	.word	0x20000054
 80002a8:	20000044 	.word	0x20000044
 80002ac:	20000000 	.word	0x20000000

080002b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b0:	b590      	push	{r4, r7, lr}
 80002b2:	b08d      	sub	sp, #52	@ 0x34
 80002b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b6:	2414      	movs	r4, #20
 80002b8:	193b      	adds	r3, r7, r4
 80002ba:	0018      	movs	r0, r3
 80002bc:	231c      	movs	r3, #28
 80002be:	001a      	movs	r2, r3
 80002c0:	2100      	movs	r1, #0
 80002c2:	f002 fdb3 	bl	8002e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c6:	003b      	movs	r3, r7
 80002c8:	0018      	movs	r0, r3
 80002ca:	2314      	movs	r3, #20
 80002cc:	001a      	movs	r2, r3
 80002ce:	2100      	movs	r1, #0
 80002d0:	f002 fdac 	bl	8002e2c <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 80002d4:	4b19      	ldr	r3, [pc, #100]	@ (800033c <SystemClock_Config+0x8c>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	2207      	movs	r2, #7
 80002da:	4393      	bics	r3, r2
 80002dc:	001a      	movs	r2, r3
 80002de:	4b17      	ldr	r3, [pc, #92]	@ (800033c <SystemClock_Config+0x8c>)
 80002e0:	2101      	movs	r1, #1
 80002e2:	430a      	orrs	r2, r1
 80002e4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002e6:	193b      	adds	r3, r7, r4
 80002e8:	2201      	movs	r2, #1
 80002ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ec:	193b      	adds	r3, r7, r4
 80002ee:	2280      	movs	r2, #128	@ 0x80
 80002f0:	0252      	lsls	r2, r2, #9
 80002f2:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f4:	193b      	adds	r3, r7, r4
 80002f6:	0018      	movs	r0, r3
 80002f8:	f001 fd42 	bl	8001d80 <HAL_RCC_OscConfig>
 80002fc:	1e03      	subs	r3, r0, #0
 80002fe:	d001      	beq.n	8000304 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000300:	f000 f8d2 	bl	80004a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000304:	003b      	movs	r3, r7
 8000306:	2207      	movs	r2, #7
 8000308:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800030a:	003b      	movs	r3, r7
 800030c:	2201      	movs	r2, #1
 800030e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000310:	003b      	movs	r3, r7
 8000312:	2200      	movs	r2, #0
 8000314:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000316:	003b      	movs	r3, r7
 8000318:	2200      	movs	r2, #0
 800031a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800031c:	003b      	movs	r3, r7
 800031e:	2200      	movs	r2, #0
 8000320:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000322:	003b      	movs	r3, r7
 8000324:	2101      	movs	r1, #1
 8000326:	0018      	movs	r0, r3
 8000328:	f001 ff0e 	bl	8002148 <HAL_RCC_ClockConfig>
 800032c:	1e03      	subs	r3, r0, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000330:	f000 f8ba 	bl	80004a8 <Error_Handler>
  }
}
 8000334:	46c0      	nop			@ (mov r8, r8)
 8000336:	46bd      	mov	sp, r7
 8000338:	b00d      	add	sp, #52	@ 0x34
 800033a:	bd90      	pop	{r4, r7, pc}
 800033c:	40022000 	.word	0x40022000

08000340 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b084      	sub	sp, #16
 8000344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	0018      	movs	r0, r3
 800034a:	230c      	movs	r3, #12
 800034c:	001a      	movs	r2, r3
 800034e:	2100      	movs	r1, #0
 8000350:	f002 fd6c 	bl	8002e2c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000354:	4b29      	ldr	r3, [pc, #164]	@ (80003fc <MX_ADC1_Init+0xbc>)
 8000356:	4a2a      	ldr	r2, [pc, #168]	@ (8000400 <MX_ADC1_Init+0xc0>)
 8000358:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800035a:	4b28      	ldr	r3, [pc, #160]	@ (80003fc <MX_ADC1_Init+0xbc>)
 800035c:	2280      	movs	r2, #128	@ 0x80
 800035e:	05d2      	lsls	r2, r2, #23
 8000360:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000362:	4b26      	ldr	r3, [pc, #152]	@ (80003fc <MX_ADC1_Init+0xbc>)
 8000364:	2200      	movs	r2, #0
 8000366:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000368:	4b24      	ldr	r3, [pc, #144]	@ (80003fc <MX_ADC1_Init+0xbc>)
 800036a:	2200      	movs	r2, #0
 800036c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 800036e:	4b23      	ldr	r3, [pc, #140]	@ (80003fc <MX_ADC1_Init+0xbc>)
 8000370:	2280      	movs	r2, #128	@ 0x80
 8000372:	0612      	lsls	r2, r2, #24
 8000374:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000376:	4b21      	ldr	r3, [pc, #132]	@ (80003fc <MX_ADC1_Init+0xbc>)
 8000378:	2204      	movs	r2, #4
 800037a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800037c:	4b1f      	ldr	r3, [pc, #124]	@ (80003fc <MX_ADC1_Init+0xbc>)
 800037e:	2200      	movs	r2, #0
 8000380:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000382:	4b1e      	ldr	r3, [pc, #120]	@ (80003fc <MX_ADC1_Init+0xbc>)
 8000384:	2200      	movs	r2, #0
 8000386:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000388:	4b1c      	ldr	r3, [pc, #112]	@ (80003fc <MX_ADC1_Init+0xbc>)
 800038a:	2201      	movs	r2, #1
 800038c:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800038e:	4b1b      	ldr	r3, [pc, #108]	@ (80003fc <MX_ADC1_Init+0xbc>)
 8000390:	2201      	movs	r2, #1
 8000392:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000394:	4b19      	ldr	r3, [pc, #100]	@ (80003fc <MX_ADC1_Init+0xbc>)
 8000396:	2200      	movs	r2, #0
 8000398:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800039a:	4b18      	ldr	r3, [pc, #96]	@ (80003fc <MX_ADC1_Init+0xbc>)
 800039c:	2200      	movs	r2, #0
 800039e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003a0:	4b16      	ldr	r3, [pc, #88]	@ (80003fc <MX_ADC1_Init+0xbc>)
 80003a2:	222c      	movs	r2, #44	@ 0x2c
 80003a4:	2100      	movs	r1, #0
 80003a6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003a8:	4b14      	ldr	r3, [pc, #80]	@ (80003fc <MX_ADC1_Init+0xbc>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80003ae:	4b13      	ldr	r3, [pc, #76]	@ (80003fc <MX_ADC1_Init+0xbc>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80003b4:	4b11      	ldr	r3, [pc, #68]	@ (80003fc <MX_ADC1_Init+0xbc>)
 80003b6:	223c      	movs	r2, #60	@ 0x3c
 80003b8:	2100      	movs	r1, #0
 80003ba:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	@ (80003fc <MX_ADC1_Init+0xbc>)
 80003be:	2200      	movs	r2, #0
 80003c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003c2:	4b0e      	ldr	r3, [pc, #56]	@ (80003fc <MX_ADC1_Init+0xbc>)
 80003c4:	0018      	movs	r0, r3
 80003c6:	f000 fcfd 	bl	8000dc4 <HAL_ADC_Init>
 80003ca:	1e03      	subs	r3, r0, #0
 80003cc:	d001      	beq.n	80003d2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80003ce:	f000 f86b 	bl	80004a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	4a0b      	ldr	r2, [pc, #44]	@ (8000404 <MX_ADC1_Init+0xc4>)
 80003d6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	2201      	movs	r2, #1
 80003dc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003de:	1d3a      	adds	r2, r7, #4
 80003e0:	4b06      	ldr	r3, [pc, #24]	@ (80003fc <MX_ADC1_Init+0xbc>)
 80003e2:	0011      	movs	r1, r2
 80003e4:	0018      	movs	r0, r3
 80003e6:	f000 ff7b 	bl	80012e0 <HAL_ADC_ConfigChannel>
 80003ea:	1e03      	subs	r3, r0, #0
 80003ec:	d001      	beq.n	80003f2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80003ee:	f000 f85b 	bl	80004a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003f2:	46c0      	nop			@ (mov r8, r8)
 80003f4:	46bd      	mov	sp, r7
 80003f6:	b004      	add	sp, #16
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	46c0      	nop			@ (mov r8, r8)
 80003fc:	20000054 	.word	0x20000054
 8000400:	40012400 	.word	0x40012400
 8000404:	2c000800 	.word	0x2c000800

08000408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000408:	b590      	push	{r4, r7, lr}
 800040a:	b089      	sub	sp, #36	@ 0x24
 800040c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040e:	240c      	movs	r4, #12
 8000410:	193b      	adds	r3, r7, r4
 8000412:	0018      	movs	r0, r3
 8000414:	2314      	movs	r3, #20
 8000416:	001a      	movs	r2, r3
 8000418:	2100      	movs	r1, #0
 800041a:	f002 fd07 	bl	8002e2c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800041e:	4b21      	ldr	r3, [pc, #132]	@ (80004a4 <MX_GPIO_Init+0x9c>)
 8000420:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000422:	4b20      	ldr	r3, [pc, #128]	@ (80004a4 <MX_GPIO_Init+0x9c>)
 8000424:	2104      	movs	r1, #4
 8000426:	430a      	orrs	r2, r1
 8000428:	635a      	str	r2, [r3, #52]	@ 0x34
 800042a:	4b1e      	ldr	r3, [pc, #120]	@ (80004a4 <MX_GPIO_Init+0x9c>)
 800042c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800042e:	2204      	movs	r2, #4
 8000430:	4013      	ands	r3, r2
 8000432:	60bb      	str	r3, [r7, #8]
 8000434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000436:	4b1b      	ldr	r3, [pc, #108]	@ (80004a4 <MX_GPIO_Init+0x9c>)
 8000438:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800043a:	4b1a      	ldr	r3, [pc, #104]	@ (80004a4 <MX_GPIO_Init+0x9c>)
 800043c:	2120      	movs	r1, #32
 800043e:	430a      	orrs	r2, r1
 8000440:	635a      	str	r2, [r3, #52]	@ 0x34
 8000442:	4b18      	ldr	r3, [pc, #96]	@ (80004a4 <MX_GPIO_Init+0x9c>)
 8000444:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000446:	2220      	movs	r2, #32
 8000448:	4013      	ands	r3, r2
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800044e:	4b15      	ldr	r3, [pc, #84]	@ (80004a4 <MX_GPIO_Init+0x9c>)
 8000450:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000452:	4b14      	ldr	r3, [pc, #80]	@ (80004a4 <MX_GPIO_Init+0x9c>)
 8000454:	2101      	movs	r1, #1
 8000456:	430a      	orrs	r2, r1
 8000458:	635a      	str	r2, [r3, #52]	@ 0x34
 800045a:	4b12      	ldr	r3, [pc, #72]	@ (80004a4 <MX_GPIO_Init+0x9c>)
 800045c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800045e:	2201      	movs	r2, #1
 8000460:	4013      	ands	r3, r2
 8000462:	603b      	str	r3, [r7, #0]
 8000464:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000466:	23a0      	movs	r3, #160	@ 0xa0
 8000468:	05db      	lsls	r3, r3, #23
 800046a:	2200      	movs	r2, #0
 800046c:	2101      	movs	r1, #1
 800046e:	0018      	movs	r0, r3
 8000470:	f001 fc68 	bl	8001d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000474:	0021      	movs	r1, r4
 8000476:	187b      	adds	r3, r7, r1
 8000478:	2201      	movs	r2, #1
 800047a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047c:	187b      	adds	r3, r7, r1
 800047e:	2201      	movs	r2, #1
 8000480:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	187b      	adds	r3, r7, r1
 8000484:	2200      	movs	r2, #0
 8000486:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000488:	187b      	adds	r3, r7, r1
 800048a:	2200      	movs	r2, #0
 800048c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800048e:	187a      	adds	r2, r7, r1
 8000490:	23a0      	movs	r3, #160	@ 0xa0
 8000492:	05db      	lsls	r3, r3, #23
 8000494:	0011      	movs	r1, r2
 8000496:	0018      	movs	r0, r3
 8000498:	f001 fae2 	bl	8001a60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800049c:	46c0      	nop			@ (mov r8, r8)
 800049e:	46bd      	mov	sp, r7
 80004a0:	b009      	add	sp, #36	@ 0x24
 80004a2:	bd90      	pop	{r4, r7, pc}
 80004a4:	40021000 	.word	0x40021000

080004a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ac:	b672      	cpsid	i
}
 80004ae:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b0:	46c0      	nop			@ (mov r8, r8)
 80004b2:	e7fd      	b.n	80004b0 <Error_Handler+0x8>

080004b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ba:	4b0f      	ldr	r3, [pc, #60]	@ (80004f8 <HAL_MspInit+0x44>)
 80004bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80004be:	4b0e      	ldr	r3, [pc, #56]	@ (80004f8 <HAL_MspInit+0x44>)
 80004c0:	2101      	movs	r1, #1
 80004c2:	430a      	orrs	r2, r1
 80004c4:	641a      	str	r2, [r3, #64]	@ 0x40
 80004c6:	4b0c      	ldr	r3, [pc, #48]	@ (80004f8 <HAL_MspInit+0x44>)
 80004c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004ca:	2201      	movs	r2, #1
 80004cc:	4013      	ands	r3, r2
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d2:	4b09      	ldr	r3, [pc, #36]	@ (80004f8 <HAL_MspInit+0x44>)
 80004d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80004d6:	4b08      	ldr	r3, [pc, #32]	@ (80004f8 <HAL_MspInit+0x44>)
 80004d8:	2180      	movs	r1, #128	@ 0x80
 80004da:	0549      	lsls	r1, r1, #21
 80004dc:	430a      	orrs	r2, r1
 80004de:	63da      	str	r2, [r3, #60]	@ 0x3c
 80004e0:	4b05      	ldr	r3, [pc, #20]	@ (80004f8 <HAL_MspInit+0x44>)
 80004e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80004e4:	2380      	movs	r3, #128	@ 0x80
 80004e6:	055b      	lsls	r3, r3, #21
 80004e8:	4013      	ands	r3, r2
 80004ea:	603b      	str	r3, [r7, #0]
 80004ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ee:	46c0      	nop			@ (mov r8, r8)
 80004f0:	46bd      	mov	sp, r7
 80004f2:	b002      	add	sp, #8
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)
 80004f8:	40021000 	.word	0x40021000

080004fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004fc:	b590      	push	{r4, r7, lr}
 80004fe:	b091      	sub	sp, #68	@ 0x44
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000504:	232c      	movs	r3, #44	@ 0x2c
 8000506:	18fb      	adds	r3, r7, r3
 8000508:	0018      	movs	r0, r3
 800050a:	2314      	movs	r3, #20
 800050c:	001a      	movs	r2, r3
 800050e:	2100      	movs	r1, #0
 8000510:	f002 fc8c 	bl	8002e2c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000514:	2410      	movs	r4, #16
 8000516:	193b      	adds	r3, r7, r4
 8000518:	0018      	movs	r0, r3
 800051a:	231c      	movs	r3, #28
 800051c:	001a      	movs	r2, r3
 800051e:	2100      	movs	r1, #0
 8000520:	f002 fc84 	bl	8002e2c <memset>
  if(hadc->Instance==ADC1)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a20      	ldr	r2, [pc, #128]	@ (80005ac <HAL_ADC_MspInit+0xb0>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d139      	bne.n	80005a2 <HAL_ADC_MspInit+0xa6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800052e:	193b      	adds	r3, r7, r4
 8000530:	2220      	movs	r2, #32
 8000532:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000534:	193b      	adds	r3, r7, r4
 8000536:	2200      	movs	r2, #0
 8000538:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800053a:	193b      	adds	r3, r7, r4
 800053c:	0018      	movs	r0, r3
 800053e:	f001 ff79 	bl	8002434 <HAL_RCCEx_PeriphCLKConfig>
 8000542:	1e03      	subs	r3, r0, #0
 8000544:	d001      	beq.n	800054a <HAL_ADC_MspInit+0x4e>
    {
      Error_Handler();
 8000546:	f7ff ffaf 	bl	80004a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800054a:	4b19      	ldr	r3, [pc, #100]	@ (80005b0 <HAL_ADC_MspInit+0xb4>)
 800054c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800054e:	4b18      	ldr	r3, [pc, #96]	@ (80005b0 <HAL_ADC_MspInit+0xb4>)
 8000550:	2180      	movs	r1, #128	@ 0x80
 8000552:	0349      	lsls	r1, r1, #13
 8000554:	430a      	orrs	r2, r1
 8000556:	641a      	str	r2, [r3, #64]	@ 0x40
 8000558:	4b15      	ldr	r3, [pc, #84]	@ (80005b0 <HAL_ADC_MspInit+0xb4>)
 800055a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800055c:	2380      	movs	r3, #128	@ 0x80
 800055e:	035b      	lsls	r3, r3, #13
 8000560:	4013      	ands	r3, r2
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	4b12      	ldr	r3, [pc, #72]	@ (80005b0 <HAL_ADC_MspInit+0xb4>)
 8000568:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800056a:	4b11      	ldr	r3, [pc, #68]	@ (80005b0 <HAL_ADC_MspInit+0xb4>)
 800056c:	2101      	movs	r1, #1
 800056e:	430a      	orrs	r2, r1
 8000570:	635a      	str	r2, [r3, #52]	@ 0x34
 8000572:	4b0f      	ldr	r3, [pc, #60]	@ (80005b0 <HAL_ADC_MspInit+0xb4>)
 8000574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000576:	2201      	movs	r2, #1
 8000578:	4013      	ands	r3, r2
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA11 [PA9]     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800057e:	212c      	movs	r1, #44	@ 0x2c
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2280      	movs	r2, #128	@ 0x80
 8000584:	0112      	lsls	r2, r2, #4
 8000586:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2203      	movs	r2, #3
 800058c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	187b      	adds	r3, r7, r1
 8000590:	2200      	movs	r2, #0
 8000592:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000594:	187a      	adds	r2, r7, r1
 8000596:	23a0      	movs	r3, #160	@ 0xa0
 8000598:	05db      	lsls	r3, r3, #23
 800059a:	0011      	movs	r1, r2
 800059c:	0018      	movs	r0, r3
 800059e:	f001 fa5f 	bl	8001a60 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	46bd      	mov	sp, r7
 80005a6:	b011      	add	sp, #68	@ 0x44
 80005a8:	bd90      	pop	{r4, r7, pc}
 80005aa:	46c0      	nop			@ (mov r8, r8)
 80005ac:	40012400 	.word	0x40012400
 80005b0:	40021000 	.word	0x40021000

080005b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005b8:	46c0      	nop			@ (mov r8, r8)
 80005ba:	e7fd      	b.n	80005b8 <NMI_Handler+0x4>

080005bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005c0:	46c0      	nop			@ (mov r8, r8)
 80005c2:	e7fd      	b.n	80005c0 <HardFault_Handler+0x4>

080005c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005c8:	46c0      	nop			@ (mov r8, r8)
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}

080005ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005d2:	46c0      	nop			@ (mov r8, r8)
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005dc:	f000 fa7c 	bl	8000ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005e0:	46c0      	nop			@ (mov r8, r8)
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80005ea:	2000      	movs	r0, #0
 80005ec:	f000 f928 	bl	8000840 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80005f0:	46c0      	nop			@ (mov r8, r8)
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005fc:	4b03      	ldr	r3, [pc, #12]	@ (800060c <SystemInit+0x14>)
 80005fe:	2280      	movs	r2, #128	@ 0x80
 8000600:	0512      	lsls	r2, r2, #20
 8000602:	609a      	str	r2, [r3, #8]
#endif
}
 8000604:	46c0      	nop			@ (mov r8, r8)
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000610:	480d      	ldr	r0, [pc, #52]	@ (8000648 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000612:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000614:	f7ff fff0 	bl	80005f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000618:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800061a:	e003      	b.n	8000624 <LoopCopyDataInit>

0800061c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800061c:	4b0b      	ldr	r3, [pc, #44]	@ (800064c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800061e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000620:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000622:	3104      	adds	r1, #4

08000624 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000624:	480a      	ldr	r0, [pc, #40]	@ (8000650 <LoopForever+0xa>)
  ldr r3, =_edata
 8000626:	4b0b      	ldr	r3, [pc, #44]	@ (8000654 <LoopForever+0xe>)
  adds r2, r0, r1
 8000628:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800062a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800062c:	d3f6      	bcc.n	800061c <CopyDataInit>
  ldr r2, =_sbss
 800062e:	4a0a      	ldr	r2, [pc, #40]	@ (8000658 <LoopForever+0x12>)
  b LoopFillZerobss
 8000630:	e002      	b.n	8000638 <LoopFillZerobss>

08000632 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000632:	2300      	movs	r3, #0
  str  r3, [r2]
 8000634:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000636:	3204      	adds	r2, #4

08000638 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000638:	4b08      	ldr	r3, [pc, #32]	@ (800065c <LoopForever+0x16>)
  cmp r2, r3
 800063a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800063c:	d3f9      	bcc.n	8000632 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800063e:	f002 fbfd 	bl	8002e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000642:	f7ff fded 	bl	8000220 <main>

08000646 <LoopForever>:

LoopForever:
    b LoopForever
 8000646:	e7fe      	b.n	8000646 <LoopForever>
  ldr   r0, =_estack
 8000648:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 800064c:	08002f24 	.word	0x08002f24
  ldr r0, =_sdata
 8000650:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000654:	20000028 	.word	0x20000028
  ldr r2, =_sbss
 8000658:	20000028 	.word	0x20000028
  ldr r3, = _ebss
 800065c:	2000015c 	.word	0x2000015c

08000660 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000660:	e7fe      	b.n	8000660 <ADC1_IRQHandler>
	...

08000664 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08a      	sub	sp, #40	@ 0x28
 8000668:	af00      	add	r7, sp, #0
 800066a:	0002      	movs	r2, r0
 800066c:	1dfb      	adds	r3, r7, #7
 800066e:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8000670:	2300      	movs	r3, #0
 8000672:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;

#if defined (USE_NUCLEO_64)
  if ((Led != LED1)
 8000674:	1dfb      	adds	r3, r7, #7
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d007      	beq.n	800068c <BSP_LED_Init+0x28>
      && (Led != LED2))
 800067c:	1dfb      	adds	r3, r7, #7
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d003      	beq.n	800068c <BSP_LED_Init+0x28>
#else
  if (Led != LED4)
#endif /* defined (USE_NUCLEO_64) */
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000684:	2302      	movs	r3, #2
 8000686:	425b      	negs	r3, r3
 8000688:	627b      	str	r3, [r7, #36]	@ 0x24
 800068a:	e04a      	b.n	8000722 <BSP_LED_Init+0xbe>
  }
  else
  {
    /* Enable the GPIO LED Clock */
#if defined (USE_NUCLEO_64)
    if (Led == LED1)
 800068c:	1dfb      	adds	r3, r7, #7
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d10c      	bne.n	80006ae <BSP_LED_Init+0x4a>
    {
      LED1_GPIO_CLK_ENABLE();
 8000694:	4b25      	ldr	r3, [pc, #148]	@ (800072c <BSP_LED_Init+0xc8>)
 8000696:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000698:	4b24      	ldr	r3, [pc, #144]	@ (800072c <BSP_LED_Init+0xc8>)
 800069a:	2101      	movs	r1, #1
 800069c:	430a      	orrs	r2, r1
 800069e:	635a      	str	r2, [r3, #52]	@ 0x34
 80006a0:	4b22      	ldr	r3, [pc, #136]	@ (800072c <BSP_LED_Init+0xc8>)
 80006a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006a4:	2201      	movs	r2, #1
 80006a6:	4013      	ands	r3, r2
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	e00b      	b.n	80006c6 <BSP_LED_Init+0x62>
    }
    else
    {
      LED2_GPIO_CLK_ENABLE();
 80006ae:	4b1f      	ldr	r3, [pc, #124]	@ (800072c <BSP_LED_Init+0xc8>)
 80006b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006b2:	4b1e      	ldr	r3, [pc, #120]	@ (800072c <BSP_LED_Init+0xc8>)
 80006b4:	2104      	movs	r1, #4
 80006b6:	430a      	orrs	r2, r1
 80006b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80006ba:	4b1c      	ldr	r3, [pc, #112]	@ (800072c <BSP_LED_Init+0xc8>)
 80006bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006be:	2204      	movs	r2, #4
 80006c0:	4013      	ands	r3, r2
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
      LED4_GPIO_CLK_ENABLE();
    }
#endif /* defined (USE_NUCLEO_64) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80006c6:	1dfb      	adds	r3, r7, #7
 80006c8:	781a      	ldrb	r2, [r3, #0]
 80006ca:	4b19      	ldr	r3, [pc, #100]	@ (8000730 <BSP_LED_Init+0xcc>)
 80006cc:	0052      	lsls	r2, r2, #1
 80006ce:	5ad3      	ldrh	r3, [r2, r3]
 80006d0:	001a      	movs	r2, r3
 80006d2:	2110      	movs	r1, #16
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	601a      	str	r2, [r3, #0]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2201      	movs	r2, #1
 80006dc:	605a      	str	r2, [r3, #4]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2203      	movs	r2, #3
 80006e8:	60da      	str	r2, [r3, #12]

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80006ea:	1dfb      	adds	r3, r7, #7
 80006ec:	781a      	ldrb	r2, [r3, #0]
 80006ee:	4b11      	ldr	r3, [pc, #68]	@ (8000734 <BSP_LED_Init+0xd0>)
 80006f0:	0092      	lsls	r2, r2, #2
 80006f2:	58d3      	ldr	r3, [r2, r3]
 80006f4:	187a      	adds	r2, r7, r1
 80006f6:	0011      	movs	r1, r2
 80006f8:	0018      	movs	r0, r3
 80006fa:	f001 f9b1 	bl	8001a60 <HAL_GPIO_Init>
#if defined (USE_NUCLEO_64)
    if (Led == LED2)
 80006fe:	1dfb      	adds	r3, r7, #7
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d10d      	bne.n	8000722 <BSP_LED_Init+0xbe>
    {
     HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN[Led], GPIO_PIN_SET);
 8000706:	1dfb      	adds	r3, r7, #7
 8000708:	781a      	ldrb	r2, [r3, #0]
 800070a:	4b0a      	ldr	r3, [pc, #40]	@ (8000734 <BSP_LED_Init+0xd0>)
 800070c:	0092      	lsls	r2, r2, #2
 800070e:	58d0      	ldr	r0, [r2, r3]
 8000710:	1dfb      	adds	r3, r7, #7
 8000712:	781a      	ldrb	r2, [r3, #0]
 8000714:	4b06      	ldr	r3, [pc, #24]	@ (8000730 <BSP_LED_Init+0xcc>)
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	5ad3      	ldrh	r3, [r2, r3]
 800071a:	2201      	movs	r2, #1
 800071c:	0019      	movs	r1, r3
 800071e:	f001 fb11 	bl	8001d44 <HAL_GPIO_WritePin>
    }
#endif
  }
  return ret;
 8000722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000724:	0018      	movs	r0, r3
 8000726:	46bd      	mov	sp, r7
 8000728:	b00a      	add	sp, #40	@ 0x28
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40021000 	.word	0x40021000
 8000730:	08002efc 	.word	0x08002efc
 8000734:	2000000c 	.word	0x2000000c

08000738 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
 800073e:	0002      	movs	r2, r0
 8000740:	1dfb      	adds	r3, r7, #7
 8000742:	701a      	strb	r2, [r3, #0]
 8000744:	1dbb      	adds	r3, r7, #6
 8000746:	1c0a      	adds	r2, r1, #0
 8000748:	701a      	strb	r2, [r3, #0]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 800074a:	4b36      	ldr	r3, [pc, #216]	@ (8000824 <BSP_PB_Init+0xec>)
 800074c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800074e:	4b35      	ldr	r3, [pc, #212]	@ (8000824 <BSP_PB_Init+0xec>)
 8000750:	2104      	movs	r1, #4
 8000752:	430a      	orrs	r2, r1
 8000754:	635a      	str	r2, [r3, #52]	@ 0x34
 8000756:	4b33      	ldr	r3, [pc, #204]	@ (8000824 <BSP_PB_Init+0xec>)
 8000758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800075a:	2204      	movs	r2, #4
 800075c:	4013      	ands	r3, r2
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000762:	2380      	movs	r3, #128	@ 0x80
 8000764:	019b      	lsls	r3, r3, #6
 8000766:	001a      	movs	r2, r3
 8000768:	210c      	movs	r1, #12
 800076a:	187b      	adds	r3, r7, r1
 800076c:	601a      	str	r2, [r3, #0]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800076e:	187b      	adds	r3, r7, r1
 8000770:	2201      	movs	r2, #1
 8000772:	609a      	str	r2, [r3, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000774:	187b      	adds	r3, r7, r1
 8000776:	2202      	movs	r2, #2
 8000778:	60da      	str	r2, [r3, #12]

  if (ButtonMode == BUTTON_MODE_GPIO)
 800077a:	1dbb      	adds	r3, r7, #6
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d10d      	bne.n	800079e <BSP_PB_Init+0x66>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000782:	187b      	adds	r3, r7, r1
 8000784:	2200      	movs	r2, #0
 8000786:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000788:	1dfb      	adds	r3, r7, #7
 800078a:	781a      	ldrb	r2, [r3, #0]
 800078c:	4b26      	ldr	r3, [pc, #152]	@ (8000828 <BSP_PB_Init+0xf0>)
 800078e:	0092      	lsls	r2, r2, #2
 8000790:	58d3      	ldr	r3, [r2, r3]
 8000792:	187a      	adds	r2, r7, r1
 8000794:	0011      	movs	r1, r2
 8000796:	0018      	movs	r0, r3
 8000798:	f001 f962 	bl	8001a60 <HAL_GPIO_Init>
 800079c:	e03c      	b.n	8000818 <BSP_PB_Init+0xe0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 800079e:	210c      	movs	r1, #12
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	4a22      	ldr	r2, [pc, #136]	@ (800082c <BSP_PB_Init+0xf4>)
 80007a4:	605a      	str	r2, [r3, #4]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80007a6:	1dfb      	adds	r3, r7, #7
 80007a8:	781a      	ldrb	r2, [r3, #0]
 80007aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000828 <BSP_PB_Init+0xf0>)
 80007ac:	0092      	lsls	r2, r2, #2
 80007ae:	58d3      	ldr	r3, [r2, r3]
 80007b0:	187a      	adds	r2, r7, r1
 80007b2:	0011      	movs	r1, r2
 80007b4:	0018      	movs	r0, r3
 80007b6:	f001 f953 	bl	8001a60 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80007ba:	1dfb      	adds	r3, r7, #7
 80007bc:	781a      	ldrb	r2, [r3, #0]
 80007be:	0013      	movs	r3, r2
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	189b      	adds	r3, r3, r2
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	4a1a      	ldr	r2, [pc, #104]	@ (8000830 <BSP_PB_Init+0xf8>)
 80007c8:	1898      	adds	r0, r3, r2
 80007ca:	1dfb      	adds	r3, r7, #7
 80007cc:	781a      	ldrb	r2, [r3, #0]
 80007ce:	4b19      	ldr	r3, [pc, #100]	@ (8000834 <BSP_PB_Init+0xfc>)
 80007d0:	0092      	lsls	r2, r2, #2
 80007d2:	58d3      	ldr	r3, [r2, r3]
 80007d4:	0019      	movs	r1, r3
 80007d6:	f001 f8e7 	bl	80019a8 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80007da:	1dfb      	adds	r3, r7, #7
 80007dc:	781a      	ldrb	r2, [r3, #0]
 80007de:	0013      	movs	r3, r2
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	189b      	adds	r3, r3, r2
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	4a12      	ldr	r2, [pc, #72]	@ (8000830 <BSP_PB_Init+0xf8>)
 80007e8:	1898      	adds	r0, r3, r2
 80007ea:	1dfb      	adds	r3, r7, #7
 80007ec:	781a      	ldrb	r2, [r3, #0]
 80007ee:	4b12      	ldr	r3, [pc, #72]	@ (8000838 <BSP_PB_Init+0x100>)
 80007f0:	0092      	lsls	r2, r2, #2
 80007f2:	58d3      	ldr	r3, [r2, r3]
 80007f4:	001a      	movs	r2, r3
 80007f6:	2100      	movs	r1, #0
 80007f8:	f001 f8a4 	bl	8001944 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80007fc:	2007      	movs	r0, #7
 80007fe:	1dfb      	adds	r3, r7, #7
 8000800:	781a      	ldrb	r2, [r3, #0]
 8000802:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <BSP_PB_Init+0x104>)
 8000804:	0092      	lsls	r2, r2, #2
 8000806:	58d3      	ldr	r3, [r2, r3]
 8000808:	2200      	movs	r2, #0
 800080a:	0019      	movs	r1, r3
 800080c:	f001 f868 	bl	80018e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000810:	2307      	movs	r3, #7
 8000812:	0018      	movs	r0, r3
 8000814:	f001 f879 	bl	800190a <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000818:	2300      	movs	r3, #0
}
 800081a:	0018      	movs	r0, r3
 800081c:	46bd      	mov	sp, r7
 800081e:	b008      	add	sp, #32
 8000820:	bd80      	pop	{r7, pc}
 8000822:	46c0      	nop			@ (mov r8, r8)
 8000824:	40021000 	.word	0x40021000
 8000828:	20000014 	.word	0x20000014
 800082c:	10210000 	.word	0x10210000
 8000830:	200000b8 	.word	0x200000b8
 8000834:	08002f00 	.word	0x08002f00
 8000838:	20000018 	.word	0x20000018
 800083c:	2000001c 	.word	0x2000001c

08000840 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	0002      	movs	r2, r0
 8000848:	1dfb      	adds	r3, r7, #7
 800084a:	701a      	strb	r2, [r3, #0]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800084c:	1dfb      	adds	r3, r7, #7
 800084e:	781a      	ldrb	r2, [r3, #0]
 8000850:	0013      	movs	r3, r2
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	189b      	adds	r3, r3, r2
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	4a04      	ldr	r2, [pc, #16]	@ (800086c <BSP_PB_IRQHandler+0x2c>)
 800085a:	189b      	adds	r3, r3, r2
 800085c:	0018      	movs	r0, r3
 800085e:	f001 f8b5 	bl	80019cc <HAL_EXTI_IRQHandler>
}
 8000862:	46c0      	nop			@ (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	b002      	add	sp, #8
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			@ (mov r8, r8)
 800086c:	200000b8 	.word	0x200000b8

08000870 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	0002      	movs	r2, r0
 8000878:	1dfb      	adds	r3, r7, #7
 800087a:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800087c:	46c0      	nop			@ (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	b002      	add	sp, #8
 8000882:	bd80      	pop	{r7, pc}

08000884 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	0002      	movs	r2, r0
 800088c:	6039      	str	r1, [r7, #0]
 800088e:	1dfb      	adds	r3, r7, #7
 8000890:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 8000896:	1dfb      	adds	r3, r7, #7
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d003      	beq.n	80008a6 <BSP_COM_Init+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800089e:	2302      	movs	r3, #2
 80008a0:	425b      	negs	r3, r3
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	e018      	b.n	80008d8 <BSP_COM_Init+0x54>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80008a6:	1dfb      	adds	r3, r7, #7
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2294      	movs	r2, #148	@ 0x94
 80008ac:	435a      	muls	r2, r3
 80008ae:	4b0d      	ldr	r3, [pc, #52]	@ (80008e4 <BSP_COM_Init+0x60>)
 80008b0:	18d3      	adds	r3, r2, r3
 80008b2:	0018      	movs	r0, r3
 80008b4:	f000 f856 	bl	8000964 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART2_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80008b8:	1dfb      	adds	r3, r7, #7
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2294      	movs	r2, #148	@ 0x94
 80008be:	435a      	muls	r2, r3
 80008c0:	4b08      	ldr	r3, [pc, #32]	@ (80008e4 <BSP_COM_Init+0x60>)
 80008c2:	18d3      	adds	r3, r2, r3
 80008c4:	683a      	ldr	r2, [r7, #0]
 80008c6:	0011      	movs	r1, r2
 80008c8:	0018      	movs	r0, r3
 80008ca:	f000 f80d 	bl	80008e8 <MX_USART2_Init>
 80008ce:	1e03      	subs	r3, r0, #0
 80008d0:	d002      	beq.n	80008d8 <BSP_COM_Init+0x54>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80008d2:	2304      	movs	r3, #4
 80008d4:	425b      	negs	r3, r3
 80008d6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80008d8:	68fb      	ldr	r3, [r7, #12]
}
 80008da:	0018      	movs	r0, r3
 80008dc:	46bd      	mov	sp, r7
 80008de:	b004      	add	sp, #16
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	46c0      	nop			@ (mov r8, r8)
 80008e4:	200000c4 	.word	0x200000c4

080008e8 <MX_USART2_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART2_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 80008f2:	4b17      	ldr	r3, [pc, #92]	@ (8000950 <MX_USART2_Init+0x68>)
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	220c      	movs	r2, #12
 8000906:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	895b      	ldrh	r3, [r3, #10]
 800090c:	001a      	movs	r2, r3
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	685a      	ldr	r2, [r3, #4]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	891b      	ldrh	r3, [r3, #8]
 800091e:	001a      	movs	r2, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	899b      	ldrh	r3, [r3, #12]
 8000928:	001a      	movs	r2, r3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2280      	movs	r2, #128	@ 0x80
 8000932:	0212      	lsls	r2, r2, #8
 8000934:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2200      	movs	r2, #0
 800093a:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	0018      	movs	r0, r3
 8000940:	f001 fe64 	bl	800260c <HAL_UART_Init>
 8000944:	0003      	movs	r3, r0
}
 8000946:	0018      	movs	r0, r3
 8000948:	46bd      	mov	sp, r7
 800094a:	b002      	add	sp, #8
 800094c:	bd80      	pop	{r7, pc}
 800094e:	46c0      	nop			@ (mov r8, r8)
 8000950:	20000008 	.word	0x20000008

08000954 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000958:	2000      	movs	r0, #0
 800095a:	f7ff ff89 	bl	8000870 <BSP_PB_Callback>
}
 800095e:	46c0      	nop			@ (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000964:	b590      	push	{r4, r7, lr}
 8000966:	b08b      	sub	sp, #44	@ 0x2c
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 800096c:	4b28      	ldr	r3, [pc, #160]	@ (8000a10 <COM1_MspInit+0xac>)
 800096e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000970:	4b27      	ldr	r3, [pc, #156]	@ (8000a10 <COM1_MspInit+0xac>)
 8000972:	2101      	movs	r1, #1
 8000974:	430a      	orrs	r2, r1
 8000976:	635a      	str	r2, [r3, #52]	@ 0x34
 8000978:	4b25      	ldr	r3, [pc, #148]	@ (8000a10 <COM1_MspInit+0xac>)
 800097a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800097c:	2201      	movs	r2, #1
 800097e:	4013      	ands	r3, r2
 8000980:	613b      	str	r3, [r7, #16]
 8000982:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000984:	4b22      	ldr	r3, [pc, #136]	@ (8000a10 <COM1_MspInit+0xac>)
 8000986:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000988:	4b21      	ldr	r3, [pc, #132]	@ (8000a10 <COM1_MspInit+0xac>)
 800098a:	2101      	movs	r1, #1
 800098c:	430a      	orrs	r2, r1
 800098e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000990:	4b1f      	ldr	r3, [pc, #124]	@ (8000a10 <COM1_MspInit+0xac>)
 8000992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000994:	2201      	movs	r2, #1
 8000996:	4013      	ands	r3, r2
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 800099c:	4b1c      	ldr	r3, [pc, #112]	@ (8000a10 <COM1_MspInit+0xac>)
 800099e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a10 <COM1_MspInit+0xac>)
 80009a2:	2180      	movs	r1, #128	@ 0x80
 80009a4:	0289      	lsls	r1, r1, #10
 80009a6:	430a      	orrs	r2, r1
 80009a8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80009aa:	4b19      	ldr	r3, [pc, #100]	@ (8000a10 <COM1_MspInit+0xac>)
 80009ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009ae:	2380      	movs	r3, #128	@ 0x80
 80009b0:	029b      	lsls	r3, r3, #10
 80009b2:	4013      	ands	r3, r2
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 80009b8:	2414      	movs	r4, #20
 80009ba:	193b      	adds	r3, r7, r4
 80009bc:	2204      	movs	r2, #4
 80009be:	601a      	str	r2, [r3, #0]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80009c0:	193b      	adds	r3, r7, r4
 80009c2:	2202      	movs	r2, #2
 80009c4:	605a      	str	r2, [r3, #4]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80009c6:	193b      	adds	r3, r7, r4
 80009c8:	2202      	movs	r2, #2
 80009ca:	60da      	str	r2, [r3, #12]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80009cc:	193b      	adds	r3, r7, r4
 80009ce:	2201      	movs	r2, #1
 80009d0:	609a      	str	r2, [r3, #8]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80009d2:	193b      	adds	r3, r7, r4
 80009d4:	2201      	movs	r2, #1
 80009d6:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80009d8:	193a      	adds	r2, r7, r4
 80009da:	23a0      	movs	r3, #160	@ 0xa0
 80009dc:	05db      	lsls	r3, r3, #23
 80009de:	0011      	movs	r1, r2
 80009e0:	0018      	movs	r0, r3
 80009e2:	f001 f83d 	bl	8001a60 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 80009e6:	193b      	adds	r3, r7, r4
 80009e8:	2208      	movs	r2, #8
 80009ea:	601a      	str	r2, [r3, #0]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80009ec:	193b      	adds	r3, r7, r4
 80009ee:	2202      	movs	r2, #2
 80009f0:	605a      	str	r2, [r3, #4]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80009f2:	193b      	adds	r3, r7, r4
 80009f4:	2201      	movs	r2, #1
 80009f6:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80009f8:	193a      	adds	r2, r7, r4
 80009fa:	23a0      	movs	r3, #160	@ 0xa0
 80009fc:	05db      	lsls	r3, r3, #23
 80009fe:	0011      	movs	r1, r2
 8000a00:	0018      	movs	r0, r3
 8000a02:	f001 f82d 	bl	8001a60 <HAL_GPIO_Init>
}
 8000a06:	46c0      	nop			@ (mov r8, r8)
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	b00b      	add	sp, #44	@ 0x2c
 8000a0c:	bd90      	pop	{r4, r7, pc}
 8000a0e:	46c0      	nop			@ (mov r8, r8)
 8000a10:	40021000 	.word	0x40021000

08000a14 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a1a:	1dfb      	adds	r3, r7, #7
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a20:	2003      	movs	r0, #3
 8000a22:	f000 f80f 	bl	8000a44 <HAL_InitTick>
 8000a26:	1e03      	subs	r3, r0, #0
 8000a28:	d003      	beq.n	8000a32 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000a2a:	1dfb      	adds	r3, r7, #7
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	701a      	strb	r2, [r3, #0]
 8000a30:	e001      	b.n	8000a36 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a32:	f7ff fd3f 	bl	80004b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a36:	1dfb      	adds	r3, r7, #7
 8000a38:	781b      	ldrb	r3, [r3, #0]
}
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	b002      	add	sp, #8
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a44:	b590      	push	{r4, r7, lr}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a4c:	230f      	movs	r3, #15
 8000a4e:	18fb      	adds	r3, r7, r3
 8000a50:	2200      	movs	r2, #0
 8000a52:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000a54:	4b1d      	ldr	r3, [pc, #116]	@ (8000acc <HAL_InitTick+0x88>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d02b      	beq.n	8000ab4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000a5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad0 <HAL_InitTick+0x8c>)
 8000a5e:	681c      	ldr	r4, [r3, #0]
 8000a60:	4b1a      	ldr	r3, [pc, #104]	@ (8000acc <HAL_InitTick+0x88>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	0019      	movs	r1, r3
 8000a66:	23fa      	movs	r3, #250	@ 0xfa
 8000a68:	0098      	lsls	r0, r3, #2
 8000a6a:	f7ff fb4d 	bl	8000108 <__udivsi3>
 8000a6e:	0003      	movs	r3, r0
 8000a70:	0019      	movs	r1, r3
 8000a72:	0020      	movs	r0, r4
 8000a74:	f7ff fb48 	bl	8000108 <__udivsi3>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f000 ff55 	bl	800192a <HAL_SYSTICK_Config>
 8000a80:	1e03      	subs	r3, r0, #0
 8000a82:	d112      	bne.n	8000aaa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2b03      	cmp	r3, #3
 8000a88:	d80a      	bhi.n	8000aa0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	425b      	negs	r3, r3
 8000a90:	2200      	movs	r2, #0
 8000a92:	0018      	movs	r0, r3
 8000a94:	f000 ff24 	bl	80018e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a98:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad4 <HAL_InitTick+0x90>)
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	e00d      	b.n	8000abc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000aa0:	230f      	movs	r3, #15
 8000aa2:	18fb      	adds	r3, r7, r3
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	701a      	strb	r2, [r3, #0]
 8000aa8:	e008      	b.n	8000abc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000aaa:	230f      	movs	r3, #15
 8000aac:	18fb      	adds	r3, r7, r3
 8000aae:	2201      	movs	r2, #1
 8000ab0:	701a      	strb	r2, [r3, #0]
 8000ab2:	e003      	b.n	8000abc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ab4:	230f      	movs	r3, #15
 8000ab6:	18fb      	adds	r3, r7, r3
 8000ab8:	2201      	movs	r2, #1
 8000aba:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000abc:	230f      	movs	r3, #15
 8000abe:	18fb      	adds	r3, r7, r3
 8000ac0:	781b      	ldrb	r3, [r3, #0]
}
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	b005      	add	sp, #20
 8000ac8:	bd90      	pop	{r4, r7, pc}
 8000aca:	46c0      	nop			@ (mov r8, r8)
 8000acc:	20000024 	.word	0x20000024
 8000ad0:	20000004 	.word	0x20000004
 8000ad4:	20000020 	.word	0x20000020

08000ad8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000adc:	4b05      	ldr	r3, [pc, #20]	@ (8000af4 <HAL_IncTick+0x1c>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	001a      	movs	r2, r3
 8000ae2:	4b05      	ldr	r3, [pc, #20]	@ (8000af8 <HAL_IncTick+0x20>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	18d2      	adds	r2, r2, r3
 8000ae8:	4b03      	ldr	r3, [pc, #12]	@ (8000af8 <HAL_IncTick+0x20>)
 8000aea:	601a      	str	r2, [r3, #0]
}
 8000aec:	46c0      	nop			@ (mov r8, r8)
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	46c0      	nop			@ (mov r8, r8)
 8000af4:	20000024 	.word	0x20000024
 8000af8:	20000158 	.word	0x20000158

08000afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  return uwTick;
 8000b00:	4b02      	ldr	r3, [pc, #8]	@ (8000b0c <HAL_GetTick+0x10>)
 8000b02:	681b      	ldr	r3, [r3, #0]
}
 8000b04:	0018      	movs	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	46c0      	nop			@ (mov r8, r8)
 8000b0c:	20000158 	.word	0x20000158

08000b10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b18:	f7ff fff0 	bl	8000afc <HAL_GetTick>
 8000b1c:	0003      	movs	r3, r0
 8000b1e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	3301      	adds	r3, #1
 8000b28:	d005      	beq.n	8000b36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b54 <HAL_Delay+0x44>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	001a      	movs	r2, r3
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	189b      	adds	r3, r3, r2
 8000b34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b36:	46c0      	nop			@ (mov r8, r8)
 8000b38:	f7ff ffe0 	bl	8000afc <HAL_GetTick>
 8000b3c:	0002      	movs	r2, r0
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	68fa      	ldr	r2, [r7, #12]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d8f7      	bhi.n	8000b38 <HAL_Delay+0x28>
  {
  }
}
 8000b48:	46c0      	nop			@ (mov r8, r8)
 8000b4a:	46c0      	nop			@ (mov r8, r8)
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	b004      	add	sp, #16
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	46c0      	nop			@ (mov r8, r8)
 8000b54:	20000024 	.word	0x20000024

08000b58 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a05      	ldr	r2, [pc, #20]	@ (8000b7c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000b68:	401a      	ands	r2, r3
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	431a      	orrs	r2, r3
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	601a      	str	r2, [r3, #0]
}
 8000b72:	46c0      	nop			@ (mov r8, r8)
 8000b74:	46bd      	mov	sp, r7
 8000b76:	b002      	add	sp, #8
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	46c0      	nop			@ (mov r8, r8)
 8000b7c:	ff3fffff 	.word	0xff3fffff

08000b80 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	23c0      	movs	r3, #192	@ 0xc0
 8000b8e:	041b      	lsls	r3, r3, #16
 8000b90:	4013      	ands	r3, r2
}
 8000b92:	0018      	movs	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	b002      	add	sp, #8
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b084      	sub	sp, #16
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	60f8      	str	r0, [r7, #12]
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	695b      	ldr	r3, [r3, #20]
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	2104      	movs	r1, #4
 8000bae:	400a      	ands	r2, r1
 8000bb0:	2107      	movs	r1, #7
 8000bb2:	4091      	lsls	r1, r2
 8000bb4:	000a      	movs	r2, r1
 8000bb6:	43d2      	mvns	r2, r2
 8000bb8:	401a      	ands	r2, r3
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	2104      	movs	r1, #4
 8000bbe:	400b      	ands	r3, r1
 8000bc0:	6879      	ldr	r1, [r7, #4]
 8000bc2:	4099      	lsls	r1, r3
 8000bc4:	000b      	movs	r3, r1
 8000bc6:	431a      	orrs	r2, r3
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000bcc:	46c0      	nop			@ (mov r8, r8)
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	b004      	add	sp, #16
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	695b      	ldr	r3, [r3, #20]
 8000be2:	683a      	ldr	r2, [r7, #0]
 8000be4:	2104      	movs	r1, #4
 8000be6:	400a      	ands	r2, r1
 8000be8:	2107      	movs	r1, #7
 8000bea:	4091      	lsls	r1, r2
 8000bec:	000a      	movs	r2, r1
 8000bee:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	2104      	movs	r1, #4
 8000bf4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000bf6:	40da      	lsrs	r2, r3
 8000bf8:	0013      	movs	r3, r2
}
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	b002      	add	sp, #8
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	68da      	ldr	r2, [r3, #12]
 8000c0e:	23c0      	movs	r3, #192	@ 0xc0
 8000c10:	011b      	lsls	r3, r3, #4
 8000c12:	4013      	ands	r3, r2
 8000c14:	d101      	bne.n	8000c1a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000c16:	2301      	movs	r3, #1
 8000c18:	e000      	b.n	8000c1c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000c1a:	2300      	movs	r3, #0
}
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b002      	add	sp, #8
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c34:	68ba      	ldr	r2, [r7, #8]
 8000c36:	211f      	movs	r1, #31
 8000c38:	400a      	ands	r2, r1
 8000c3a:	210f      	movs	r1, #15
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	000a      	movs	r2, r1
 8000c40:	43d2      	mvns	r2, r2
 8000c42:	401a      	ands	r2, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	0e9b      	lsrs	r3, r3, #26
 8000c48:	210f      	movs	r1, #15
 8000c4a:	4019      	ands	r1, r3
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	201f      	movs	r0, #31
 8000c50:	4003      	ands	r3, r0
 8000c52:	4099      	lsls	r1, r3
 8000c54:	000b      	movs	r3, r1
 8000c56:	431a      	orrs	r2, r3
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000c5c:	46c0      	nop			@ (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	b004      	add	sp, #16
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	025b      	lsls	r3, r3, #9
 8000c76:	0a5b      	lsrs	r3, r3, #9
 8000c78:	431a      	orrs	r2, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c7e:	46c0      	nop			@ (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b002      	add	sp, #8
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
 8000c8e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c94:	683a      	ldr	r2, [r7, #0]
 8000c96:	0252      	lsls	r2, r2, #9
 8000c98:	0a52      	lsrs	r2, r2, #9
 8000c9a:	43d2      	mvns	r2, r2
 8000c9c:	401a      	ands	r2, r3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ca2:	46c0      	nop			@ (mov r8, r8)
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	b002      	add	sp, #8
 8000ca8:	bd80      	pop	{r7, pc}
	...

08000cac <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	695b      	ldr	r3, [r3, #20]
 8000cbc:	68ba      	ldr	r2, [r7, #8]
 8000cbe:	0212      	lsls	r2, r2, #8
 8000cc0:	43d2      	mvns	r2, r2
 8000cc2:	401a      	ands	r2, r3
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	021b      	lsls	r3, r3, #8
 8000cc8:	6879      	ldr	r1, [r7, #4]
 8000cca:	400b      	ands	r3, r1
 8000ccc:	4904      	ldr	r1, [pc, #16]	@ (8000ce0 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000cce:	400b      	ands	r3, r1
 8000cd0:	431a      	orrs	r2, r3
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000cd6:	46c0      	nop			@ (mov r8, r8)
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	b004      	add	sp, #16
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			@ (mov r8, r8)
 8000ce0:	7fffff00 	.word	0x7fffff00

08000ce4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	4a05      	ldr	r2, [pc, #20]	@ (8000d08 <LL_ADC_EnableInternalRegulator+0x24>)
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	2280      	movs	r2, #128	@ 0x80
 8000cf6:	0552      	lsls	r2, r2, #21
 8000cf8:	431a      	orrs	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000cfe:	46c0      	nop			@ (mov r8, r8)
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b002      	add	sp, #8
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	46c0      	nop			@ (mov r8, r8)
 8000d08:	6fffffe8 	.word	0x6fffffe8

08000d0c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	689a      	ldr	r2, [r3, #8]
 8000d18:	2380      	movs	r3, #128	@ 0x80
 8000d1a:	055b      	lsls	r3, r3, #21
 8000d1c:	401a      	ands	r2, r3
 8000d1e:	2380      	movs	r3, #128	@ 0x80
 8000d20:	055b      	lsls	r3, r3, #21
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d101      	bne.n	8000d2a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000d26:	2301      	movs	r3, #1
 8000d28:	e000      	b.n	8000d2c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000d2a:	2300      	movs	r3, #0
}
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b002      	add	sp, #8
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	4a04      	ldr	r2, [pc, #16]	@ (8000d54 <LL_ADC_Enable+0x20>)
 8000d42:	4013      	ands	r3, r2
 8000d44:	2201      	movs	r2, #1
 8000d46:	431a      	orrs	r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000d4c:	46c0      	nop			@ (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b002      	add	sp, #8
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	7fffffe8 	.word	0x7fffffe8

08000d58 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	2201      	movs	r2, #1
 8000d66:	4013      	ands	r3, r2
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d101      	bne.n	8000d70 <LL_ADC_IsEnabled+0x18>
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e000      	b.n	8000d72 <LL_ADC_IsEnabled+0x1a>
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	0018      	movs	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	b002      	add	sp, #8
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	4a04      	ldr	r2, [pc, #16]	@ (8000d9c <LL_ADC_REG_StartConversion+0x20>)
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	2204      	movs	r2, #4
 8000d8e:	431a      	orrs	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000d94:	46c0      	nop			@ (mov r8, r8)
 8000d96:	46bd      	mov	sp, r7
 8000d98:	b002      	add	sp, #8
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	7fffffe8 	.word	0x7fffffe8

08000da0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	2204      	movs	r2, #4
 8000dae:	4013      	ands	r3, r2
 8000db0:	2b04      	cmp	r3, #4
 8000db2:	d101      	bne.n	8000db8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000db4:	2301      	movs	r3, #1
 8000db6:	e000      	b.n	8000dba <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	0018      	movs	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b002      	add	sp, #8
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b088      	sub	sp, #32
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dcc:	231f      	movs	r3, #31
 8000dce:	18fb      	adds	r3, r7, r3
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d101      	bne.n	8000dea <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e17e      	b.n	80010e8 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d10a      	bne.n	8000e08 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	0018      	movs	r0, r3
 8000df6:	f7ff fb81 	bl	80004fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2254      	movs	r2, #84	@ 0x54
 8000e04:	2100      	movs	r1, #0
 8000e06:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f7ff ff7d 	bl	8000d0c <LL_ADC_IsInternalRegulatorEnabled>
 8000e12:	1e03      	subs	r3, r0, #0
 8000e14:	d114      	bne.n	8000e40 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f7ff ff62 	bl	8000ce4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000e20:	4bb3      	ldr	r3, [pc, #716]	@ (80010f0 <HAL_ADC_Init+0x32c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	49b3      	ldr	r1, [pc, #716]	@ (80010f4 <HAL_ADC_Init+0x330>)
 8000e26:	0018      	movs	r0, r3
 8000e28:	f7ff f96e 	bl	8000108 <__udivsi3>
 8000e2c:	0003      	movs	r3, r0
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000e32:	e002      	b.n	8000e3a <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d1f9      	bne.n	8000e34 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	0018      	movs	r0, r3
 8000e46:	f7ff ff61 	bl	8000d0c <LL_ADC_IsInternalRegulatorEnabled>
 8000e4a:	1e03      	subs	r3, r0, #0
 8000e4c:	d10f      	bne.n	8000e6e <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e52:	2210      	movs	r2, #16
 8000e54:	431a      	orrs	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e5e:	2201      	movs	r2, #1
 8000e60:	431a      	orrs	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8000e66:	231f      	movs	r3, #31
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	0018      	movs	r0, r3
 8000e74:	f7ff ff94 	bl	8000da0 <LL_ADC_REG_IsConversionOngoing>
 8000e78:	0003      	movs	r3, r0
 8000e7a:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e80:	2210      	movs	r2, #16
 8000e82:	4013      	ands	r3, r2
 8000e84:	d000      	beq.n	8000e88 <HAL_ADC_Init+0xc4>
 8000e86:	e122      	b.n	80010ce <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d000      	beq.n	8000e90 <HAL_ADC_Init+0xcc>
 8000e8e:	e11e      	b.n	80010ce <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e94:	4a98      	ldr	r2, [pc, #608]	@ (80010f8 <HAL_ADC_Init+0x334>)
 8000e96:	4013      	ands	r3, r2
 8000e98:	2202      	movs	r2, #2
 8000e9a:	431a      	orrs	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f7ff ff57 	bl	8000d58 <LL_ADC_IsEnabled>
 8000eaa:	1e03      	subs	r3, r0, #0
 8000eac:	d000      	beq.n	8000eb0 <HAL_ADC_Init+0xec>
 8000eae:	e0ad      	b.n	800100c <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	7e1b      	ldrb	r3, [r3, #24]
 8000eb8:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000eba:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	7e5b      	ldrb	r3, [r3, #25]
 8000ec0:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000ec2:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	7e9b      	ldrb	r3, [r3, #26]
 8000ec8:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000eca:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d002      	beq.n	8000eda <HAL_ADC_Init+0x116>
 8000ed4:	2380      	movs	r3, #128	@ 0x80
 8000ed6:	015b      	lsls	r3, r3, #5
 8000ed8:	e000      	b.n	8000edc <HAL_ADC_Init+0x118>
 8000eda:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000edc:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000ee2:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	691b      	ldr	r3, [r3, #16]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	da04      	bge.n	8000ef6 <HAL_ADC_Init+0x132>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	691b      	ldr	r3, [r3, #16]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	085b      	lsrs	r3, r3, #1
 8000ef4:	e001      	b.n	8000efa <HAL_ADC_Init+0x136>
 8000ef6:	2380      	movs	r3, #128	@ 0x80
 8000ef8:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8000efa:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	212c      	movs	r1, #44	@ 0x2c
 8000f00:	5c5b      	ldrb	r3, [r3, r1]
 8000f02:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000f04:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2220      	movs	r2, #32
 8000f10:	5c9b      	ldrb	r3, [r3, r2]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d115      	bne.n	8000f42 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	7e9b      	ldrb	r3, [r3, #26]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d105      	bne.n	8000f2a <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	2280      	movs	r2, #128	@ 0x80
 8000f22:	0252      	lsls	r2, r2, #9
 8000f24:	4313      	orrs	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
 8000f28:	e00b      	b.n	8000f42 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f2e:	2220      	movs	r2, #32
 8000f30:	431a      	orrs	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d00a      	beq.n	8000f60 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f4e:	23e0      	movs	r3, #224	@ 0xe0
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	4a65      	ldr	r2, [pc, #404]	@ (80010fc <HAL_ADC_Init+0x338>)
 8000f68:	4013      	ands	r3, r2
 8000f6a:	0019      	movs	r1, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	430a      	orrs	r2, r1
 8000f74:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	0f9b      	lsrs	r3, r3, #30
 8000f7c:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000f82:	4313      	orrs	r3, r2
 8000f84:	697a      	ldr	r2, [r7, #20]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	223c      	movs	r2, #60	@ 0x3c
 8000f8e:	5c9b      	ldrb	r3, [r3, r2]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d111      	bne.n	8000fb8 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	0f9b      	lsrs	r3, r3, #30
 8000f9a:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000fa0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8000fa6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8000fac:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	691b      	ldr	r3, [r3, #16]
 8000fbe:	4a50      	ldr	r2, [pc, #320]	@ (8001100 <HAL_ADC_Init+0x33c>)
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	0019      	movs	r1, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685a      	ldr	r2, [r3, #4]
 8000fd2:	23c0      	movs	r3, #192	@ 0xc0
 8000fd4:	061b      	lsls	r3, r3, #24
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d018      	beq.n	800100c <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000fde:	2380      	movs	r3, #128	@ 0x80
 8000fe0:	05db      	lsls	r3, r3, #23
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d012      	beq.n	800100c <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000fea:	2380      	movs	r3, #128	@ 0x80
 8000fec:	061b      	lsls	r3, r3, #24
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d00c      	beq.n	800100c <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000ff2:	4b44      	ldr	r3, [pc, #272]	@ (8001104 <HAL_ADC_Init+0x340>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a44      	ldr	r2, [pc, #272]	@ (8001108 <HAL_ADC_Init+0x344>)
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	0019      	movs	r1, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685a      	ldr	r2, [r3, #4]
 8001000:	23f0      	movs	r3, #240	@ 0xf0
 8001002:	039b      	lsls	r3, r3, #14
 8001004:	401a      	ands	r2, r3
 8001006:	4b3f      	ldr	r3, [pc, #252]	@ (8001104 <HAL_ADC_Init+0x340>)
 8001008:	430a      	orrs	r2, r1
 800100a:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6818      	ldr	r0, [r3, #0]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001014:	001a      	movs	r2, r3
 8001016:	2100      	movs	r1, #0
 8001018:	f7ff fdbf 	bl	8000b9a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6818      	ldr	r0, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001024:	4939      	ldr	r1, [pc, #228]	@ (800110c <HAL_ADC_Init+0x348>)
 8001026:	001a      	movs	r2, r3
 8001028:	f7ff fdb7 	bl	8000b9a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	691b      	ldr	r3, [r3, #16]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d109      	bne.n	8001048 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2110      	movs	r1, #16
 8001040:	4249      	negs	r1, r1
 8001042:	430a      	orrs	r2, r1
 8001044:	629a      	str	r2, [r3, #40]	@ 0x28
 8001046:	e018      	b.n	800107a <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	691a      	ldr	r2, [r3, #16]
 800104c:	2380      	movs	r3, #128	@ 0x80
 800104e:	039b      	lsls	r3, r3, #14
 8001050:	429a      	cmp	r2, r3
 8001052:	d112      	bne.n	800107a <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	3b01      	subs	r3, #1
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	221c      	movs	r2, #28
 8001064:	4013      	ands	r3, r2
 8001066:	2210      	movs	r2, #16
 8001068:	4252      	negs	r2, r2
 800106a:	409a      	lsls	r2, r3
 800106c:	0011      	movs	r1, r2
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	430a      	orrs	r2, r1
 8001078:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2100      	movs	r1, #0
 8001080:	0018      	movs	r0, r3
 8001082:	f7ff fda7 	bl	8000bd4 <LL_ADC_GetSamplingTimeCommonChannels>
 8001086:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800108c:	429a      	cmp	r2, r3
 800108e:	d10b      	bne.n	80010a8 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800109a:	2203      	movs	r2, #3
 800109c:	4393      	bics	r3, r2
 800109e:	2201      	movs	r2, #1
 80010a0:	431a      	orrs	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80010a6:	e01c      	b.n	80010e2 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ac:	2212      	movs	r2, #18
 80010ae:	4393      	bics	r3, r2
 80010b0:	2210      	movs	r2, #16
 80010b2:	431a      	orrs	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010bc:	2201      	movs	r2, #1
 80010be:	431a      	orrs	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80010c4:	231f      	movs	r3, #31
 80010c6:	18fb      	adds	r3, r7, r3
 80010c8:	2201      	movs	r2, #1
 80010ca:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80010cc:	e009      	b.n	80010e2 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d2:	2210      	movs	r2, #16
 80010d4:	431a      	orrs	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80010da:	231f      	movs	r3, #31
 80010dc:	18fb      	adds	r3, r7, r3
 80010de:	2201      	movs	r2, #1
 80010e0:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80010e2:	231f      	movs	r3, #31
 80010e4:	18fb      	adds	r3, r7, r3
 80010e6:	781b      	ldrb	r3, [r3, #0]
}
 80010e8:	0018      	movs	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	b008      	add	sp, #32
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000004 	.word	0x20000004
 80010f4:	00030d40 	.word	0x00030d40
 80010f8:	fffffefd 	.word	0xfffffefd
 80010fc:	ffde0201 	.word	0xffde0201
 8001100:	1ffffc02 	.word	0x1ffffc02
 8001104:	40012708 	.word	0x40012708
 8001108:	ffc3ffff 	.word	0xffc3ffff
 800110c:	7fffff04 	.word	0x7fffff04

08001110 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001110:	b5b0      	push	{r4, r5, r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	0018      	movs	r0, r3
 800111e:	f7ff fe3f 	bl	8000da0 <LL_ADC_REG_IsConversionOngoing>
 8001122:	1e03      	subs	r3, r0, #0
 8001124:	d135      	bne.n	8001192 <HAL_ADC_Start+0x82>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2254      	movs	r2, #84	@ 0x54
 800112a:	5c9b      	ldrb	r3, [r3, r2]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d101      	bne.n	8001134 <HAL_ADC_Start+0x24>
 8001130:	2302      	movs	r3, #2
 8001132:	e035      	b.n	80011a0 <HAL_ADC_Start+0x90>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2254      	movs	r2, #84	@ 0x54
 8001138:	2101      	movs	r1, #1
 800113a:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800113c:	250f      	movs	r5, #15
 800113e:	197c      	adds	r4, r7, r5
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	0018      	movs	r0, r3
 8001144:	f000 faa2 	bl	800168c <ADC_Enable>
 8001148:	0003      	movs	r3, r0
 800114a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800114c:	197b      	adds	r3, r7, r5
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d119      	bne.n	8001188 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001158:	4a13      	ldr	r2, [pc, #76]	@ (80011a8 <HAL_ADC_Start+0x98>)
 800115a:	4013      	ands	r3, r2
 800115c:	2280      	movs	r2, #128	@ 0x80
 800115e:	0052      	lsls	r2, r2, #1
 8001160:	431a      	orrs	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	221c      	movs	r2, #28
 8001172:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2254      	movs	r2, #84	@ 0x54
 8001178:	2100      	movs	r1, #0
 800117a:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	0018      	movs	r0, r3
 8001182:	f7ff fdfb 	bl	8000d7c <LL_ADC_REG_StartConversion>
 8001186:	e008      	b.n	800119a <HAL_ADC_Start+0x8a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2254      	movs	r2, #84	@ 0x54
 800118c:	2100      	movs	r1, #0
 800118e:	5499      	strb	r1, [r3, r2]
 8001190:	e003      	b.n	800119a <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001192:	230f      	movs	r3, #15
 8001194:	18fb      	adds	r3, r7, r3
 8001196:	2202      	movs	r2, #2
 8001198:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800119a:	230f      	movs	r3, #15
 800119c:	18fb      	adds	r3, r7, r3
 800119e:	781b      	ldrb	r3, [r3, #0]
}
 80011a0:	0018      	movs	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	b004      	add	sp, #16
 80011a6:	bdb0      	pop	{r4, r5, r7, pc}
 80011a8:	fffff0fe 	.word	0xfffff0fe

080011ac <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	2b08      	cmp	r3, #8
 80011bc:	d102      	bne.n	80011c4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80011be:	2308      	movs	r3, #8
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	e00f      	b.n	80011e4 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	2201      	movs	r2, #1
 80011cc:	4013      	ands	r3, r2
 80011ce:	d007      	beq.n	80011e0 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d4:	2220      	movs	r2, #32
 80011d6:	431a      	orrs	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e06c      	b.n	80012ba <HAL_ADC_PollForConversion+0x10e>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80011e0:	2304      	movs	r3, #4
 80011e2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80011e4:	f7ff fc8a 	bl	8000afc <HAL_GetTick>
 80011e8:	0003      	movs	r3, r0
 80011ea:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80011ec:	e019      	b.n	8001222 <HAL_ADC_PollForConversion+0x76>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	3301      	adds	r3, #1
 80011f2:	d016      	beq.n	8001222 <HAL_ADC_PollForConversion+0x76>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80011f4:	f7ff fc82 	bl	8000afc <HAL_GetTick>
 80011f8:	0002      	movs	r2, r0
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	683a      	ldr	r2, [r7, #0]
 8001200:	429a      	cmp	r2, r3
 8001202:	d302      	bcc.n	800120a <HAL_ADC_PollForConversion+0x5e>
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d10b      	bne.n	8001222 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800120e:	2204      	movs	r2, #4
 8001210:	431a      	orrs	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2254      	movs	r2, #84	@ 0x54
 800121a:	2100      	movs	r1, #0
 800121c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e04b      	b.n	80012ba <HAL_ADC_PollForConversion+0x10e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	68fa      	ldr	r2, [r7, #12]
 800122a:	4013      	ands	r3, r2
 800122c:	d0df      	beq.n	80011ee <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001232:	2280      	movs	r2, #128	@ 0x80
 8001234:	0092      	lsls	r2, r2, #2
 8001236:	431a      	orrs	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	0018      	movs	r0, r3
 8001242:	f7ff fcde 	bl	8000c02 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001246:	1e03      	subs	r3, r0, #0
 8001248:	d02e      	beq.n	80012a8 <HAL_ADC_PollForConversion+0xfc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	7e9b      	ldrb	r3, [r3, #26]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d12a      	bne.n	80012a8 <HAL_ADC_PollForConversion+0xfc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2208      	movs	r2, #8
 800125a:	4013      	ands	r3, r2
 800125c:	2b08      	cmp	r3, #8
 800125e:	d123      	bne.n	80012a8 <HAL_ADC_PollForConversion+0xfc>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	0018      	movs	r0, r3
 8001266:	f7ff fd9b 	bl	8000da0 <LL_ADC_REG_IsConversionOngoing>
 800126a:	1e03      	subs	r3, r0, #0
 800126c:	d110      	bne.n	8001290 <HAL_ADC_PollForConversion+0xe4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	210c      	movs	r1, #12
 800127a:	438a      	bics	r2, r1
 800127c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001282:	4a10      	ldr	r2, [pc, #64]	@ (80012c4 <HAL_ADC_PollForConversion+0x118>)
 8001284:	4013      	ands	r3, r2
 8001286:	2201      	movs	r2, #1
 8001288:	431a      	orrs	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	659a      	str	r2, [r3, #88]	@ 0x58
 800128e:	e00b      	b.n	80012a8 <HAL_ADC_PollForConversion+0xfc>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001294:	2220      	movs	r2, #32
 8001296:	431a      	orrs	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012a0:	2201      	movs	r2, #1
 80012a2:	431a      	orrs	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	7e1b      	ldrb	r3, [r3, #24]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d103      	bne.n	80012b8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	220c      	movs	r2, #12
 80012b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	0018      	movs	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	b004      	add	sp, #16
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	46c0      	nop			@ (mov r8, r8)
 80012c4:	fffffefe 	.word	0xfffffefe

080012c8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80012d6:	0018      	movs	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	b002      	add	sp, #8
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012ea:	2317      	movs	r3, #23
 80012ec:	18fb      	adds	r3, r7, r3
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2254      	movs	r2, #84	@ 0x54
 80012fa:	5c9b      	ldrb	r3, [r3, r2]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d101      	bne.n	8001304 <HAL_ADC_ConfigChannel+0x24>
 8001300:	2302      	movs	r3, #2
 8001302:	e1be      	b.n	8001682 <HAL_ADC_ConfigChannel+0x3a2>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2254      	movs	r2, #84	@ 0x54
 8001308:	2101      	movs	r1, #1
 800130a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	0018      	movs	r0, r3
 8001312:	f7ff fd45 	bl	8000da0 <LL_ADC_REG_IsConversionOngoing>
 8001316:	1e03      	subs	r3, r0, #0
 8001318:	d000      	beq.n	800131c <HAL_ADC_ConfigChannel+0x3c>
 800131a:	e1a1      	b.n	8001660 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b02      	cmp	r3, #2
 8001322:	d100      	bne.n	8001326 <HAL_ADC_ConfigChannel+0x46>
 8001324:	e152      	b.n	80015cc <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	691a      	ldr	r2, [r3, #16]
 800132a:	2380      	movs	r3, #128	@ 0x80
 800132c:	061b      	lsls	r3, r3, #24
 800132e:	429a      	cmp	r2, r3
 8001330:	d004      	beq.n	800133c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001336:	4ac2      	ldr	r2, [pc, #776]	@ (8001640 <HAL_ADC_ConfigChannel+0x360>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d108      	bne.n	800134e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	0019      	movs	r1, r3
 8001346:	0010      	movs	r0, r2
 8001348:	f7ff fc8c 	bl	8000c64 <LL_ADC_REG_SetSequencerChAdd>
 800134c:	e0ed      	b.n	800152a <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	211f      	movs	r1, #31
 8001358:	400b      	ands	r3, r1
 800135a:	210f      	movs	r1, #15
 800135c:	4099      	lsls	r1, r3
 800135e:	000b      	movs	r3, r1
 8001360:	43db      	mvns	r3, r3
 8001362:	4013      	ands	r3, r2
 8001364:	0019      	movs	r1, r3
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	025b      	lsls	r3, r3, #9
 800136c:	0a5b      	lsrs	r3, r3, #9
 800136e:	d105      	bne.n	800137c <HAL_ADC_ConfigChannel+0x9c>
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	0e9b      	lsrs	r3, r3, #26
 8001376:	221f      	movs	r2, #31
 8001378:	4013      	ands	r3, r2
 800137a:	e0bc      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x216>
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2201      	movs	r2, #1
 8001382:	4013      	ands	r3, r2
 8001384:	d000      	beq.n	8001388 <HAL_ADC_ConfigChannel+0xa8>
 8001386:	e0b5      	b.n	80014f4 <HAL_ADC_ConfigChannel+0x214>
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2202      	movs	r2, #2
 800138e:	4013      	ands	r3, r2
 8001390:	d000      	beq.n	8001394 <HAL_ADC_ConfigChannel+0xb4>
 8001392:	e0ad      	b.n	80014f0 <HAL_ADC_ConfigChannel+0x210>
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2204      	movs	r2, #4
 800139a:	4013      	ands	r3, r2
 800139c:	d000      	beq.n	80013a0 <HAL_ADC_ConfigChannel+0xc0>
 800139e:	e0a5      	b.n	80014ec <HAL_ADC_ConfigChannel+0x20c>
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2208      	movs	r2, #8
 80013a6:	4013      	ands	r3, r2
 80013a8:	d000      	beq.n	80013ac <HAL_ADC_ConfigChannel+0xcc>
 80013aa:	e09d      	b.n	80014e8 <HAL_ADC_ConfigChannel+0x208>
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2210      	movs	r2, #16
 80013b2:	4013      	ands	r3, r2
 80013b4:	d000      	beq.n	80013b8 <HAL_ADC_ConfigChannel+0xd8>
 80013b6:	e095      	b.n	80014e4 <HAL_ADC_ConfigChannel+0x204>
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2220      	movs	r2, #32
 80013be:	4013      	ands	r3, r2
 80013c0:	d000      	beq.n	80013c4 <HAL_ADC_ConfigChannel+0xe4>
 80013c2:	e08d      	b.n	80014e0 <HAL_ADC_ConfigChannel+0x200>
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2240      	movs	r2, #64	@ 0x40
 80013ca:	4013      	ands	r3, r2
 80013cc:	d000      	beq.n	80013d0 <HAL_ADC_ConfigChannel+0xf0>
 80013ce:	e085      	b.n	80014dc <HAL_ADC_ConfigChannel+0x1fc>
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2280      	movs	r2, #128	@ 0x80
 80013d6:	4013      	ands	r3, r2
 80013d8:	d000      	beq.n	80013dc <HAL_ADC_ConfigChannel+0xfc>
 80013da:	e07d      	b.n	80014d8 <HAL_ADC_ConfigChannel+0x1f8>
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	2380      	movs	r3, #128	@ 0x80
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	4013      	ands	r3, r2
 80013e6:	d000      	beq.n	80013ea <HAL_ADC_ConfigChannel+0x10a>
 80013e8:	e074      	b.n	80014d4 <HAL_ADC_ConfigChannel+0x1f4>
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	2380      	movs	r3, #128	@ 0x80
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4013      	ands	r3, r2
 80013f4:	d000      	beq.n	80013f8 <HAL_ADC_ConfigChannel+0x118>
 80013f6:	e06b      	b.n	80014d0 <HAL_ADC_ConfigChannel+0x1f0>
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	2380      	movs	r3, #128	@ 0x80
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	4013      	ands	r3, r2
 8001402:	d000      	beq.n	8001406 <HAL_ADC_ConfigChannel+0x126>
 8001404:	e062      	b.n	80014cc <HAL_ADC_ConfigChannel+0x1ec>
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	2380      	movs	r3, #128	@ 0x80
 800140c:	011b      	lsls	r3, r3, #4
 800140e:	4013      	ands	r3, r2
 8001410:	d000      	beq.n	8001414 <HAL_ADC_ConfigChannel+0x134>
 8001412:	e059      	b.n	80014c8 <HAL_ADC_ConfigChannel+0x1e8>
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	2380      	movs	r3, #128	@ 0x80
 800141a:	015b      	lsls	r3, r3, #5
 800141c:	4013      	ands	r3, r2
 800141e:	d151      	bne.n	80014c4 <HAL_ADC_ConfigChannel+0x1e4>
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	2380      	movs	r3, #128	@ 0x80
 8001426:	019b      	lsls	r3, r3, #6
 8001428:	4013      	ands	r3, r2
 800142a:	d149      	bne.n	80014c0 <HAL_ADC_ConfigChannel+0x1e0>
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	2380      	movs	r3, #128	@ 0x80
 8001432:	01db      	lsls	r3, r3, #7
 8001434:	4013      	ands	r3, r2
 8001436:	d141      	bne.n	80014bc <HAL_ADC_ConfigChannel+0x1dc>
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	2380      	movs	r3, #128	@ 0x80
 800143e:	021b      	lsls	r3, r3, #8
 8001440:	4013      	ands	r3, r2
 8001442:	d139      	bne.n	80014b8 <HAL_ADC_ConfigChannel+0x1d8>
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2380      	movs	r3, #128	@ 0x80
 800144a:	025b      	lsls	r3, r3, #9
 800144c:	4013      	ands	r3, r2
 800144e:	d131      	bne.n	80014b4 <HAL_ADC_ConfigChannel+0x1d4>
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	2380      	movs	r3, #128	@ 0x80
 8001456:	029b      	lsls	r3, r3, #10
 8001458:	4013      	ands	r3, r2
 800145a:	d129      	bne.n	80014b0 <HAL_ADC_ConfigChannel+0x1d0>
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	2380      	movs	r3, #128	@ 0x80
 8001462:	02db      	lsls	r3, r3, #11
 8001464:	4013      	ands	r3, r2
 8001466:	d121      	bne.n	80014ac <HAL_ADC_ConfigChannel+0x1cc>
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	2380      	movs	r3, #128	@ 0x80
 800146e:	031b      	lsls	r3, r3, #12
 8001470:	4013      	ands	r3, r2
 8001472:	d119      	bne.n	80014a8 <HAL_ADC_ConfigChannel+0x1c8>
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	2380      	movs	r3, #128	@ 0x80
 800147a:	035b      	lsls	r3, r3, #13
 800147c:	4013      	ands	r3, r2
 800147e:	d111      	bne.n	80014a4 <HAL_ADC_ConfigChannel+0x1c4>
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	2380      	movs	r3, #128	@ 0x80
 8001486:	039b      	lsls	r3, r3, #14
 8001488:	4013      	ands	r3, r2
 800148a:	d109      	bne.n	80014a0 <HAL_ADC_ConfigChannel+0x1c0>
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	2380      	movs	r3, #128	@ 0x80
 8001492:	03db      	lsls	r3, r3, #15
 8001494:	4013      	ands	r3, r2
 8001496:	d001      	beq.n	800149c <HAL_ADC_ConfigChannel+0x1bc>
 8001498:	2316      	movs	r3, #22
 800149a:	e02c      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x216>
 800149c:	2300      	movs	r3, #0
 800149e:	e02a      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x216>
 80014a0:	2315      	movs	r3, #21
 80014a2:	e028      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x216>
 80014a4:	2314      	movs	r3, #20
 80014a6:	e026      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x216>
 80014a8:	2313      	movs	r3, #19
 80014aa:	e024      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x216>
 80014ac:	2312      	movs	r3, #18
 80014ae:	e022      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x216>
 80014b0:	2311      	movs	r3, #17
 80014b2:	e020      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x216>
 80014b4:	2310      	movs	r3, #16
 80014b6:	e01e      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x216>
 80014b8:	230f      	movs	r3, #15
 80014ba:	e01c      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x216>
 80014bc:	230e      	movs	r3, #14
 80014be:	e01a      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x216>
 80014c0:	230d      	movs	r3, #13
 80014c2:	e018      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x216>
 80014c4:	230c      	movs	r3, #12
 80014c6:	e016      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x216>
 80014c8:	230b      	movs	r3, #11
 80014ca:	e014      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x216>
 80014cc:	230a      	movs	r3, #10
 80014ce:	e012      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x216>
 80014d0:	2309      	movs	r3, #9
 80014d2:	e010      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x216>
 80014d4:	2308      	movs	r3, #8
 80014d6:	e00e      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x216>
 80014d8:	2307      	movs	r3, #7
 80014da:	e00c      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x216>
 80014dc:	2306      	movs	r3, #6
 80014de:	e00a      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x216>
 80014e0:	2305      	movs	r3, #5
 80014e2:	e008      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x216>
 80014e4:	2304      	movs	r3, #4
 80014e6:	e006      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x216>
 80014e8:	2303      	movs	r3, #3
 80014ea:	e004      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x216>
 80014ec:	2302      	movs	r3, #2
 80014ee:	e002      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x216>
 80014f0:	2301      	movs	r3, #1
 80014f2:	e000      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x216>
 80014f4:	2300      	movs	r3, #0
 80014f6:	683a      	ldr	r2, [r7, #0]
 80014f8:	6852      	ldr	r2, [r2, #4]
 80014fa:	201f      	movs	r0, #31
 80014fc:	4002      	ands	r2, r0
 80014fe:	4093      	lsls	r3, r2
 8001500:	000a      	movs	r2, r1
 8001502:	431a      	orrs	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	089b      	lsrs	r3, r3, #2
 800150e:	1c5a      	adds	r2, r3, #1
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	69db      	ldr	r3, [r3, #28]
 8001514:	429a      	cmp	r2, r3
 8001516:	d808      	bhi.n	800152a <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6818      	ldr	r0, [r3, #0]
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	6859      	ldr	r1, [r3, #4]
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	001a      	movs	r2, r3
 8001526:	f7ff fb7d 	bl	8000c24 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6818      	ldr	r0, [r3, #0]
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	6819      	ldr	r1, [r3, #0]
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	001a      	movs	r2, r3
 8001538:	f7ff fbb8 	bl	8000cac <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	db00      	blt.n	8001546 <HAL_ADC_ConfigChannel+0x266>
 8001544:	e096      	b.n	8001674 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001546:	4b3f      	ldr	r3, [pc, #252]	@ (8001644 <HAL_ADC_ConfigChannel+0x364>)
 8001548:	0018      	movs	r0, r3
 800154a:	f7ff fb19 	bl	8000b80 <LL_ADC_GetCommonPathInternalCh>
 800154e:	0003      	movs	r3, r0
 8001550:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a3c      	ldr	r2, [pc, #240]	@ (8001648 <HAL_ADC_ConfigChannel+0x368>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d123      	bne.n	80015a4 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	2380      	movs	r3, #128	@ 0x80
 8001560:	041b      	lsls	r3, r3, #16
 8001562:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001564:	d11e      	bne.n	80015a4 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	2280      	movs	r2, #128	@ 0x80
 800156a:	0412      	lsls	r2, r2, #16
 800156c:	4313      	orrs	r3, r2
 800156e:	4a35      	ldr	r2, [pc, #212]	@ (8001644 <HAL_ADC_ConfigChannel+0x364>)
 8001570:	0019      	movs	r1, r3
 8001572:	0010      	movs	r0, r2
 8001574:	f7ff faf0 	bl	8000b58 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001578:	4b34      	ldr	r3, [pc, #208]	@ (800164c <HAL_ADC_ConfigChannel+0x36c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4934      	ldr	r1, [pc, #208]	@ (8001650 <HAL_ADC_ConfigChannel+0x370>)
 800157e:	0018      	movs	r0, r3
 8001580:	f7fe fdc2 	bl	8000108 <__udivsi3>
 8001584:	0003      	movs	r3, r0
 8001586:	001a      	movs	r2, r3
 8001588:	0013      	movs	r3, r2
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	189b      	adds	r3, r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	3301      	adds	r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001594:	e002      	b.n	800159c <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	3b01      	subs	r3, #1
 800159a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1f9      	bne.n	8001596 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80015a2:	e067      	b.n	8001674 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a2a      	ldr	r2, [pc, #168]	@ (8001654 <HAL_ADC_ConfigChannel+0x374>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d162      	bne.n	8001674 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	2380      	movs	r3, #128	@ 0x80
 80015b2:	03db      	lsls	r3, r3, #15
 80015b4:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80015b6:	d15d      	bne.n	8001674 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	2280      	movs	r2, #128	@ 0x80
 80015bc:	03d2      	lsls	r2, r2, #15
 80015be:	4313      	orrs	r3, r2
 80015c0:	4a20      	ldr	r2, [pc, #128]	@ (8001644 <HAL_ADC_ConfigChannel+0x364>)
 80015c2:	0019      	movs	r1, r3
 80015c4:	0010      	movs	r0, r2
 80015c6:	f7ff fac7 	bl	8000b58 <LL_ADC_SetCommonPathInternalCh>
 80015ca:	e053      	b.n	8001674 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691a      	ldr	r2, [r3, #16]
 80015d0:	2380      	movs	r3, #128	@ 0x80
 80015d2:	061b      	lsls	r3, r3, #24
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d004      	beq.n	80015e2 <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80015dc:	4a18      	ldr	r2, [pc, #96]	@ (8001640 <HAL_ADC_ConfigChannel+0x360>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d107      	bne.n	80015f2 <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	0019      	movs	r1, r3
 80015ec:	0010      	movs	r0, r2
 80015ee:	f7ff fb4a 	bl	8000c86 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	da3c      	bge.n	8001674 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015fa:	4b12      	ldr	r3, [pc, #72]	@ (8001644 <HAL_ADC_ConfigChannel+0x364>)
 80015fc:	0018      	movs	r0, r3
 80015fe:	f7ff fabf 	bl	8000b80 <LL_ADC_GetCommonPathInternalCh>
 8001602:	0003      	movs	r3, r0
 8001604:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a0f      	ldr	r2, [pc, #60]	@ (8001648 <HAL_ADC_ConfigChannel+0x368>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d108      	bne.n	8001622 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	4a11      	ldr	r2, [pc, #68]	@ (8001658 <HAL_ADC_ConfigChannel+0x378>)
 8001614:	4013      	ands	r3, r2
 8001616:	4a0b      	ldr	r2, [pc, #44]	@ (8001644 <HAL_ADC_ConfigChannel+0x364>)
 8001618:	0019      	movs	r1, r3
 800161a:	0010      	movs	r0, r2
 800161c:	f7ff fa9c 	bl	8000b58 <LL_ADC_SetCommonPathInternalCh>
 8001620:	e028      	b.n	8001674 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a0b      	ldr	r2, [pc, #44]	@ (8001654 <HAL_ADC_ConfigChannel+0x374>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d123      	bne.n	8001674 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	4a0b      	ldr	r2, [pc, #44]	@ (800165c <HAL_ADC_ConfigChannel+0x37c>)
 8001630:	4013      	ands	r3, r2
 8001632:	4a04      	ldr	r2, [pc, #16]	@ (8001644 <HAL_ADC_ConfigChannel+0x364>)
 8001634:	0019      	movs	r1, r3
 8001636:	0010      	movs	r0, r2
 8001638:	f7ff fa8e 	bl	8000b58 <LL_ADC_SetCommonPathInternalCh>
 800163c:	e01a      	b.n	8001674 <HAL_ADC_ConfigChannel+0x394>
 800163e:	46c0      	nop			@ (mov r8, r8)
 8001640:	80000004 	.word	0x80000004
 8001644:	40012708 	.word	0x40012708
 8001648:	a4000200 	.word	0xa4000200
 800164c:	20000004 	.word	0x20000004
 8001650:	00030d40 	.word	0x00030d40
 8001654:	a8000400 	.word	0xa8000400
 8001658:	ff7fffff 	.word	0xff7fffff
 800165c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001664:	2220      	movs	r2, #32
 8001666:	431a      	orrs	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800166c:	2317      	movs	r3, #23
 800166e:	18fb      	adds	r3, r7, r3
 8001670:	2201      	movs	r2, #1
 8001672:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2254      	movs	r2, #84	@ 0x54
 8001678:	2100      	movs	r1, #0
 800167a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 800167c:	2317      	movs	r3, #23
 800167e:	18fb      	adds	r3, r7, r3
 8001680:	781b      	ldrb	r3, [r3, #0]
}
 8001682:	0018      	movs	r0, r3
 8001684:	46bd      	mov	sp, r7
 8001686:	b006      	add	sp, #24
 8001688:	bd80      	pop	{r7, pc}
 800168a:	46c0      	nop			@ (mov r8, r8)

0800168c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001694:	2300      	movs	r3, #0
 8001696:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	0018      	movs	r0, r3
 800169e:	f7ff fb5b 	bl	8000d58 <LL_ADC_IsEnabled>
 80016a2:	1e03      	subs	r3, r0, #0
 80016a4:	d162      	bne.n	800176c <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	4a32      	ldr	r2, [pc, #200]	@ (8001778 <ADC_Enable+0xec>)
 80016ae:	4013      	ands	r3, r2
 80016b0:	d00d      	beq.n	80016ce <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b6:	2210      	movs	r2, #16
 80016b8:	431a      	orrs	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016c2:	2201      	movs	r2, #1
 80016c4:	431a      	orrs	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e04f      	b.n	800176e <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	0018      	movs	r0, r3
 80016d4:	f7ff fb2e 	bl	8000d34 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80016d8:	4b28      	ldr	r3, [pc, #160]	@ (800177c <ADC_Enable+0xf0>)
 80016da:	0018      	movs	r0, r3
 80016dc:	f7ff fa50 	bl	8000b80 <LL_ADC_GetCommonPathInternalCh>
 80016e0:	0002      	movs	r2, r0
 80016e2:	2380      	movs	r3, #128	@ 0x80
 80016e4:	041b      	lsls	r3, r3, #16
 80016e6:	4013      	ands	r3, r2
 80016e8:	d00f      	beq.n	800170a <ADC_Enable+0x7e>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016ea:	4b25      	ldr	r3, [pc, #148]	@ (8001780 <ADC_Enable+0xf4>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4925      	ldr	r1, [pc, #148]	@ (8001784 <ADC_Enable+0xf8>)
 80016f0:	0018      	movs	r0, r3
 80016f2:	f7fe fd09 	bl	8000108 <__udivsi3>
 80016f6:	0003      	movs	r3, r0
 80016f8:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80016fa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80016fc:	e002      	b.n	8001704 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	3b01      	subs	r3, #1
 8001702:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f9      	bne.n	80016fe <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	7e5b      	ldrb	r3, [r3, #25]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d02c      	beq.n	800176c <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001712:	f7ff f9f3 	bl	8000afc <HAL_GetTick>
 8001716:	0003      	movs	r3, r0
 8001718:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800171a:	e020      	b.n	800175e <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	0018      	movs	r0, r3
 8001722:	f7ff fb19 	bl	8000d58 <LL_ADC_IsEnabled>
 8001726:	1e03      	subs	r3, r0, #0
 8001728:	d104      	bne.n	8001734 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	0018      	movs	r0, r3
 8001730:	f7ff fb00 	bl	8000d34 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001734:	f7ff f9e2 	bl	8000afc <HAL_GetTick>
 8001738:	0002      	movs	r2, r0
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d90d      	bls.n	800175e <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001746:	2210      	movs	r2, #16
 8001748:	431a      	orrs	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001752:	2201      	movs	r2, #1
 8001754:	431a      	orrs	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e007      	b.n	800176e <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2201      	movs	r2, #1
 8001766:	4013      	ands	r3, r2
 8001768:	2b01      	cmp	r3, #1
 800176a:	d1d7      	bne.n	800171c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	0018      	movs	r0, r3
 8001770:	46bd      	mov	sp, r7
 8001772:	b004      	add	sp, #16
 8001774:	bd80      	pop	{r7, pc}
 8001776:	46c0      	nop			@ (mov r8, r8)
 8001778:	80000017 	.word	0x80000017
 800177c:	40012708 	.word	0x40012708
 8001780:	20000004 	.word	0x20000004
 8001784:	00030d40 	.word	0x00030d40

08001788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	0002      	movs	r2, r0
 8001790:	1dfb      	adds	r3, r7, #7
 8001792:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001794:	1dfb      	adds	r3, r7, #7
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b7f      	cmp	r3, #127	@ 0x7f
 800179a:	d809      	bhi.n	80017b0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800179c:	1dfb      	adds	r3, r7, #7
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	001a      	movs	r2, r3
 80017a2:	231f      	movs	r3, #31
 80017a4:	401a      	ands	r2, r3
 80017a6:	4b04      	ldr	r3, [pc, #16]	@ (80017b8 <__NVIC_EnableIRQ+0x30>)
 80017a8:	2101      	movs	r1, #1
 80017aa:	4091      	lsls	r1, r2
 80017ac:	000a      	movs	r2, r1
 80017ae:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80017b0:	46c0      	nop			@ (mov r8, r8)
 80017b2:	46bd      	mov	sp, r7
 80017b4:	b002      	add	sp, #8
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	e000e100 	.word	0xe000e100

080017bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017bc:	b590      	push	{r4, r7, lr}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	0002      	movs	r2, r0
 80017c4:	6039      	str	r1, [r7, #0]
 80017c6:	1dfb      	adds	r3, r7, #7
 80017c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017ca:	1dfb      	adds	r3, r7, #7
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80017d0:	d828      	bhi.n	8001824 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017d2:	4a2f      	ldr	r2, [pc, #188]	@ (8001890 <__NVIC_SetPriority+0xd4>)
 80017d4:	1dfb      	adds	r3, r7, #7
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	b25b      	sxtb	r3, r3
 80017da:	089b      	lsrs	r3, r3, #2
 80017dc:	33c0      	adds	r3, #192	@ 0xc0
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	589b      	ldr	r3, [r3, r2]
 80017e2:	1dfa      	adds	r2, r7, #7
 80017e4:	7812      	ldrb	r2, [r2, #0]
 80017e6:	0011      	movs	r1, r2
 80017e8:	2203      	movs	r2, #3
 80017ea:	400a      	ands	r2, r1
 80017ec:	00d2      	lsls	r2, r2, #3
 80017ee:	21ff      	movs	r1, #255	@ 0xff
 80017f0:	4091      	lsls	r1, r2
 80017f2:	000a      	movs	r2, r1
 80017f4:	43d2      	mvns	r2, r2
 80017f6:	401a      	ands	r2, r3
 80017f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	019b      	lsls	r3, r3, #6
 80017fe:	22ff      	movs	r2, #255	@ 0xff
 8001800:	401a      	ands	r2, r3
 8001802:	1dfb      	adds	r3, r7, #7
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	0018      	movs	r0, r3
 8001808:	2303      	movs	r3, #3
 800180a:	4003      	ands	r3, r0
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001810:	481f      	ldr	r0, [pc, #124]	@ (8001890 <__NVIC_SetPriority+0xd4>)
 8001812:	1dfb      	adds	r3, r7, #7
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	b25b      	sxtb	r3, r3
 8001818:	089b      	lsrs	r3, r3, #2
 800181a:	430a      	orrs	r2, r1
 800181c:	33c0      	adds	r3, #192	@ 0xc0
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001822:	e031      	b.n	8001888 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001824:	4a1b      	ldr	r2, [pc, #108]	@ (8001894 <__NVIC_SetPriority+0xd8>)
 8001826:	1dfb      	adds	r3, r7, #7
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	0019      	movs	r1, r3
 800182c:	230f      	movs	r3, #15
 800182e:	400b      	ands	r3, r1
 8001830:	3b08      	subs	r3, #8
 8001832:	089b      	lsrs	r3, r3, #2
 8001834:	3306      	adds	r3, #6
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	18d3      	adds	r3, r2, r3
 800183a:	3304      	adds	r3, #4
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	1dfa      	adds	r2, r7, #7
 8001840:	7812      	ldrb	r2, [r2, #0]
 8001842:	0011      	movs	r1, r2
 8001844:	2203      	movs	r2, #3
 8001846:	400a      	ands	r2, r1
 8001848:	00d2      	lsls	r2, r2, #3
 800184a:	21ff      	movs	r1, #255	@ 0xff
 800184c:	4091      	lsls	r1, r2
 800184e:	000a      	movs	r2, r1
 8001850:	43d2      	mvns	r2, r2
 8001852:	401a      	ands	r2, r3
 8001854:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	019b      	lsls	r3, r3, #6
 800185a:	22ff      	movs	r2, #255	@ 0xff
 800185c:	401a      	ands	r2, r3
 800185e:	1dfb      	adds	r3, r7, #7
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	0018      	movs	r0, r3
 8001864:	2303      	movs	r3, #3
 8001866:	4003      	ands	r3, r0
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800186c:	4809      	ldr	r0, [pc, #36]	@ (8001894 <__NVIC_SetPriority+0xd8>)
 800186e:	1dfb      	adds	r3, r7, #7
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	001c      	movs	r4, r3
 8001874:	230f      	movs	r3, #15
 8001876:	4023      	ands	r3, r4
 8001878:	3b08      	subs	r3, #8
 800187a:	089b      	lsrs	r3, r3, #2
 800187c:	430a      	orrs	r2, r1
 800187e:	3306      	adds	r3, #6
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	18c3      	adds	r3, r0, r3
 8001884:	3304      	adds	r3, #4
 8001886:	601a      	str	r2, [r3, #0]
}
 8001888:	46c0      	nop			@ (mov r8, r8)
 800188a:	46bd      	mov	sp, r7
 800188c:	b003      	add	sp, #12
 800188e:	bd90      	pop	{r4, r7, pc}
 8001890:	e000e100 	.word	0xe000e100
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	1e5a      	subs	r2, r3, #1
 80018a4:	2380      	movs	r3, #128	@ 0x80
 80018a6:	045b      	lsls	r3, r3, #17
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d301      	bcc.n	80018b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ac:	2301      	movs	r3, #1
 80018ae:	e010      	b.n	80018d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018b0:	4b0a      	ldr	r3, [pc, #40]	@ (80018dc <SysTick_Config+0x44>)
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	3a01      	subs	r2, #1
 80018b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018b8:	2301      	movs	r3, #1
 80018ba:	425b      	negs	r3, r3
 80018bc:	2103      	movs	r1, #3
 80018be:	0018      	movs	r0, r3
 80018c0:	f7ff ff7c 	bl	80017bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c4:	4b05      	ldr	r3, [pc, #20]	@ (80018dc <SysTick_Config+0x44>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ca:	4b04      	ldr	r3, [pc, #16]	@ (80018dc <SysTick_Config+0x44>)
 80018cc:	2207      	movs	r2, #7
 80018ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	0018      	movs	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	b002      	add	sp, #8
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	46c0      	nop			@ (mov r8, r8)
 80018dc:	e000e010 	.word	0xe000e010

080018e0 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
 80018ea:	210f      	movs	r1, #15
 80018ec:	187b      	adds	r3, r7, r1
 80018ee:	1c02      	adds	r2, r0, #0
 80018f0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	187b      	adds	r3, r7, r1
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	b25b      	sxtb	r3, r3
 80018fa:	0011      	movs	r1, r2
 80018fc:	0018      	movs	r0, r3
 80018fe:	f7ff ff5d 	bl	80017bc <__NVIC_SetPriority>
}
 8001902:	46c0      	nop			@ (mov r8, r8)
 8001904:	46bd      	mov	sp, r7
 8001906:	b004      	add	sp, #16
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b082      	sub	sp, #8
 800190e:	af00      	add	r7, sp, #0
 8001910:	0002      	movs	r2, r0
 8001912:	1dfb      	adds	r3, r7, #7
 8001914:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001916:	1dfb      	adds	r3, r7, #7
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	b25b      	sxtb	r3, r3
 800191c:	0018      	movs	r0, r3
 800191e:	f7ff ff33 	bl	8001788 <__NVIC_EnableIRQ>
}
 8001922:	46c0      	nop			@ (mov r8, r8)
 8001924:	46bd      	mov	sp, r7
 8001926:	b002      	add	sp, #8
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b082      	sub	sp, #8
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	0018      	movs	r0, r3
 8001936:	f7ff ffaf 	bl	8001898 <SysTick_Config>
 800193a:	0003      	movs	r3, r0
}
 800193c:	0018      	movs	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	b002      	add	sp, #8
 8001942:	bd80      	pop	{r7, pc}

08001944 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	607a      	str	r2, [r7, #4]
 800194e:	200b      	movs	r0, #11
 8001950:	183b      	adds	r3, r7, r0
 8001952:	1c0a      	adds	r2, r1, #0
 8001954:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001956:	2317      	movs	r3, #23
 8001958:	18fb      	adds	r3, r7, r3
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]

  switch (CallbackID)
 800195e:	183b      	adds	r3, r7, r0
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b02      	cmp	r3, #2
 8001964:	d010      	beq.n	8001988 <HAL_EXTI_RegisterCallback+0x44>
 8001966:	dc13      	bgt.n	8001990 <HAL_EXTI_RegisterCallback+0x4c>
 8001968:	2b00      	cmp	r3, #0
 800196a:	d002      	beq.n	8001972 <HAL_EXTI_RegisterCallback+0x2e>
 800196c:	2b01      	cmp	r3, #1
 800196e:	d007      	beq.n	8001980 <HAL_EXTI_RegisterCallback+0x3c>
 8001970:	e00e      	b.n	8001990 <HAL_EXTI_RegisterCallback+0x4c>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	609a      	str	r2, [r3, #8]
      break;
 800197e:	e00c      	b.n	800199a <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	605a      	str	r2, [r3, #4]
      break;
 8001986:	e008      	b.n	800199a <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	609a      	str	r2, [r3, #8]
      break;
 800198e:	e004      	b.n	800199a <HAL_EXTI_RegisterCallback+0x56>

    default:
      status = HAL_ERROR;
 8001990:	2317      	movs	r3, #23
 8001992:	18fb      	adds	r3, r7, r3
 8001994:	2201      	movs	r2, #1
 8001996:	701a      	strb	r2, [r3, #0]
      break;
 8001998:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
 800199a:	2317      	movs	r3, #23
 800199c:	18fb      	adds	r3, r7, r3
 800199e:	781b      	ldrb	r3, [r3, #0]
}
 80019a0:	0018      	movs	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	b006      	add	sp, #24
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e003      	b.n	80019c4 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80019c2:	2300      	movs	r3, #0
  }
}
 80019c4:	0018      	movs	r0, r3
 80019c6:	46bd      	mov	sp, r7
 80019c8:	b002      	add	sp, #8
 80019ca:	bd80      	pop	{r7, pc}

080019cc <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	0c1b      	lsrs	r3, r3, #16
 80019da:	2201      	movs	r2, #1
 80019dc:	4013      	ands	r3, r2
 80019de:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	221f      	movs	r2, #31
 80019e6:	4013      	ands	r3, r2
 80019e8:	2201      	movs	r2, #1
 80019ea:	409a      	lsls	r2, r3
 80019ec:	0013      	movs	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	015b      	lsls	r3, r3, #5
 80019f4:	4a18      	ldr	r2, [pc, #96]	@ (8001a58 <HAL_EXTI_IRQHandler+0x8c>)
 80019f6:	4694      	mov	ip, r2
 80019f8:	4463      	add	r3, ip
 80019fa:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	4013      	ands	r3, r2
 8001a04:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d009      	beq.n	8001a20 <HAL_EXTI_IRQHandler+0x54>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d002      	beq.n	8001a20 <HAL_EXTI_IRQHandler+0x54>
    {
      hexti->RisingCallback();
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	015b      	lsls	r3, r3, #5
 8001a24:	4a0d      	ldr	r2, [pc, #52]	@ (8001a5c <HAL_EXTI_IRQHandler+0x90>)
 8001a26:	4694      	mov	ip, r2
 8001a28:	4463      	add	r3, ip
 8001a2a:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	4013      	ands	r3, r2
 8001a34:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d009      	beq.n	8001a50 <HAL_EXTI_IRQHandler+0x84>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d002      	beq.n	8001a50 <HAL_EXTI_IRQHandler+0x84>
    {
      hexti->FallingCallback();
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	4798      	blx	r3
    }
  }
}
 8001a50:	46c0      	nop			@ (mov r8, r8)
 8001a52:	46bd      	mov	sp, r7
 8001a54:	b006      	add	sp, #24
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	4002180c 	.word	0x4002180c
 8001a5c:	40021810 	.word	0x40021810

08001a60 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001a6e:	e153      	b.n	8001d18 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2101      	movs	r1, #1
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4091      	lsls	r1, r2
 8001a7a:	000a      	movs	r2, r1
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d100      	bne.n	8001a88 <HAL_GPIO_Init+0x28>
 8001a86:	e144      	b.n	8001d12 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d003      	beq.n	8001a98 <HAL_GPIO_Init+0x38>
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b12      	cmp	r3, #18
 8001a96:	d125      	bne.n	8001ae4 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	08da      	lsrs	r2, r3, #3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3208      	adds	r2, #8
 8001aa0:	0092      	lsls	r2, r2, #2
 8001aa2:	58d3      	ldr	r3, [r2, r3]
 8001aa4:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	2207      	movs	r2, #7
 8001aaa:	4013      	ands	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	220f      	movs	r2, #15
 8001ab0:	409a      	lsls	r2, r3
 8001ab2:	0013      	movs	r3, r2
 8001ab4:	43da      	mvns	r2, r3
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	220f      	movs	r2, #15
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	2107      	movs	r1, #7
 8001ac8:	400b      	ands	r3, r1
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	409a      	lsls	r2, r3
 8001ace:	0013      	movs	r3, r2
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	08da      	lsrs	r2, r3, #3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3208      	adds	r2, #8
 8001ade:	0092      	lsls	r2, r2, #2
 8001ae0:	6979      	ldr	r1, [r7, #20]
 8001ae2:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	2203      	movs	r2, #3
 8001af0:	409a      	lsls	r2, r3
 8001af2:	0013      	movs	r3, r2
 8001af4:	43da      	mvns	r2, r3
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	4013      	ands	r3, r2
 8001afa:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2203      	movs	r2, #3
 8001b02:	401a      	ands	r2, r3
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	409a      	lsls	r2, r3
 8001b0a:	0013      	movs	r3, r2
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d00b      	beq.n	8001b38 <HAL_GPIO_Init+0xd8>
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d007      	beq.n	8001b38 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b2c:	2b11      	cmp	r3, #17
 8001b2e:	d003      	beq.n	8001b38 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b12      	cmp	r3, #18
 8001b36:	d130      	bne.n	8001b9a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	2203      	movs	r2, #3
 8001b44:	409a      	lsls	r2, r3
 8001b46:	0013      	movs	r3, r2
 8001b48:	43da      	mvns	r2, r3
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	68da      	ldr	r2, [r3, #12]
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	409a      	lsls	r2, r3
 8001b5a:	0013      	movs	r3, r2
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	697a      	ldr	r2, [r7, #20]
 8001b66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b6e:	2201      	movs	r2, #1
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	409a      	lsls	r2, r3
 8001b74:	0013      	movs	r3, r2
 8001b76:	43da      	mvns	r2, r3
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	091b      	lsrs	r3, r3, #4
 8001b84:	2201      	movs	r2, #1
 8001b86:	401a      	ands	r2, r3
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	409a      	lsls	r2, r3
 8001b8c:	0013      	movs	r3, r2
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b03      	cmp	r3, #3
 8001ba0:	d017      	beq.n	8001bd2 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	2203      	movs	r2, #3
 8001bae:	409a      	lsls	r2, r3
 8001bb0:	0013      	movs	r3, r2
 8001bb2:	43da      	mvns	r2, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	689a      	ldr	r2, [r3, #8]
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	409a      	lsls	r2, r3
 8001bc4:	0013      	movs	r3, r2
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	2380      	movs	r3, #128	@ 0x80
 8001bd8:	055b      	lsls	r3, r3, #21
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d100      	bne.n	8001be0 <HAL_GPIO_Init+0x180>
 8001bde:	e098      	b.n	8001d12 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001be0:	4a53      	ldr	r2, [pc, #332]	@ (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	089b      	lsrs	r3, r3, #2
 8001be6:	3318      	adds	r3, #24
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	589b      	ldr	r3, [r3, r2]
 8001bec:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	220f      	movs	r2, #15
 8001bf8:	409a      	lsls	r2, r3
 8001bfa:	0013      	movs	r3, r2
 8001bfc:	43da      	mvns	r2, r3
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	4013      	ands	r3, r2
 8001c02:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	23a0      	movs	r3, #160	@ 0xa0
 8001c08:	05db      	lsls	r3, r3, #23
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d019      	beq.n	8001c42 <HAL_GPIO_Init+0x1e2>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a48      	ldr	r2, [pc, #288]	@ (8001d34 <HAL_GPIO_Init+0x2d4>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d013      	beq.n	8001c3e <HAL_GPIO_Init+0x1de>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a47      	ldr	r2, [pc, #284]	@ (8001d38 <HAL_GPIO_Init+0x2d8>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d00d      	beq.n	8001c3a <HAL_GPIO_Init+0x1da>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a46      	ldr	r2, [pc, #280]	@ (8001d3c <HAL_GPIO_Init+0x2dc>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d007      	beq.n	8001c36 <HAL_GPIO_Init+0x1d6>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a45      	ldr	r2, [pc, #276]	@ (8001d40 <HAL_GPIO_Init+0x2e0>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d101      	bne.n	8001c32 <HAL_GPIO_Init+0x1d2>
 8001c2e:	2305      	movs	r3, #5
 8001c30:	e008      	b.n	8001c44 <HAL_GPIO_Init+0x1e4>
 8001c32:	2306      	movs	r3, #6
 8001c34:	e006      	b.n	8001c44 <HAL_GPIO_Init+0x1e4>
 8001c36:	2303      	movs	r3, #3
 8001c38:	e004      	b.n	8001c44 <HAL_GPIO_Init+0x1e4>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e002      	b.n	8001c44 <HAL_GPIO_Init+0x1e4>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <HAL_GPIO_Init+0x1e4>
 8001c42:	2300      	movs	r3, #0
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	2103      	movs	r1, #3
 8001c48:	400a      	ands	r2, r1
 8001c4a:	00d2      	lsls	r2, r2, #3
 8001c4c:	4093      	lsls	r3, r2
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001c54:	4936      	ldr	r1, [pc, #216]	@ (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	089b      	lsrs	r3, r3, #2
 8001c5a:	3318      	adds	r3, #24
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001c62:	4a33      	ldr	r2, [pc, #204]	@ (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001c64:	2380      	movs	r3, #128	@ 0x80
 8001c66:	58d3      	ldr	r3, [r2, r3]
 8001c68:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	43da      	mvns	r2, r3
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	4013      	ands	r3, r2
 8001c72:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	2380      	movs	r3, #128	@ 0x80
 8001c7a:	025b      	lsls	r3, r3, #9
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d003      	beq.n	8001c88 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001c88:	4929      	ldr	r1, [pc, #164]	@ (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001c8a:	2280      	movs	r2, #128	@ 0x80
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001c90:	4a27      	ldr	r2, [pc, #156]	@ (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001c92:	2384      	movs	r3, #132	@ 0x84
 8001c94:	58d3      	ldr	r3, [r2, r3]
 8001c96:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	43da      	mvns	r2, r3
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685a      	ldr	r2, [r3, #4]
 8001ca6:	2380      	movs	r3, #128	@ 0x80
 8001ca8:	029b      	lsls	r3, r3, #10
 8001caa:	4013      	ands	r3, r2
 8001cac:	d003      	beq.n	8001cb6 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001cb6:	491e      	ldr	r1, [pc, #120]	@ (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001cb8:	2284      	movs	r2, #132	@ 0x84
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001cbe:	4b1c      	ldr	r3, [pc, #112]	@ (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	43da      	mvns	r2, r3
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	2380      	movs	r3, #128	@ 0x80
 8001cd4:	035b      	lsls	r3, r3, #13
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001ce2:	4b13      	ldr	r3, [pc, #76]	@ (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001ce8:	4b11      	ldr	r3, [pc, #68]	@ (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	43da      	mvns	r2, r3
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	2380      	movs	r3, #128	@ 0x80
 8001cfe:	039b      	lsls	r3, r3, #14
 8001d00:	4013      	ands	r3, r2
 8001d02:	d003      	beq.n	8001d0c <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001d0c:	4b08      	ldr	r3, [pc, #32]	@ (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	3301      	adds	r3, #1
 8001d16:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	40da      	lsrs	r2, r3
 8001d20:	1e13      	subs	r3, r2, #0
 8001d22:	d000      	beq.n	8001d26 <HAL_GPIO_Init+0x2c6>
 8001d24:	e6a4      	b.n	8001a70 <HAL_GPIO_Init+0x10>
  }
}
 8001d26:	46c0      	nop			@ (mov r8, r8)
 8001d28:	46c0      	nop			@ (mov r8, r8)
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	b006      	add	sp, #24
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40021800 	.word	0x40021800
 8001d34:	50000400 	.word	0x50000400
 8001d38:	50000800 	.word	0x50000800
 8001d3c:	50000c00 	.word	0x50000c00
 8001d40:	50001400 	.word	0x50001400

08001d44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	0008      	movs	r0, r1
 8001d4e:	0011      	movs	r1, r2
 8001d50:	1cbb      	adds	r3, r7, #2
 8001d52:	1c02      	adds	r2, r0, #0
 8001d54:	801a      	strh	r2, [r3, #0]
 8001d56:	1c7b      	adds	r3, r7, #1
 8001d58:	1c0a      	adds	r2, r1, #0
 8001d5a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d5c:	1c7b      	adds	r3, r7, #1
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d004      	beq.n	8001d6e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d64:	1cbb      	adds	r3, r7, #2
 8001d66:	881a      	ldrh	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d6c:	e003      	b.n	8001d76 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d6e:	1cbb      	adds	r3, r7, #2
 8001d70:	881a      	ldrh	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d76:	46c0      	nop			@ (mov r8, r8)
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	b002      	add	sp, #8
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e1d0      	b.n	8002134 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2201      	movs	r2, #1
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d100      	bne.n	8001d9e <HAL_RCC_OscConfig+0x1e>
 8001d9c:	e069      	b.n	8001e72 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d9e:	4bc8      	ldr	r3, [pc, #800]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	2238      	movs	r2, #56	@ 0x38
 8001da4:	4013      	ands	r3, r2
 8001da6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	2b08      	cmp	r3, #8
 8001dac:	d105      	bne.n	8001dba <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d15d      	bne.n	8001e72 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e1bc      	b.n	8002134 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	2380      	movs	r3, #128	@ 0x80
 8001dc0:	025b      	lsls	r3, r3, #9
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d107      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x56>
 8001dc6:	4bbe      	ldr	r3, [pc, #760]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	4bbd      	ldr	r3, [pc, #756]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8001dcc:	2180      	movs	r1, #128	@ 0x80
 8001dce:	0249      	lsls	r1, r1, #9
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	e020      	b.n	8001e18 <HAL_RCC_OscConfig+0x98>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	23a0      	movs	r3, #160	@ 0xa0
 8001ddc:	02db      	lsls	r3, r3, #11
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d10e      	bne.n	8001e00 <HAL_RCC_OscConfig+0x80>
 8001de2:	4bb7      	ldr	r3, [pc, #732]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	4bb6      	ldr	r3, [pc, #728]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8001de8:	2180      	movs	r1, #128	@ 0x80
 8001dea:	02c9      	lsls	r1, r1, #11
 8001dec:	430a      	orrs	r2, r1
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	4bb3      	ldr	r3, [pc, #716]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4bb2      	ldr	r3, [pc, #712]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8001df6:	2180      	movs	r1, #128	@ 0x80
 8001df8:	0249      	lsls	r1, r1, #9
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	e00b      	b.n	8001e18 <HAL_RCC_OscConfig+0x98>
 8001e00:	4baf      	ldr	r3, [pc, #700]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4bae      	ldr	r3, [pc, #696]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8001e06:	49af      	ldr	r1, [pc, #700]	@ (80020c4 <HAL_RCC_OscConfig+0x344>)
 8001e08:	400a      	ands	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	4bac      	ldr	r3, [pc, #688]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4bab      	ldr	r3, [pc, #684]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8001e12:	49ad      	ldr	r1, [pc, #692]	@ (80020c8 <HAL_RCC_OscConfig+0x348>)
 8001e14:	400a      	ands	r2, r1
 8001e16:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d014      	beq.n	8001e4a <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e20:	f7fe fe6c 	bl	8000afc <HAL_GetTick>
 8001e24:	0003      	movs	r3, r0
 8001e26:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001e2a:	f7fe fe67 	bl	8000afc <HAL_GetTick>
 8001e2e:	0002      	movs	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b64      	cmp	r3, #100	@ 0x64
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e17b      	b.n	8002134 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e3c:	4ba0      	ldr	r3, [pc, #640]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	2380      	movs	r3, #128	@ 0x80
 8001e42:	029b      	lsls	r3, r3, #10
 8001e44:	4013      	ands	r3, r2
 8001e46:	d0f0      	beq.n	8001e2a <HAL_RCC_OscConfig+0xaa>
 8001e48:	e013      	b.n	8001e72 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4a:	f7fe fe57 	bl	8000afc <HAL_GetTick>
 8001e4e:	0003      	movs	r3, r0
 8001e50:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001e54:	f7fe fe52 	bl	8000afc <HAL_GetTick>
 8001e58:	0002      	movs	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b64      	cmp	r3, #100	@ 0x64
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e166      	b.n	8002134 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e66:	4b96      	ldr	r3, [pc, #600]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	2380      	movs	r3, #128	@ 0x80
 8001e6c:	029b      	lsls	r3, r3, #10
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2202      	movs	r2, #2
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d100      	bne.n	8001e7e <HAL_RCC_OscConfig+0xfe>
 8001e7c:	e086      	b.n	8001f8c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e7e:	4b90      	ldr	r3, [pc, #576]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	2238      	movs	r2, #56	@ 0x38
 8001e84:	4013      	ands	r3, r2
 8001e86:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d12f      	bne.n	8001eee <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e14c      	b.n	8002134 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e9a:	4b89      	ldr	r3, [pc, #548]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	4a8b      	ldr	r2, [pc, #556]	@ (80020cc <HAL_RCC_OscConfig+0x34c>)
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	0019      	movs	r1, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	021a      	lsls	r2, r3, #8
 8001eaa:	4b85      	ldr	r3, [pc, #532]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8001eac:	430a      	orrs	r2, r1
 8001eae:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d112      	bne.n	8001edc <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001eb6:	4b82      	ldr	r3, [pc, #520]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a85      	ldr	r2, [pc, #532]	@ (80020d0 <HAL_RCC_OscConfig+0x350>)
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	0019      	movs	r1, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691a      	ldr	r2, [r3, #16]
 8001ec4:	4b7e      	ldr	r3, [pc, #504]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001eca:	4b7d      	ldr	r3, [pc, #500]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	0adb      	lsrs	r3, r3, #11
 8001ed0:	2207      	movs	r2, #7
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	4a7f      	ldr	r2, [pc, #508]	@ (80020d4 <HAL_RCC_OscConfig+0x354>)
 8001ed6:	40da      	lsrs	r2, r3
 8001ed8:	4b7f      	ldr	r3, [pc, #508]	@ (80020d8 <HAL_RCC_OscConfig+0x358>)
 8001eda:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001edc:	4b7f      	ldr	r3, [pc, #508]	@ (80020dc <HAL_RCC_OscConfig+0x35c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	f7fe fdaf 	bl	8000a44 <HAL_InitTick>
 8001ee6:	1e03      	subs	r3, r0, #0
 8001ee8:	d050      	beq.n	8001f8c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e122      	b.n	8002134 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d030      	beq.n	8001f58 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001ef6:	4b72      	ldr	r3, [pc, #456]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a75      	ldr	r2, [pc, #468]	@ (80020d0 <HAL_RCC_OscConfig+0x350>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	0019      	movs	r1, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	4b6e      	ldr	r3, [pc, #440]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8001f06:	430a      	orrs	r2, r1
 8001f08:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001f0a:	4b6d      	ldr	r3, [pc, #436]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	4b6c      	ldr	r3, [pc, #432]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8001f10:	2180      	movs	r1, #128	@ 0x80
 8001f12:	0049      	lsls	r1, r1, #1
 8001f14:	430a      	orrs	r2, r1
 8001f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f18:	f7fe fdf0 	bl	8000afc <HAL_GetTick>
 8001f1c:	0003      	movs	r3, r0
 8001f1e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001f22:	f7fe fdeb 	bl	8000afc <HAL_GetTick>
 8001f26:	0002      	movs	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e0ff      	b.n	8002134 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f34:	4b62      	ldr	r3, [pc, #392]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	2380      	movs	r3, #128	@ 0x80
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d0f0      	beq.n	8001f22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f40:	4b5f      	ldr	r3, [pc, #380]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	4a61      	ldr	r2, [pc, #388]	@ (80020cc <HAL_RCC_OscConfig+0x34c>)
 8001f46:	4013      	ands	r3, r2
 8001f48:	0019      	movs	r1, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	021a      	lsls	r2, r3, #8
 8001f50:	4b5b      	ldr	r3, [pc, #364]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8001f52:	430a      	orrs	r2, r1
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	e019      	b.n	8001f8c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001f58:	4b59      	ldr	r3, [pc, #356]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b58      	ldr	r3, [pc, #352]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8001f5e:	4960      	ldr	r1, [pc, #384]	@ (80020e0 <HAL_RCC_OscConfig+0x360>)
 8001f60:	400a      	ands	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f64:	f7fe fdca 	bl	8000afc <HAL_GetTick>
 8001f68:	0003      	movs	r3, r0
 8001f6a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001f6e:	f7fe fdc5 	bl	8000afc <HAL_GetTick>
 8001f72:	0002      	movs	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e0d9      	b.n	8002134 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f80:	4b4f      	ldr	r3, [pc, #316]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	2380      	movs	r3, #128	@ 0x80
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4013      	ands	r3, r2
 8001f8a:	d1f0      	bne.n	8001f6e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2208      	movs	r2, #8
 8001f92:	4013      	ands	r3, r2
 8001f94:	d042      	beq.n	800201c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001f96:	4b4a      	ldr	r3, [pc, #296]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	2238      	movs	r2, #56	@ 0x38
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	2b18      	cmp	r3, #24
 8001fa0:	d105      	bne.n	8001fae <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d138      	bne.n	800201c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e0c2      	b.n	8002134 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d019      	beq.n	8001fea <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001fb6:	4b42      	ldr	r3, [pc, #264]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8001fb8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001fba:	4b41      	ldr	r3, [pc, #260]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc2:	f7fe fd9b 	bl	8000afc <HAL_GetTick>
 8001fc6:	0003      	movs	r3, r0
 8001fc8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001fcc:	f7fe fd96 	bl	8000afc <HAL_GetTick>
 8001fd0:	0002      	movs	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e0aa      	b.n	8002134 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001fde:	4b38      	ldr	r3, [pc, #224]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8001fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d0f1      	beq.n	8001fcc <HAL_RCC_OscConfig+0x24c>
 8001fe8:	e018      	b.n	800201c <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001fea:	4b35      	ldr	r3, [pc, #212]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8001fec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001fee:	4b34      	ldr	r3, [pc, #208]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	438a      	bics	r2, r1
 8001ff4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff6:	f7fe fd81 	bl	8000afc <HAL_GetTick>
 8001ffa:	0003      	movs	r3, r0
 8001ffc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002000:	f7fe fd7c 	bl	8000afc <HAL_GetTick>
 8002004:	0002      	movs	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e090      	b.n	8002134 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002012:	4b2b      	ldr	r3, [pc, #172]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8002014:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002016:	2202      	movs	r2, #2
 8002018:	4013      	ands	r3, r2
 800201a:	d1f1      	bne.n	8002000 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2204      	movs	r2, #4
 8002022:	4013      	ands	r3, r2
 8002024:	d100      	bne.n	8002028 <HAL_RCC_OscConfig+0x2a8>
 8002026:	e084      	b.n	8002132 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002028:	230f      	movs	r3, #15
 800202a:	18fb      	adds	r3, r7, r3
 800202c:	2200      	movs	r2, #0
 800202e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002030:	4b23      	ldr	r3, [pc, #140]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2238      	movs	r2, #56	@ 0x38
 8002036:	4013      	ands	r3, r2
 8002038:	2b20      	cmp	r3, #32
 800203a:	d106      	bne.n	800204a <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d000      	beq.n	8002046 <HAL_RCC_OscConfig+0x2c6>
 8002044:	e075      	b.n	8002132 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e074      	b.n	8002134 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d106      	bne.n	8002060 <HAL_RCC_OscConfig+0x2e0>
 8002052:	4b1b      	ldr	r3, [pc, #108]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8002054:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002056:	4b1a      	ldr	r3, [pc, #104]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8002058:	2101      	movs	r1, #1
 800205a:	430a      	orrs	r2, r1
 800205c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800205e:	e01c      	b.n	800209a <HAL_RCC_OscConfig+0x31a>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	2b05      	cmp	r3, #5
 8002066:	d10c      	bne.n	8002082 <HAL_RCC_OscConfig+0x302>
 8002068:	4b15      	ldr	r3, [pc, #84]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 800206a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800206c:	4b14      	ldr	r3, [pc, #80]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 800206e:	2104      	movs	r1, #4
 8002070:	430a      	orrs	r2, r1
 8002072:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002074:	4b12      	ldr	r3, [pc, #72]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8002076:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002078:	4b11      	ldr	r3, [pc, #68]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 800207a:	2101      	movs	r1, #1
 800207c:	430a      	orrs	r2, r1
 800207e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002080:	e00b      	b.n	800209a <HAL_RCC_OscConfig+0x31a>
 8002082:	4b0f      	ldr	r3, [pc, #60]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8002084:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002086:	4b0e      	ldr	r3, [pc, #56]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8002088:	2101      	movs	r1, #1
 800208a:	438a      	bics	r2, r1
 800208c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800208e:	4b0c      	ldr	r3, [pc, #48]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8002090:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002092:	4b0b      	ldr	r3, [pc, #44]	@ (80020c0 <HAL_RCC_OscConfig+0x340>)
 8002094:	2104      	movs	r1, #4
 8002096:	438a      	bics	r2, r1
 8002098:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d028      	beq.n	80020f4 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a2:	f7fe fd2b 	bl	8000afc <HAL_GetTick>
 80020a6:	0003      	movs	r3, r0
 80020a8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80020aa:	e01d      	b.n	80020e8 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ac:	f7fe fd26 	bl	8000afc <HAL_GetTick>
 80020b0:	0002      	movs	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	4a0b      	ldr	r2, [pc, #44]	@ (80020e4 <HAL_RCC_OscConfig+0x364>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d915      	bls.n	80020e8 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e039      	b.n	8002134 <HAL_RCC_OscConfig+0x3b4>
 80020c0:	40021000 	.word	0x40021000
 80020c4:	fffeffff 	.word	0xfffeffff
 80020c8:	fffbffff 	.word	0xfffbffff
 80020cc:	ffff80ff 	.word	0xffff80ff
 80020d0:	ffffc7ff 	.word	0xffffc7ff
 80020d4:	02dc6c00 	.word	0x02dc6c00
 80020d8:	20000004 	.word	0x20000004
 80020dc:	20000020 	.word	0x20000020
 80020e0:	fffffeff 	.word	0xfffffeff
 80020e4:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80020e8:	4b14      	ldr	r3, [pc, #80]	@ (800213c <HAL_RCC_OscConfig+0x3bc>)
 80020ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ec:	2202      	movs	r2, #2
 80020ee:	4013      	ands	r3, r2
 80020f0:	d0dc      	beq.n	80020ac <HAL_RCC_OscConfig+0x32c>
 80020f2:	e013      	b.n	800211c <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f4:	f7fe fd02 	bl	8000afc <HAL_GetTick>
 80020f8:	0003      	movs	r3, r0
 80020fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80020fc:	e009      	b.n	8002112 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fe:	f7fe fcfd 	bl	8000afc <HAL_GetTick>
 8002102:	0002      	movs	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	4a0d      	ldr	r2, [pc, #52]	@ (8002140 <HAL_RCC_OscConfig+0x3c0>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e010      	b.n	8002134 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002112:	4b0a      	ldr	r3, [pc, #40]	@ (800213c <HAL_RCC_OscConfig+0x3bc>)
 8002114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002116:	2202      	movs	r2, #2
 8002118:	4013      	ands	r3, r2
 800211a:	d1f0      	bne.n	80020fe <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800211c:	230f      	movs	r3, #15
 800211e:	18fb      	adds	r3, r7, r3
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d105      	bne.n	8002132 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002126:	4b05      	ldr	r3, [pc, #20]	@ (800213c <HAL_RCC_OscConfig+0x3bc>)
 8002128:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800212a:	4b04      	ldr	r3, [pc, #16]	@ (800213c <HAL_RCC_OscConfig+0x3bc>)
 800212c:	4905      	ldr	r1, [pc, #20]	@ (8002144 <HAL_RCC_OscConfig+0x3c4>)
 800212e:	400a      	ands	r2, r1
 8002130:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	0018      	movs	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	b006      	add	sp, #24
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40021000 	.word	0x40021000
 8002140:	00001388 	.word	0x00001388
 8002144:	efffffff 	.word	0xefffffff

08002148 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e0df      	b.n	800231c <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800215c:	4b71      	ldr	r3, [pc, #452]	@ (8002324 <HAL_RCC_ClockConfig+0x1dc>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2207      	movs	r2, #7
 8002162:	4013      	ands	r3, r2
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d91e      	bls.n	80021a8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216a:	4b6e      	ldr	r3, [pc, #440]	@ (8002324 <HAL_RCC_ClockConfig+0x1dc>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2207      	movs	r2, #7
 8002170:	4393      	bics	r3, r2
 8002172:	0019      	movs	r1, r3
 8002174:	4b6b      	ldr	r3, [pc, #428]	@ (8002324 <HAL_RCC_ClockConfig+0x1dc>)
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800217c:	f7fe fcbe 	bl	8000afc <HAL_GetTick>
 8002180:	0003      	movs	r3, r0
 8002182:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002184:	e009      	b.n	800219a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002186:	f7fe fcb9 	bl	8000afc <HAL_GetTick>
 800218a:	0002      	movs	r2, r0
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	4a65      	ldr	r2, [pc, #404]	@ (8002328 <HAL_RCC_ClockConfig+0x1e0>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d901      	bls.n	800219a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e0c0      	b.n	800231c <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800219a:	4b62      	ldr	r3, [pc, #392]	@ (8002324 <HAL_RCC_ClockConfig+0x1dc>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2207      	movs	r2, #7
 80021a0:	4013      	ands	r3, r2
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d1ee      	bne.n	8002186 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2202      	movs	r2, #2
 80021ae:	4013      	ands	r3, r2
 80021b0:	d017      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2204      	movs	r2, #4
 80021b8:	4013      	ands	r3, r2
 80021ba:	d008      	beq.n	80021ce <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80021bc:	4b5b      	ldr	r3, [pc, #364]	@ (800232c <HAL_RCC_ClockConfig+0x1e4>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	4a5b      	ldr	r2, [pc, #364]	@ (8002330 <HAL_RCC_ClockConfig+0x1e8>)
 80021c2:	401a      	ands	r2, r3
 80021c4:	4b59      	ldr	r3, [pc, #356]	@ (800232c <HAL_RCC_ClockConfig+0x1e4>)
 80021c6:	21b0      	movs	r1, #176	@ 0xb0
 80021c8:	0109      	lsls	r1, r1, #4
 80021ca:	430a      	orrs	r2, r1
 80021cc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ce:	4b57      	ldr	r3, [pc, #348]	@ (800232c <HAL_RCC_ClockConfig+0x1e4>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	4a58      	ldr	r2, [pc, #352]	@ (8002334 <HAL_RCC_ClockConfig+0x1ec>)
 80021d4:	4013      	ands	r3, r2
 80021d6:	0019      	movs	r1, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68da      	ldr	r2, [r3, #12]
 80021dc:	4b53      	ldr	r3, [pc, #332]	@ (800232c <HAL_RCC_ClockConfig+0x1e4>)
 80021de:	430a      	orrs	r2, r1
 80021e0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2201      	movs	r2, #1
 80021e8:	4013      	ands	r3, r2
 80021ea:	d04b      	beq.n	8002284 <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d107      	bne.n	8002204 <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021f4:	4b4d      	ldr	r3, [pc, #308]	@ (800232c <HAL_RCC_ClockConfig+0x1e4>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	2380      	movs	r3, #128	@ 0x80
 80021fa:	029b      	lsls	r3, r3, #10
 80021fc:	4013      	ands	r3, r2
 80021fe:	d11f      	bne.n	8002240 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e08b      	b.n	800231c <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d107      	bne.n	800221c <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800220c:	4b47      	ldr	r3, [pc, #284]	@ (800232c <HAL_RCC_ClockConfig+0x1e4>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	2380      	movs	r3, #128	@ 0x80
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4013      	ands	r3, r2
 8002216:	d113      	bne.n	8002240 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e07f      	b.n	800231c <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b03      	cmp	r3, #3
 8002222:	d106      	bne.n	8002232 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002224:	4b41      	ldr	r3, [pc, #260]	@ (800232c <HAL_RCC_ClockConfig+0x1e4>)
 8002226:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002228:	2202      	movs	r2, #2
 800222a:	4013      	ands	r3, r2
 800222c:	d108      	bne.n	8002240 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e074      	b.n	800231c <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002232:	4b3e      	ldr	r3, [pc, #248]	@ (800232c <HAL_RCC_ClockConfig+0x1e4>)
 8002234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002236:	2202      	movs	r2, #2
 8002238:	4013      	ands	r3, r2
 800223a:	d101      	bne.n	8002240 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e06d      	b.n	800231c <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002240:	4b3a      	ldr	r3, [pc, #232]	@ (800232c <HAL_RCC_ClockConfig+0x1e4>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	2207      	movs	r2, #7
 8002246:	4393      	bics	r3, r2
 8002248:	0019      	movs	r1, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	4b37      	ldr	r3, [pc, #220]	@ (800232c <HAL_RCC_ClockConfig+0x1e4>)
 8002250:	430a      	orrs	r2, r1
 8002252:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002254:	f7fe fc52 	bl	8000afc <HAL_GetTick>
 8002258:	0003      	movs	r3, r0
 800225a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800225c:	e009      	b.n	8002272 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800225e:	f7fe fc4d 	bl	8000afc <HAL_GetTick>
 8002262:	0002      	movs	r2, r0
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	4a2f      	ldr	r2, [pc, #188]	@ (8002328 <HAL_RCC_ClockConfig+0x1e0>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e054      	b.n	800231c <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002272:	4b2e      	ldr	r3, [pc, #184]	@ (800232c <HAL_RCC_ClockConfig+0x1e4>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	2238      	movs	r2, #56	@ 0x38
 8002278:	401a      	ands	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	429a      	cmp	r2, r3
 8002282:	d1ec      	bne.n	800225e <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002284:	4b27      	ldr	r3, [pc, #156]	@ (8002324 <HAL_RCC_ClockConfig+0x1dc>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2207      	movs	r2, #7
 800228a:	4013      	ands	r3, r2
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	429a      	cmp	r2, r3
 8002290:	d21e      	bcs.n	80022d0 <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002292:	4b24      	ldr	r3, [pc, #144]	@ (8002324 <HAL_RCC_ClockConfig+0x1dc>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2207      	movs	r2, #7
 8002298:	4393      	bics	r3, r2
 800229a:	0019      	movs	r1, r3
 800229c:	4b21      	ldr	r3, [pc, #132]	@ (8002324 <HAL_RCC_ClockConfig+0x1dc>)
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022a4:	f7fe fc2a 	bl	8000afc <HAL_GetTick>
 80022a8:	0003      	movs	r3, r0
 80022aa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022ac:	e009      	b.n	80022c2 <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80022ae:	f7fe fc25 	bl	8000afc <HAL_GetTick>
 80022b2:	0002      	movs	r2, r0
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	4a1b      	ldr	r2, [pc, #108]	@ (8002328 <HAL_RCC_ClockConfig+0x1e0>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e02c      	b.n	800231c <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022c2:	4b18      	ldr	r3, [pc, #96]	@ (8002324 <HAL_RCC_ClockConfig+0x1dc>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2207      	movs	r2, #7
 80022c8:	4013      	ands	r3, r2
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d1ee      	bne.n	80022ae <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2204      	movs	r2, #4
 80022d6:	4013      	ands	r3, r2
 80022d8:	d009      	beq.n	80022ee <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80022da:	4b14      	ldr	r3, [pc, #80]	@ (800232c <HAL_RCC_ClockConfig+0x1e4>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	4a16      	ldr	r2, [pc, #88]	@ (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 80022e0:	4013      	ands	r3, r2
 80022e2:	0019      	movs	r1, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	691a      	ldr	r2, [r3, #16]
 80022e8:	4b10      	ldr	r3, [pc, #64]	@ (800232c <HAL_RCC_ClockConfig+0x1e4>)
 80022ea:	430a      	orrs	r2, r1
 80022ec:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80022ee:	f000 f82b 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 80022f2:	0001      	movs	r1, r0
 80022f4:	4b0d      	ldr	r3, [pc, #52]	@ (800232c <HAL_RCC_ClockConfig+0x1e4>)
 80022f6:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80022f8:	0a1b      	lsrs	r3, r3, #8
 80022fa:	220f      	movs	r2, #15
 80022fc:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80022fe:	4b0f      	ldr	r3, [pc, #60]	@ (800233c <HAL_RCC_ClockConfig+0x1f4>)
 8002300:	0092      	lsls	r2, r2, #2
 8002302:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002304:	221f      	movs	r2, #31
 8002306:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002308:	000a      	movs	r2, r1
 800230a:	40da      	lsrs	r2, r3
 800230c:	4b0c      	ldr	r3, [pc, #48]	@ (8002340 <HAL_RCC_ClockConfig+0x1f8>)
 800230e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002310:	4b0c      	ldr	r3, [pc, #48]	@ (8002344 <HAL_RCC_ClockConfig+0x1fc>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	0018      	movs	r0, r3
 8002316:	f7fe fb95 	bl	8000a44 <HAL_InitTick>
 800231a:	0003      	movs	r3, r0
}
 800231c:	0018      	movs	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	b004      	add	sp, #16
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40022000 	.word	0x40022000
 8002328:	00001388 	.word	0x00001388
 800232c:	40021000 	.word	0x40021000
 8002330:	ffff84ff 	.word	0xffff84ff
 8002334:	fffff0ff 	.word	0xfffff0ff
 8002338:	ffff8fff 	.word	0xffff8fff
 800233c:	08002e9c 	.word	0x08002e9c
 8002340:	20000004 	.word	0x20000004
 8002344:	20000020 	.word	0x20000020

08002348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800234e:	4b1c      	ldr	r3, [pc, #112]	@ (80023c0 <HAL_RCC_GetSysClockFreq+0x78>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	2238      	movs	r2, #56	@ 0x38
 8002354:	4013      	ands	r3, r2
 8002356:	d10f      	bne.n	8002378 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002358:	4b19      	ldr	r3, [pc, #100]	@ (80023c0 <HAL_RCC_GetSysClockFreq+0x78>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	0adb      	lsrs	r3, r3, #11
 800235e:	2207      	movs	r2, #7
 8002360:	4013      	ands	r3, r2
 8002362:	2201      	movs	r2, #1
 8002364:	409a      	lsls	r2, r3
 8002366:	0013      	movs	r3, r2
 8002368:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800236a:	6839      	ldr	r1, [r7, #0]
 800236c:	4815      	ldr	r0, [pc, #84]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0x7c>)
 800236e:	f7fd fecb 	bl	8000108 <__udivsi3>
 8002372:	0003      	movs	r3, r0
 8002374:	607b      	str	r3, [r7, #4]
 8002376:	e01e      	b.n	80023b6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002378:	4b11      	ldr	r3, [pc, #68]	@ (80023c0 <HAL_RCC_GetSysClockFreq+0x78>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	2238      	movs	r2, #56	@ 0x38
 800237e:	4013      	ands	r3, r2
 8002380:	2b08      	cmp	r3, #8
 8002382:	d102      	bne.n	800238a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002384:	4b0f      	ldr	r3, [pc, #60]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0x7c>)
 8002386:	607b      	str	r3, [r7, #4]
 8002388:	e015      	b.n	80023b6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800238a:	4b0d      	ldr	r3, [pc, #52]	@ (80023c0 <HAL_RCC_GetSysClockFreq+0x78>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	2238      	movs	r2, #56	@ 0x38
 8002390:	4013      	ands	r3, r2
 8002392:	2b20      	cmp	r3, #32
 8002394:	d103      	bne.n	800239e <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002396:	2380      	movs	r3, #128	@ 0x80
 8002398:	021b      	lsls	r3, r3, #8
 800239a:	607b      	str	r3, [r7, #4]
 800239c:	e00b      	b.n	80023b6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800239e:	4b08      	ldr	r3, [pc, #32]	@ (80023c0 <HAL_RCC_GetSysClockFreq+0x78>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2238      	movs	r2, #56	@ 0x38
 80023a4:	4013      	ands	r3, r2
 80023a6:	2b18      	cmp	r3, #24
 80023a8:	d103      	bne.n	80023b2 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80023aa:	23fa      	movs	r3, #250	@ 0xfa
 80023ac:	01db      	lsls	r3, r3, #7
 80023ae:	607b      	str	r3, [r7, #4]
 80023b0:	e001      	b.n	80023b6 <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 80023b6:	687b      	ldr	r3, [r7, #4]
}
 80023b8:	0018      	movs	r0, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	b002      	add	sp, #8
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40021000 	.word	0x40021000
 80023c4:	02dc6c00 	.word	0x02dc6c00

080023c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80023cc:	f7ff ffbc 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 80023d0:	0001      	movs	r1, r0
 80023d2:	4b09      	ldr	r3, [pc, #36]	@ (80023f8 <HAL_RCC_GetHCLKFreq+0x30>)
 80023d4:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80023d6:	0a1b      	lsrs	r3, r3, #8
 80023d8:	220f      	movs	r2, #15
 80023da:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80023dc:	4b07      	ldr	r3, [pc, #28]	@ (80023fc <HAL_RCC_GetHCLKFreq+0x34>)
 80023de:	0092      	lsls	r2, r2, #2
 80023e0:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80023e2:	221f      	movs	r2, #31
 80023e4:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80023e6:	000a      	movs	r2, r1
 80023e8:	40da      	lsrs	r2, r3
 80023ea:	4b05      	ldr	r3, [pc, #20]	@ (8002400 <HAL_RCC_GetHCLKFreq+0x38>)
 80023ec:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 80023ee:	4b04      	ldr	r3, [pc, #16]	@ (8002400 <HAL_RCC_GetHCLKFreq+0x38>)
 80023f0:	681b      	ldr	r3, [r3, #0]
}
 80023f2:	0018      	movs	r0, r3
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40021000 	.word	0x40021000
 80023fc:	08002e9c 	.word	0x08002e9c
 8002400:	20000004 	.word	0x20000004

08002404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8002408:	f7ff ffde 	bl	80023c8 <HAL_RCC_GetHCLKFreq>
 800240c:	0001      	movs	r1, r0
 800240e:	4b07      	ldr	r3, [pc, #28]	@ (800242c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	0b1b      	lsrs	r3, r3, #12
 8002414:	2207      	movs	r2, #7
 8002416:	401a      	ands	r2, r3
 8002418:	4b05      	ldr	r3, [pc, #20]	@ (8002430 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800241a:	0092      	lsls	r2, r2, #2
 800241c:	58d3      	ldr	r3, [r2, r3]
 800241e:	221f      	movs	r2, #31
 8002420:	4013      	ands	r3, r2
 8002422:	40d9      	lsrs	r1, r3
 8002424:	000b      	movs	r3, r1
}
 8002426:	0018      	movs	r0, r3
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40021000 	.word	0x40021000
 8002430:	08002edc 	.word	0x08002edc

08002434 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800243c:	2313      	movs	r3, #19
 800243e:	18fb      	adds	r3, r7, r3
 8002440:	2200      	movs	r2, #0
 8002442:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002444:	2312      	movs	r3, #18
 8002446:	18fb      	adds	r3, r7, r3
 8002448:	2200      	movs	r2, #0
 800244a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2240      	movs	r2, #64	@ 0x40
 8002452:	4013      	ands	r3, r2
 8002454:	d100      	bne.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8002456:	e079      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002458:	2011      	movs	r0, #17
 800245a:	183b      	adds	r3, r7, r0
 800245c:	2200      	movs	r2, #0
 800245e:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002460:	4b63      	ldr	r3, [pc, #396]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002462:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002464:	2380      	movs	r3, #128	@ 0x80
 8002466:	055b      	lsls	r3, r3, #21
 8002468:	4013      	ands	r3, r2
 800246a:	d110      	bne.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800246c:	4b60      	ldr	r3, [pc, #384]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800246e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002470:	4b5f      	ldr	r3, [pc, #380]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002472:	2180      	movs	r1, #128	@ 0x80
 8002474:	0549      	lsls	r1, r1, #21
 8002476:	430a      	orrs	r2, r1
 8002478:	63da      	str	r2, [r3, #60]	@ 0x3c
 800247a:	4b5d      	ldr	r3, [pc, #372]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800247c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800247e:	2380      	movs	r3, #128	@ 0x80
 8002480:	055b      	lsls	r3, r3, #21
 8002482:	4013      	ands	r3, r2
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002488:	183b      	adds	r3, r7, r0
 800248a:	2201      	movs	r2, #1
 800248c:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 800248e:	4b58      	ldr	r3, [pc, #352]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002490:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002492:	23c0      	movs	r3, #192	@ 0xc0
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4013      	ands	r3, r2
 8002498:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d019      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d014      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80024aa:	4b51      	ldr	r3, [pc, #324]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ae:	4a51      	ldr	r2, [pc, #324]	@ (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024b4:	4b4e      	ldr	r3, [pc, #312]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024b8:	4b4d      	ldr	r3, [pc, #308]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024ba:	2180      	movs	r1, #128	@ 0x80
 80024bc:	0249      	lsls	r1, r1, #9
 80024be:	430a      	orrs	r2, r1
 80024c0:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024c2:	4b4b      	ldr	r3, [pc, #300]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024c6:	4b4a      	ldr	r3, [pc, #296]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024c8:	494b      	ldr	r1, [pc, #300]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80024ca:	400a      	ands	r2, r1
 80024cc:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 80024ce:	4b48      	ldr	r3, [pc, #288]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	2201      	movs	r2, #1
 80024d8:	4013      	ands	r3, r2
 80024da:	d016      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024dc:	f7fe fb0e 	bl	8000afc <HAL_GetTick>
 80024e0:	0003      	movs	r3, r0
 80024e2:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80024e4:	e00c      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e6:	f7fe fb09 	bl	8000afc <HAL_GetTick>
 80024ea:	0002      	movs	r2, r0
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	4a42      	ldr	r2, [pc, #264]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d904      	bls.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 80024f6:	2313      	movs	r3, #19
 80024f8:	18fb      	adds	r3, r7, r3
 80024fa:	2203      	movs	r2, #3
 80024fc:	701a      	strb	r2, [r3, #0]
          break;
 80024fe:	e004      	b.n	800250a <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002500:	4b3b      	ldr	r3, [pc, #236]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002502:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002504:	2202      	movs	r2, #2
 8002506:	4013      	ands	r3, r2
 8002508:	d0ed      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 800250a:	2313      	movs	r3, #19
 800250c:	18fb      	adds	r3, r7, r3
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10a      	bne.n	800252a <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002514:	4b36      	ldr	r3, [pc, #216]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002516:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002518:	4a36      	ldr	r2, [pc, #216]	@ (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800251a:	4013      	ands	r3, r2
 800251c:	0019      	movs	r1, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	699a      	ldr	r2, [r3, #24]
 8002522:	4b33      	ldr	r3, [pc, #204]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002524:	430a      	orrs	r2, r1
 8002526:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002528:	e005      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800252a:	2312      	movs	r3, #18
 800252c:	18fb      	adds	r3, r7, r3
 800252e:	2213      	movs	r2, #19
 8002530:	18ba      	adds	r2, r7, r2
 8002532:	7812      	ldrb	r2, [r2, #0]
 8002534:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002536:	2311      	movs	r3, #17
 8002538:	18fb      	adds	r3, r7, r3
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d105      	bne.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002540:	4b2b      	ldr	r3, [pc, #172]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002542:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002544:	4b2a      	ldr	r3, [pc, #168]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002546:	492e      	ldr	r1, [pc, #184]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002548:	400a      	ands	r2, r1
 800254a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2201      	movs	r2, #1
 8002552:	4013      	ands	r3, r2
 8002554:	d009      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002556:	4b26      	ldr	r3, [pc, #152]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800255a:	2203      	movs	r2, #3
 800255c:	4393      	bics	r3, r2
 800255e:	0019      	movs	r1, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	4b22      	ldr	r3, [pc, #136]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002566:	430a      	orrs	r2, r1
 8002568:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2202      	movs	r2, #2
 8002570:	4013      	ands	r3, r2
 8002572:	d009      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002574:	4b1e      	ldr	r3, [pc, #120]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002578:	4a22      	ldr	r2, [pc, #136]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800257a:	4013      	ands	r3, r2
 800257c:	0019      	movs	r1, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68da      	ldr	r2, [r3, #12]
 8002582:	4b1b      	ldr	r3, [pc, #108]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002584:	430a      	orrs	r2, r1
 8002586:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2220      	movs	r2, #32
 800258e:	4013      	ands	r3, r2
 8002590:	d008      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002592:	4b17      	ldr	r3, [pc, #92]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	0899      	lsrs	r1, r3, #2
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	695a      	ldr	r2, [r3, #20]
 800259e:	4b14      	ldr	r3, [pc, #80]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025a0:	430a      	orrs	r2, r1
 80025a2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2204      	movs	r2, #4
 80025aa:	4013      	ands	r3, r2
 80025ac:	d009      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80025ae:	4b10      	ldr	r3, [pc, #64]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025b2:	4a15      	ldr	r2, [pc, #84]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025b4:	4013      	ands	r3, r2
 80025b6:	0019      	movs	r1, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	4b0c      	ldr	r3, [pc, #48]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025be:	430a      	orrs	r2, r1
 80025c0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2280      	movs	r2, #128	@ 0x80
 80025c8:	4013      	ands	r3, r2
 80025ca:	d009      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 80025cc:	4b08      	ldr	r3, [pc, #32]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	22e0      	movs	r2, #224	@ 0xe0
 80025d2:	4393      	bics	r3, r2
 80025d4:	0019      	movs	r1, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	4b05      	ldr	r3, [pc, #20]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025dc:	430a      	orrs	r2, r1
 80025de:	601a      	str	r2, [r3, #0]
  }
  return status;
 80025e0:	2312      	movs	r3, #18
 80025e2:	18fb      	adds	r3, r7, r3
 80025e4:	781b      	ldrb	r3, [r3, #0]
}
 80025e6:	0018      	movs	r0, r3
 80025e8:	46bd      	mov	sp, r7
 80025ea:	b006      	add	sp, #24
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	46c0      	nop			@ (mov r8, r8)
 80025f0:	40021000 	.word	0x40021000
 80025f4:	fffffcff 	.word	0xfffffcff
 80025f8:	fffeffff 	.word	0xfffeffff
 80025fc:	00001388 	.word	0x00001388
 8002600:	efffffff 	.word	0xefffffff
 8002604:	ffffcfff 	.word	0xffffcfff
 8002608:	ffff3fff 	.word	0xffff3fff

0800260c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e046      	b.n	80026ac <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2288      	movs	r2, #136	@ 0x88
 8002622:	589b      	ldr	r3, [r3, r2]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d107      	bne.n	8002638 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2284      	movs	r2, #132	@ 0x84
 800262c:	2100      	movs	r1, #0
 800262e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	0018      	movs	r0, r3
 8002634:	f000 f840 	bl	80026b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2288      	movs	r2, #136	@ 0x88
 800263c:	2124      	movs	r1, #36	@ 0x24
 800263e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2101      	movs	r1, #1
 800264c:	438a      	bics	r2, r1
 800264e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	0018      	movs	r0, r3
 800265c:	f000 f9b2 	bl	80029c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	0018      	movs	r0, r3
 8002664:	f000 f830 	bl	80026c8 <UART_SetConfig>
 8002668:	0003      	movs	r3, r0
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e01c      	b.n	80026ac <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	490d      	ldr	r1, [pc, #52]	@ (80026b4 <HAL_UART_Init+0xa8>)
 800267e:	400a      	ands	r2, r1
 8002680:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	212a      	movs	r1, #42	@ 0x2a
 800268e:	438a      	bics	r2, r1
 8002690:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2101      	movs	r1, #1
 800269e:	430a      	orrs	r2, r1
 80026a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	0018      	movs	r0, r3
 80026a6:	f000 fa41 	bl	8002b2c <UART_CheckIdleState>
 80026aa:	0003      	movs	r3, r0
}
 80026ac:	0018      	movs	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	b002      	add	sp, #8
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	ffffb7ff 	.word	0xffffb7ff

080026b8 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80026c0:	46c0      	nop			@ (mov r8, r8)
 80026c2:	46bd      	mov	sp, r7
 80026c4:	b002      	add	sp, #8
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80026d0:	231e      	movs	r3, #30
 80026d2:	18fb      	adds	r3, r7, r3
 80026d4:	2200      	movs	r2, #0
 80026d6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	431a      	orrs	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4aab      	ldr	r2, [pc, #684]	@ (80029a4 <UART_SetConfig+0x2dc>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	0019      	movs	r1, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	430a      	orrs	r2, r1
 8002704:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	4aa6      	ldr	r2, [pc, #664]	@ (80029a8 <UART_SetConfig+0x2e0>)
 800270e:	4013      	ands	r3, r2
 8002710:	0019      	movs	r1, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68da      	ldr	r2, [r3, #12]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	4313      	orrs	r3, r2
 800272c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	4a9d      	ldr	r2, [pc, #628]	@ (80029ac <UART_SetConfig+0x2e4>)
 8002736:	4013      	ands	r3, r2
 8002738:	0019      	movs	r1, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	430a      	orrs	r2, r1
 8002742:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800274a:	220f      	movs	r2, #15
 800274c:	4393      	bics	r3, r2
 800274e:	0019      	movs	r1, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a93      	ldr	r2, [pc, #588]	@ (80029b0 <UART_SetConfig+0x2e8>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d127      	bne.n	80027b6 <UART_SetConfig+0xee>
 8002766:	4b93      	ldr	r3, [pc, #588]	@ (80029b4 <UART_SetConfig+0x2ec>)
 8002768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800276a:	2203      	movs	r2, #3
 800276c:	4013      	ands	r3, r2
 800276e:	2b03      	cmp	r3, #3
 8002770:	d017      	beq.n	80027a2 <UART_SetConfig+0xda>
 8002772:	d81b      	bhi.n	80027ac <UART_SetConfig+0xe4>
 8002774:	2b02      	cmp	r3, #2
 8002776:	d00a      	beq.n	800278e <UART_SetConfig+0xc6>
 8002778:	d818      	bhi.n	80027ac <UART_SetConfig+0xe4>
 800277a:	2b00      	cmp	r3, #0
 800277c:	d002      	beq.n	8002784 <UART_SetConfig+0xbc>
 800277e:	2b01      	cmp	r3, #1
 8002780:	d00a      	beq.n	8002798 <UART_SetConfig+0xd0>
 8002782:	e013      	b.n	80027ac <UART_SetConfig+0xe4>
 8002784:	231f      	movs	r3, #31
 8002786:	18fb      	adds	r3, r7, r3
 8002788:	2200      	movs	r2, #0
 800278a:	701a      	strb	r2, [r3, #0]
 800278c:	e021      	b.n	80027d2 <UART_SetConfig+0x10a>
 800278e:	231f      	movs	r3, #31
 8002790:	18fb      	adds	r3, r7, r3
 8002792:	2202      	movs	r2, #2
 8002794:	701a      	strb	r2, [r3, #0]
 8002796:	e01c      	b.n	80027d2 <UART_SetConfig+0x10a>
 8002798:	231f      	movs	r3, #31
 800279a:	18fb      	adds	r3, r7, r3
 800279c:	2204      	movs	r2, #4
 800279e:	701a      	strb	r2, [r3, #0]
 80027a0:	e017      	b.n	80027d2 <UART_SetConfig+0x10a>
 80027a2:	231f      	movs	r3, #31
 80027a4:	18fb      	adds	r3, r7, r3
 80027a6:	2208      	movs	r2, #8
 80027a8:	701a      	strb	r2, [r3, #0]
 80027aa:	e012      	b.n	80027d2 <UART_SetConfig+0x10a>
 80027ac:	231f      	movs	r3, #31
 80027ae:	18fb      	adds	r3, r7, r3
 80027b0:	2210      	movs	r2, #16
 80027b2:	701a      	strb	r2, [r3, #0]
 80027b4:	e00d      	b.n	80027d2 <UART_SetConfig+0x10a>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a7f      	ldr	r2, [pc, #508]	@ (80029b8 <UART_SetConfig+0x2f0>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d104      	bne.n	80027ca <UART_SetConfig+0x102>
 80027c0:	231f      	movs	r3, #31
 80027c2:	18fb      	adds	r3, r7, r3
 80027c4:	2200      	movs	r2, #0
 80027c6:	701a      	strb	r2, [r3, #0]
 80027c8:	e003      	b.n	80027d2 <UART_SetConfig+0x10a>
 80027ca:	231f      	movs	r3, #31
 80027cc:	18fb      	adds	r3, r7, r3
 80027ce:	2210      	movs	r2, #16
 80027d0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69da      	ldr	r2, [r3, #28]
 80027d6:	2380      	movs	r3, #128	@ 0x80
 80027d8:	021b      	lsls	r3, r3, #8
 80027da:	429a      	cmp	r2, r3
 80027dc:	d000      	beq.n	80027e0 <UART_SetConfig+0x118>
 80027de:	e06f      	b.n	80028c0 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80027e0:	231f      	movs	r3, #31
 80027e2:	18fb      	adds	r3, r7, r3
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	d01f      	beq.n	800282a <UART_SetConfig+0x162>
 80027ea:	dc22      	bgt.n	8002832 <UART_SetConfig+0x16a>
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d017      	beq.n	8002820 <UART_SetConfig+0x158>
 80027f0:	dc1f      	bgt.n	8002832 <UART_SetConfig+0x16a>
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d002      	beq.n	80027fc <UART_SetConfig+0x134>
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d005      	beq.n	8002806 <UART_SetConfig+0x13e>
 80027fa:	e01a      	b.n	8002832 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027fc:	f7ff fe02 	bl	8002404 <HAL_RCC_GetPCLK1Freq>
 8002800:	0003      	movs	r3, r0
 8002802:	61bb      	str	r3, [r7, #24]
        break;
 8002804:	e01c      	b.n	8002840 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002806:	4b6b      	ldr	r3, [pc, #428]	@ (80029b4 <UART_SetConfig+0x2ec>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	095b      	lsrs	r3, r3, #5
 800280c:	2207      	movs	r2, #7
 800280e:	4013      	ands	r3, r2
 8002810:	3301      	adds	r3, #1
 8002812:	0019      	movs	r1, r3
 8002814:	4869      	ldr	r0, [pc, #420]	@ (80029bc <UART_SetConfig+0x2f4>)
 8002816:	f7fd fc77 	bl	8000108 <__udivsi3>
 800281a:	0003      	movs	r3, r0
 800281c:	61bb      	str	r3, [r7, #24]
        break;
 800281e:	e00f      	b.n	8002840 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002820:	f7ff fd92 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 8002824:	0003      	movs	r3, r0
 8002826:	61bb      	str	r3, [r7, #24]
        break;
 8002828:	e00a      	b.n	8002840 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800282a:	2380      	movs	r3, #128	@ 0x80
 800282c:	021b      	lsls	r3, r3, #8
 800282e:	61bb      	str	r3, [r7, #24]
        break;
 8002830:	e006      	b.n	8002840 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8002832:	2300      	movs	r3, #0
 8002834:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002836:	231e      	movs	r3, #30
 8002838:	18fb      	adds	r3, r7, r3
 800283a:	2201      	movs	r2, #1
 800283c:	701a      	strb	r2, [r3, #0]
        break;
 800283e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d100      	bne.n	8002848 <UART_SetConfig+0x180>
 8002846:	e097      	b.n	8002978 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800284c:	4b5c      	ldr	r3, [pc, #368]	@ (80029c0 <UART_SetConfig+0x2f8>)
 800284e:	0052      	lsls	r2, r2, #1
 8002850:	5ad3      	ldrh	r3, [r2, r3]
 8002852:	0019      	movs	r1, r3
 8002854:	69b8      	ldr	r0, [r7, #24]
 8002856:	f7fd fc57 	bl	8000108 <__udivsi3>
 800285a:	0003      	movs	r3, r0
 800285c:	005a      	lsls	r2, r3, #1
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	085b      	lsrs	r3, r3, #1
 8002864:	18d2      	adds	r2, r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	0019      	movs	r1, r3
 800286c:	0010      	movs	r0, r2
 800286e:	f7fd fc4b 	bl	8000108 <__udivsi3>
 8002872:	0003      	movs	r3, r0
 8002874:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	2b0f      	cmp	r3, #15
 800287a:	d91c      	bls.n	80028b6 <UART_SetConfig+0x1ee>
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	2380      	movs	r3, #128	@ 0x80
 8002880:	025b      	lsls	r3, r3, #9
 8002882:	429a      	cmp	r2, r3
 8002884:	d217      	bcs.n	80028b6 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	b29a      	uxth	r2, r3
 800288a:	200e      	movs	r0, #14
 800288c:	183b      	adds	r3, r7, r0
 800288e:	210f      	movs	r1, #15
 8002890:	438a      	bics	r2, r1
 8002892:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	085b      	lsrs	r3, r3, #1
 8002898:	b29b      	uxth	r3, r3
 800289a:	2207      	movs	r2, #7
 800289c:	4013      	ands	r3, r2
 800289e:	b299      	uxth	r1, r3
 80028a0:	183b      	adds	r3, r7, r0
 80028a2:	183a      	adds	r2, r7, r0
 80028a4:	8812      	ldrh	r2, [r2, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	183a      	adds	r2, r7, r0
 80028b0:	8812      	ldrh	r2, [r2, #0]
 80028b2:	60da      	str	r2, [r3, #12]
 80028b4:	e060      	b.n	8002978 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80028b6:	231e      	movs	r3, #30
 80028b8:	18fb      	adds	r3, r7, r3
 80028ba:	2201      	movs	r2, #1
 80028bc:	701a      	strb	r2, [r3, #0]
 80028be:	e05b      	b.n	8002978 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80028c0:	231f      	movs	r3, #31
 80028c2:	18fb      	adds	r3, r7, r3
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b08      	cmp	r3, #8
 80028c8:	d01f      	beq.n	800290a <UART_SetConfig+0x242>
 80028ca:	dc22      	bgt.n	8002912 <UART_SetConfig+0x24a>
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d017      	beq.n	8002900 <UART_SetConfig+0x238>
 80028d0:	dc1f      	bgt.n	8002912 <UART_SetConfig+0x24a>
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d002      	beq.n	80028dc <UART_SetConfig+0x214>
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d005      	beq.n	80028e6 <UART_SetConfig+0x21e>
 80028da:	e01a      	b.n	8002912 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028dc:	f7ff fd92 	bl	8002404 <HAL_RCC_GetPCLK1Freq>
 80028e0:	0003      	movs	r3, r0
 80028e2:	61bb      	str	r3, [r7, #24]
        break;
 80028e4:	e01c      	b.n	8002920 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80028e6:	4b33      	ldr	r3, [pc, #204]	@ (80029b4 <UART_SetConfig+0x2ec>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	095b      	lsrs	r3, r3, #5
 80028ec:	2207      	movs	r2, #7
 80028ee:	4013      	ands	r3, r2
 80028f0:	3301      	adds	r3, #1
 80028f2:	0019      	movs	r1, r3
 80028f4:	4831      	ldr	r0, [pc, #196]	@ (80029bc <UART_SetConfig+0x2f4>)
 80028f6:	f7fd fc07 	bl	8000108 <__udivsi3>
 80028fa:	0003      	movs	r3, r0
 80028fc:	61bb      	str	r3, [r7, #24]
        break;
 80028fe:	e00f      	b.n	8002920 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002900:	f7ff fd22 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 8002904:	0003      	movs	r3, r0
 8002906:	61bb      	str	r3, [r7, #24]
        break;
 8002908:	e00a      	b.n	8002920 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800290a:	2380      	movs	r3, #128	@ 0x80
 800290c:	021b      	lsls	r3, r3, #8
 800290e:	61bb      	str	r3, [r7, #24]
        break;
 8002910:	e006      	b.n	8002920 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002916:	231e      	movs	r3, #30
 8002918:	18fb      	adds	r3, r7, r3
 800291a:	2201      	movs	r2, #1
 800291c:	701a      	strb	r2, [r3, #0]
        break;
 800291e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d028      	beq.n	8002978 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800292a:	4b25      	ldr	r3, [pc, #148]	@ (80029c0 <UART_SetConfig+0x2f8>)
 800292c:	0052      	lsls	r2, r2, #1
 800292e:	5ad3      	ldrh	r3, [r2, r3]
 8002930:	0019      	movs	r1, r3
 8002932:	69b8      	ldr	r0, [r7, #24]
 8002934:	f7fd fbe8 	bl	8000108 <__udivsi3>
 8002938:	0003      	movs	r3, r0
 800293a:	001a      	movs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	085b      	lsrs	r3, r3, #1
 8002942:	18d2      	adds	r2, r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	0019      	movs	r1, r3
 800294a:	0010      	movs	r0, r2
 800294c:	f7fd fbdc 	bl	8000108 <__udivsi3>
 8002950:	0003      	movs	r3, r0
 8002952:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	2b0f      	cmp	r3, #15
 8002958:	d90a      	bls.n	8002970 <UART_SetConfig+0x2a8>
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	2380      	movs	r3, #128	@ 0x80
 800295e:	025b      	lsls	r3, r3, #9
 8002960:	429a      	cmp	r2, r3
 8002962:	d205      	bcs.n	8002970 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	b29a      	uxth	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	e003      	b.n	8002978 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002970:	231e      	movs	r3, #30
 8002972:	18fb      	adds	r3, r7, r3
 8002974:	2201      	movs	r2, #1
 8002976:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	226a      	movs	r2, #106	@ 0x6a
 800297c:	2101      	movs	r1, #1
 800297e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2268      	movs	r2, #104	@ 0x68
 8002984:	2101      	movs	r1, #1
 8002986:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002994:	231e      	movs	r3, #30
 8002996:	18fb      	adds	r3, r7, r3
 8002998:	781b      	ldrb	r3, [r3, #0]
}
 800299a:	0018      	movs	r0, r3
 800299c:	46bd      	mov	sp, r7
 800299e:	b008      	add	sp, #32
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	46c0      	nop			@ (mov r8, r8)
 80029a4:	cfff69f3 	.word	0xcfff69f3
 80029a8:	ffffcfff 	.word	0xffffcfff
 80029ac:	11fff4ff 	.word	0x11fff4ff
 80029b0:	40013800 	.word	0x40013800
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40004400 	.word	0x40004400
 80029bc:	02dc6c00 	.word	0x02dc6c00
 80029c0:	08002f04 	.word	0x08002f04

080029c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d0:	2208      	movs	r2, #8
 80029d2:	4013      	ands	r3, r2
 80029d4:	d00b      	beq.n	80029ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	4a4a      	ldr	r2, [pc, #296]	@ (8002b08 <UART_AdvFeatureConfig+0x144>)
 80029de:	4013      	ands	r3, r2
 80029e0:	0019      	movs	r1, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f2:	2201      	movs	r2, #1
 80029f4:	4013      	ands	r3, r2
 80029f6:	d00b      	beq.n	8002a10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	4a43      	ldr	r2, [pc, #268]	@ (8002b0c <UART_AdvFeatureConfig+0x148>)
 8002a00:	4013      	ands	r3, r2
 8002a02:	0019      	movs	r1, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a14:	2202      	movs	r2, #2
 8002a16:	4013      	ands	r3, r2
 8002a18:	d00b      	beq.n	8002a32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	4a3b      	ldr	r2, [pc, #236]	@ (8002b10 <UART_AdvFeatureConfig+0x14c>)
 8002a22:	4013      	ands	r3, r2
 8002a24:	0019      	movs	r1, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a36:	2204      	movs	r2, #4
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d00b      	beq.n	8002a54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	4a34      	ldr	r2, [pc, #208]	@ (8002b14 <UART_AdvFeatureConfig+0x150>)
 8002a44:	4013      	ands	r3, r2
 8002a46:	0019      	movs	r1, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	430a      	orrs	r2, r1
 8002a52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a58:	2210      	movs	r2, #16
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d00b      	beq.n	8002a76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	4a2c      	ldr	r2, [pc, #176]	@ (8002b18 <UART_AdvFeatureConfig+0x154>)
 8002a66:	4013      	ands	r3, r2
 8002a68:	0019      	movs	r1, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	d00b      	beq.n	8002a98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	4a25      	ldr	r2, [pc, #148]	@ (8002b1c <UART_AdvFeatureConfig+0x158>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	0019      	movs	r1, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a9c:	2240      	movs	r2, #64	@ 0x40
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	d01d      	beq.n	8002ade <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	4a1d      	ldr	r2, [pc, #116]	@ (8002b20 <UART_AdvFeatureConfig+0x15c>)
 8002aaa:	4013      	ands	r3, r2
 8002aac:	0019      	movs	r1, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002abe:	2380      	movs	r3, #128	@ 0x80
 8002ac0:	035b      	lsls	r3, r3, #13
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d10b      	bne.n	8002ade <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	4a15      	ldr	r2, [pc, #84]	@ (8002b24 <UART_AdvFeatureConfig+0x160>)
 8002ace:	4013      	ands	r3, r2
 8002ad0:	0019      	movs	r1, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae2:	2280      	movs	r2, #128	@ 0x80
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d00b      	beq.n	8002b00 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	4a0e      	ldr	r2, [pc, #56]	@ (8002b28 <UART_AdvFeatureConfig+0x164>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	0019      	movs	r1, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	605a      	str	r2, [r3, #4]
  }
}
 8002b00:	46c0      	nop			@ (mov r8, r8)
 8002b02:	46bd      	mov	sp, r7
 8002b04:	b002      	add	sp, #8
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	ffff7fff 	.word	0xffff7fff
 8002b0c:	fffdffff 	.word	0xfffdffff
 8002b10:	fffeffff 	.word	0xfffeffff
 8002b14:	fffbffff 	.word	0xfffbffff
 8002b18:	ffffefff 	.word	0xffffefff
 8002b1c:	ffffdfff 	.word	0xffffdfff
 8002b20:	ffefffff 	.word	0xffefffff
 8002b24:	ff9fffff 	.word	0xff9fffff
 8002b28:	fff7ffff 	.word	0xfff7ffff

08002b2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b092      	sub	sp, #72	@ 0x48
 8002b30:	af02      	add	r7, sp, #8
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2290      	movs	r2, #144	@ 0x90
 8002b38:	2100      	movs	r1, #0
 8002b3a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b3c:	f7fd ffde 	bl	8000afc <HAL_GetTick>
 8002b40:	0003      	movs	r3, r0
 8002b42:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2208      	movs	r2, #8
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	2b08      	cmp	r3, #8
 8002b50:	d12d      	bne.n	8002bae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b54:	2280      	movs	r2, #128	@ 0x80
 8002b56:	0391      	lsls	r1, r2, #14
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	4a47      	ldr	r2, [pc, #284]	@ (8002c78 <UART_CheckIdleState+0x14c>)
 8002b5c:	9200      	str	r2, [sp, #0]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f000 f88e 	bl	8002c80 <UART_WaitOnFlagUntilTimeout>
 8002b64:	1e03      	subs	r3, r0, #0
 8002b66:	d022      	beq.n	8002bae <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002b68:	f3ef 8310 	mrs	r3, PRIMASK
 8002b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002b70:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b72:	2301      	movs	r3, #1
 8002b74:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b78:	f383 8810 	msr	PRIMASK, r3
}
 8002b7c:	46c0      	nop			@ (mov r8, r8)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2180      	movs	r1, #128	@ 0x80
 8002b8a:	438a      	bics	r2, r1
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b94:	f383 8810 	msr	PRIMASK, r3
}
 8002b98:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2288      	movs	r2, #136	@ 0x88
 8002b9e:	2120      	movs	r1, #32
 8002ba0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2284      	movs	r2, #132	@ 0x84
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e060      	b.n	8002c70 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2204      	movs	r2, #4
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d146      	bne.n	8002c4a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bbe:	2280      	movs	r2, #128	@ 0x80
 8002bc0:	03d1      	lsls	r1, r2, #15
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	4a2c      	ldr	r2, [pc, #176]	@ (8002c78 <UART_CheckIdleState+0x14c>)
 8002bc6:	9200      	str	r2, [sp, #0]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f000 f859 	bl	8002c80 <UART_WaitOnFlagUntilTimeout>
 8002bce:	1e03      	subs	r3, r0, #0
 8002bd0:	d03b      	beq.n	8002c4a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002bd2:	f3ef 8310 	mrs	r3, PRIMASK
 8002bd6:	60fb      	str	r3, [r7, #12]
  return(result);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002bda:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bdc:	2301      	movs	r3, #1
 8002bde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	f383 8810 	msr	PRIMASK, r3
}
 8002be6:	46c0      	nop			@ (mov r8, r8)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4922      	ldr	r1, [pc, #136]	@ (8002c7c <UART_CheckIdleState+0x150>)
 8002bf4:	400a      	ands	r2, r1
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bfa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	f383 8810 	msr	PRIMASK, r3
}
 8002c02:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002c04:	f3ef 8310 	mrs	r3, PRIMASK
 8002c08:	61bb      	str	r3, [r7, #24]
  return(result);
 8002c0a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c0e:	2301      	movs	r3, #1
 8002c10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	f383 8810 	msr	PRIMASK, r3
}
 8002c18:	46c0      	nop			@ (mov r8, r8)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2101      	movs	r1, #1
 8002c26:	438a      	bics	r2, r1
 8002c28:	609a      	str	r2, [r3, #8]
 8002c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c2c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	f383 8810 	msr	PRIMASK, r3
}
 8002c34:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	228c      	movs	r2, #140	@ 0x8c
 8002c3a:	2120      	movs	r1, #32
 8002c3c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2284      	movs	r2, #132	@ 0x84
 8002c42:	2100      	movs	r1, #0
 8002c44:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e012      	b.n	8002c70 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2288      	movs	r2, #136	@ 0x88
 8002c4e:	2120      	movs	r1, #32
 8002c50:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	228c      	movs	r2, #140	@ 0x8c
 8002c56:	2120      	movs	r1, #32
 8002c58:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2284      	movs	r2, #132	@ 0x84
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	0018      	movs	r0, r3
 8002c72:	46bd      	mov	sp, r7
 8002c74:	b010      	add	sp, #64	@ 0x40
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	01ffffff 	.word	0x01ffffff
 8002c7c:	fffffedf 	.word	0xfffffedf

08002c80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	603b      	str	r3, [r7, #0]
 8002c8c:	1dfb      	adds	r3, r7, #7
 8002c8e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c90:	e051      	b.n	8002d36 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	3301      	adds	r3, #1
 8002c96:	d04e      	beq.n	8002d36 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c98:	f7fd ff30 	bl	8000afc <HAL_GetTick>
 8002c9c:	0002      	movs	r2, r0
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d302      	bcc.n	8002cae <UART_WaitOnFlagUntilTimeout+0x2e>
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e051      	b.n	8002d56 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2204      	movs	r2, #4
 8002cba:	4013      	ands	r3, r2
 8002cbc:	d03b      	beq.n	8002d36 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	2b80      	cmp	r3, #128	@ 0x80
 8002cc2:	d038      	beq.n	8002d36 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	2b40      	cmp	r3, #64	@ 0x40
 8002cc8:	d035      	beq.n	8002d36 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	2208      	movs	r2, #8
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d111      	bne.n	8002cfc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2208      	movs	r2, #8
 8002cde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	f000 f83c 	bl	8002d60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2290      	movs	r2, #144	@ 0x90
 8002cec:	2108      	movs	r1, #8
 8002cee:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2284      	movs	r2, #132	@ 0x84
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e02c      	b.n	8002d56 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	69da      	ldr	r2, [r3, #28]
 8002d02:	2380      	movs	r3, #128	@ 0x80
 8002d04:	011b      	lsls	r3, r3, #4
 8002d06:	401a      	ands	r2, r3
 8002d08:	2380      	movs	r3, #128	@ 0x80
 8002d0a:	011b      	lsls	r3, r3, #4
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d112      	bne.n	8002d36 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2280      	movs	r2, #128	@ 0x80
 8002d16:	0112      	lsls	r2, r2, #4
 8002d18:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	f000 f81f 	bl	8002d60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2290      	movs	r2, #144	@ 0x90
 8002d26:	2120      	movs	r1, #32
 8002d28:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2284      	movs	r2, #132	@ 0x84
 8002d2e:	2100      	movs	r1, #0
 8002d30:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e00f      	b.n	8002d56 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	68ba      	ldr	r2, [r7, #8]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	425a      	negs	r2, r3
 8002d46:	4153      	adcs	r3, r2
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	001a      	movs	r2, r3
 8002d4c:	1dfb      	adds	r3, r7, #7
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d09e      	beq.n	8002c92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	0018      	movs	r0, r3
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	b004      	add	sp, #16
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08e      	sub	sp, #56	@ 0x38
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002d68:	f3ef 8310 	mrs	r3, PRIMASK
 8002d6c:	617b      	str	r3, [r7, #20]
  return(result);
 8002d6e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002d70:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d72:	2301      	movs	r3, #1
 8002d74:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	f383 8810 	msr	PRIMASK, r3
}
 8002d7c:	46c0      	nop			@ (mov r8, r8)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4926      	ldr	r1, [pc, #152]	@ (8002e24 <UART_EndRxTransfer+0xc4>)
 8002d8a:	400a      	ands	r2, r1
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	f383 8810 	msr	PRIMASK, r3
}
 8002d98:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002d9a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d9e:	623b      	str	r3, [r7, #32]
  return(result);
 8002da0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002da2:	633b      	str	r3, [r7, #48]	@ 0x30
 8002da4:	2301      	movs	r3, #1
 8002da6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002daa:	f383 8810 	msr	PRIMASK, r3
}
 8002dae:	46c0      	nop			@ (mov r8, r8)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	491b      	ldr	r1, [pc, #108]	@ (8002e28 <UART_EndRxTransfer+0xc8>)
 8002dbc:	400a      	ands	r2, r1
 8002dbe:	609a      	str	r2, [r3, #8]
 8002dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dc6:	f383 8810 	msr	PRIMASK, r3
}
 8002dca:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d118      	bne.n	8002e06 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002dd4:	f3ef 8310 	mrs	r3, PRIMASK
 8002dd8:	60bb      	str	r3, [r7, #8]
  return(result);
 8002dda:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dde:	2301      	movs	r3, #1
 8002de0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f383 8810 	msr	PRIMASK, r3
}
 8002de8:	46c0      	nop			@ (mov r8, r8)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2110      	movs	r1, #16
 8002df6:	438a      	bics	r2, r1
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dfc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	f383 8810 	msr	PRIMASK, r3
}
 8002e04:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	228c      	movs	r2, #140	@ 0x8c
 8002e0a:	2120      	movs	r1, #32
 8002e0c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002e1a:	46c0      	nop			@ (mov r8, r8)
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	b00e      	add	sp, #56	@ 0x38
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	46c0      	nop			@ (mov r8, r8)
 8002e24:	fffffedf 	.word	0xfffffedf
 8002e28:	effffffe 	.word	0xeffffffe

08002e2c <memset>:
 8002e2c:	0003      	movs	r3, r0
 8002e2e:	1882      	adds	r2, r0, r2
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d100      	bne.n	8002e36 <memset+0xa>
 8002e34:	4770      	bx	lr
 8002e36:	7019      	strb	r1, [r3, #0]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	e7f9      	b.n	8002e30 <memset+0x4>

08002e3c <__libc_init_array>:
 8002e3c:	b570      	push	{r4, r5, r6, lr}
 8002e3e:	2600      	movs	r6, #0
 8002e40:	4c0c      	ldr	r4, [pc, #48]	@ (8002e74 <__libc_init_array+0x38>)
 8002e42:	4d0d      	ldr	r5, [pc, #52]	@ (8002e78 <__libc_init_array+0x3c>)
 8002e44:	1b64      	subs	r4, r4, r5
 8002e46:	10a4      	asrs	r4, r4, #2
 8002e48:	42a6      	cmp	r6, r4
 8002e4a:	d109      	bne.n	8002e60 <__libc_init_array+0x24>
 8002e4c:	2600      	movs	r6, #0
 8002e4e:	f000 f819 	bl	8002e84 <_init>
 8002e52:	4c0a      	ldr	r4, [pc, #40]	@ (8002e7c <__libc_init_array+0x40>)
 8002e54:	4d0a      	ldr	r5, [pc, #40]	@ (8002e80 <__libc_init_array+0x44>)
 8002e56:	1b64      	subs	r4, r4, r5
 8002e58:	10a4      	asrs	r4, r4, #2
 8002e5a:	42a6      	cmp	r6, r4
 8002e5c:	d105      	bne.n	8002e6a <__libc_init_array+0x2e>
 8002e5e:	bd70      	pop	{r4, r5, r6, pc}
 8002e60:	00b3      	lsls	r3, r6, #2
 8002e62:	58eb      	ldr	r3, [r5, r3]
 8002e64:	4798      	blx	r3
 8002e66:	3601      	adds	r6, #1
 8002e68:	e7ee      	b.n	8002e48 <__libc_init_array+0xc>
 8002e6a:	00b3      	lsls	r3, r6, #2
 8002e6c:	58eb      	ldr	r3, [r5, r3]
 8002e6e:	4798      	blx	r3
 8002e70:	3601      	adds	r6, #1
 8002e72:	e7f2      	b.n	8002e5a <__libc_init_array+0x1e>
 8002e74:	08002f1c 	.word	0x08002f1c
 8002e78:	08002f1c 	.word	0x08002f1c
 8002e7c:	08002f20 	.word	0x08002f20
 8002e80:	08002f1c 	.word	0x08002f1c

08002e84 <_init>:
 8002e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e86:	46c0      	nop			@ (mov r8, r8)
 8002e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e8a:	bc08      	pop	{r3}
 8002e8c:	469e      	mov	lr, r3
 8002e8e:	4770      	bx	lr

08002e90 <_fini>:
 8002e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e92:	46c0      	nop			@ (mov r8, r8)
 8002e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e96:	bc08      	pop	{r3}
 8002e98:	469e      	mov	lr, r3
 8002e9a:	4770      	bx	lr
