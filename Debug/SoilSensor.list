
SoilSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064a8  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08006568  08006568  00007568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006690  08006690  00008028  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006690  08006690  00008028  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006690  08006690  00008028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006690  08006690  00007690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006694  08006694  00007694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  08006698  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cd4  20000028  080066c0  00008028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cfc  080066c0  00008cfc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a94d  00000000  00000000  00008050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039ae  00000000  00000000  0002299d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e0  00000000  00000000  00026350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001295  00000000  00000000  00027b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c50  00000000  00000000  00028dc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b1fd  00000000  00000000  00040a15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095cc8  00000000  00000000  0005bc12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f18da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056f8  00000000  00000000  000f1920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000f7018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000028 	.word	0x20000028
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006550 	.word	0x08006550

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000002c 	.word	0x2000002c
 8000104:	08006550 	.word	0x08006550

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8000224:	4a0a      	ldr	r2, [pc, #40]	@ (8000250 <MX_FREERTOS_Init+0x30>)
 8000226:	4b0b      	ldr	r3, [pc, #44]	@ (8000254 <MX_FREERTOS_Init+0x34>)
 8000228:	2100      	movs	r1, #0
 800022a:	0018      	movs	r0, r3
 800022c:	f003 fb3a 	bl	80038a4 <osThreadNew>
 8000230:	0002      	movs	r2, r0
 8000232:	4b09      	ldr	r3, [pc, #36]	@ (8000258 <MX_FREERTOS_Init+0x38>)
 8000234:	601a      	str	r2, [r3, #0]
			&defaultTask_attributes);

	/* creation of soilSensorTask */
	soilSensorTaskHandle = osThreadNew(StartSoilSensorTask, NULL,
 8000236:	4a09      	ldr	r2, [pc, #36]	@ (800025c <MX_FREERTOS_Init+0x3c>)
 8000238:	4b09      	ldr	r3, [pc, #36]	@ (8000260 <MX_FREERTOS_Init+0x40>)
 800023a:	2100      	movs	r1, #0
 800023c:	0018      	movs	r0, r3
 800023e:	f003 fb31 	bl	80038a4 <osThreadNew>
 8000242:	0002      	movs	r2, r0
 8000244:	4b07      	ldr	r3, [pc, #28]	@ (8000264 <MX_FREERTOS_Init+0x44>)
 8000246:	601a      	str	r2, [r3, #0]

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

}
 8000248:	46c0      	nop			@ (mov r8, r8)
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	46c0      	nop			@ (mov r8, r8)
 8000250:	0800659c 	.word	0x0800659c
 8000254:	08000269 	.word	0x08000269
 8000258:	2000004c 	.word	0x2000004c
 800025c:	080065c0 	.word	0x080065c0
 8000260:	08000279 	.word	0x08000279
 8000264:	20000050 	.word	0x20000050

08000268 <StartDefaultTask>:
 * @brief Function implementing the defaultTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN defaultTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000270:	2001      	movs	r0, #1
 8000272:	f003 fbab 	bl	80039cc <osDelay>
 8000276:	e7fb      	b.n	8000270 <StartDefaultTask+0x8>

08000278 <StartSoilSensorTask>:
 * @brief Function implementing the soilSensorTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSoilSensorTask */
void StartSoilSensorTask(void *argument) {
 8000278:	b5b0      	push	{r4, r5, r7, lr}
 800027a:	b086      	sub	sp, #24
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN soilSensorTask */
	/* Infinite loop */
	for (;;) {
		ADC_ChannelConfTypeDef sConfig = {0};
 8000280:	240c      	movs	r4, #12
 8000282:	193b      	adds	r3, r7, r4
 8000284:	0018      	movs	r0, r3
 8000286:	230c      	movs	r3, #12
 8000288:	001a      	movs	r2, r3
 800028a:	2100      	movs	r1, #0
 800028c:	f006 f92a 	bl	80064e4 <memset>
		SensorData_t localData;
		//Read Sensors
		sConfig.Channel = ADC_CHANNEL_0;
 8000290:	193b      	adds	r3, r7, r4
 8000292:	2201      	movs	r2, #1
 8000294:	601a      	str	r2, [r3, #0]
		sConfig.Rank = 1;
 8000296:	193b      	adds	r3, r7, r4
 8000298:	2201      	movs	r2, #1
 800029a:	605a      	str	r2, [r3, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800029c:	193b      	adds	r3, r7, r4
 800029e:	2200      	movs	r2, #0
 80002a0:	609a      	str	r2, [r3, #8]
		HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80002a2:	193a      	adds	r2, r7, r4
 80002a4:	4b28      	ldr	r3, [pc, #160]	@ (8000348 <StartSoilSensorTask+0xd0>)
 80002a6:	0011      	movs	r1, r2
 80002a8:	0018      	movs	r0, r3
 80002aa:	f001 f967 	bl	800157c <HAL_ADC_ConfigChannel>

		HAL_ADC_Start(&hadc1);
 80002ae:	4b26      	ldr	r3, [pc, #152]	@ (8000348 <StartSoilSensorTask+0xd0>)
 80002b0:	0018      	movs	r0, r3
 80002b2:	f001 f83f 	bl	8001334 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 10);
 80002b6:	4b24      	ldr	r3, [pc, #144]	@ (8000348 <StartSoilSensorTask+0xd0>)
 80002b8:	210a      	movs	r1, #10
 80002ba:	0018      	movs	r0, r3
 80002bc:	f001 f8c4 	bl	8001448 <HAL_ADC_PollForConversion>
		localData.soilMoisture = HAL_ADC_GetValue(&hadc1);
 80002c0:	4b21      	ldr	r3, [pc, #132]	@ (8000348 <StartSoilSensorTask+0xd0>)
 80002c2:	0018      	movs	r0, r3
 80002c4:	f001 f94e 	bl	8001564 <HAL_ADC_GetValue>
 80002c8:	0003      	movs	r3, r0
 80002ca:	b29a      	uxth	r2, r3
 80002cc:	2508      	movs	r5, #8
 80002ce:	197b      	adds	r3, r7, r5
 80002d0:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Stop(&hadc1);
 80002d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000348 <StartSoilSensorTask+0xd0>)
 80002d4:	0018      	movs	r0, r3
 80002d6:	f001 f87b 	bl	80013d0 <HAL_ADC_Stop>
		sConfig.Channel = ADC_CHANNEL_1;
 80002da:	193b      	adds	r3, r7, r4
 80002dc:	4a1b      	ldr	r2, [pc, #108]	@ (800034c <StartSoilSensorTask+0xd4>)
 80002de:	601a      	str	r2, [r3, #0]
		HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80002e0:	193a      	adds	r2, r7, r4
 80002e2:	4b19      	ldr	r3, [pc, #100]	@ (8000348 <StartSoilSensorTask+0xd0>)
 80002e4:	0011      	movs	r1, r2
 80002e6:	0018      	movs	r0, r3
 80002e8:	f001 f948 	bl	800157c <HAL_ADC_ConfigChannel>

		HAL_ADC_Start(&hadc1);
 80002ec:	4b16      	ldr	r3, [pc, #88]	@ (8000348 <StartSoilSensorTask+0xd0>)
 80002ee:	0018      	movs	r0, r3
 80002f0:	f001 f820 	bl	8001334 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 10);
 80002f4:	4b14      	ldr	r3, [pc, #80]	@ (8000348 <StartSoilSensorTask+0xd0>)
 80002f6:	210a      	movs	r1, #10
 80002f8:	0018      	movs	r0, r3
 80002fa:	f001 f8a5 	bl	8001448 <HAL_ADC_PollForConversion>
		localData.lightLevel = HAL_ADC_GetValue(&hadc1);
 80002fe:	4b12      	ldr	r3, [pc, #72]	@ (8000348 <StartSoilSensorTask+0xd0>)
 8000300:	0018      	movs	r0, r3
 8000302:	f001 f92f 	bl	8001564 <HAL_ADC_GetValue>
 8000306:	0003      	movs	r3, r0
 8000308:	b29a      	uxth	r2, r3
 800030a:	197b      	adds	r3, r7, r5
 800030c:	805a      	strh	r2, [r3, #2]
		HAL_ADC_Stop(&hadc1);
 800030e:	4b0e      	ldr	r3, [pc, #56]	@ (8000348 <StartSoilSensorTask+0xd0>)
 8000310:	0018      	movs	r0, r3
 8000312:	f001 f85d 	bl	80013d0 <HAL_ADC_Stop>
		osMutexAcquire(dataMutex, osWaitForever);
 8000316:	4b0e      	ldr	r3, [pc, #56]	@ (8000350 <StartSoilSensorTask+0xd8>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	2201      	movs	r2, #1
 800031c:	4252      	negs	r2, r2
 800031e:	0011      	movs	r1, r2
 8000320:	0018      	movs	r0, r3
 8000322:	f003 fb6d 	bl	8003a00 <osMutexAcquire>
		sensorData = localData;
 8000326:	4b0b      	ldr	r3, [pc, #44]	@ (8000354 <StartSoilSensorTask+0xdc>)
 8000328:	197a      	adds	r2, r7, r5
 800032a:	6812      	ldr	r2, [r2, #0]
 800032c:	601a      	str	r2, [r3, #0]
		osMutexRelease(dataMutex);
 800032e:	4b08      	ldr	r3, [pc, #32]	@ (8000350 <StartSoilSensorTask+0xd8>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	0018      	movs	r0, r3
 8000334:	f003 fbb1 	bl	8003a9a <osMutexRelease>
		osDelay(1000);
 8000338:	23fa      	movs	r3, #250	@ 0xfa
 800033a:	009b      	lsls	r3, r3, #2
 800033c:	0018      	movs	r0, r3
 800033e:	f003 fb45 	bl	80039cc <osDelay>
	for (;;) {
 8000342:	46c0      	nop			@ (mov r8, r8)
 8000344:	e79c      	b.n	8000280 <StartSoilSensorTask+0x8>
 8000346:	46c0      	nop			@ (mov r8, r8)
 8000348:	20000064 	.word	0x20000064
 800034c:	04000002 	.word	0x04000002
 8000350:	20000048 	.word	0x20000048
 8000354:	20000044 	.word	0x20000044

08000358 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800035c:	f000 fca6 	bl	8000cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000360:	f000 f836 	bl	80003d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000364:	f000 f8ee 	bl	8000544 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000368:	f000 f87a 	bl	8000460 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 800036c:	4b16      	ldr	r3, [pc, #88]	@ (80003c8 <main+0x70>)
 800036e:	0018      	movs	r0, r3
 8000370:	f000 ffe0 	bl	8001334 <HAL_ADC_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000374:	f003 fa46 	bl	8003804 <osKernelInitialize>

  /* Call init function for freertos objects (in app_freertos.c) */
  MX_FREERTOS_Init();
 8000378:	f7ff ff52 	bl	8000220 <MX_FREERTOS_Init>

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800037c:	2000      	movs	r0, #0
 800037e:	f000 fabd 	bl	80008fc <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000382:	2101      	movs	r1, #1
 8000384:	2000      	movs	r0, #0
 8000386:	f000 fb23 	bl	80009d0 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800038a:	4b10      	ldr	r3, [pc, #64]	@ (80003cc <main+0x74>)
 800038c:	22e1      	movs	r2, #225	@ 0xe1
 800038e:	0252      	lsls	r2, r2, #9
 8000390:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000392:	4b0e      	ldr	r3, [pc, #56]	@ (80003cc <main+0x74>)
 8000394:	2200      	movs	r2, #0
 8000396:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000398:	4b0c      	ldr	r3, [pc, #48]	@ (80003cc <main+0x74>)
 800039a:	2200      	movs	r2, #0
 800039c:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800039e:	4b0b      	ldr	r3, [pc, #44]	@ (80003cc <main+0x74>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80003a4:	4b09      	ldr	r3, [pc, #36]	@ (80003cc <main+0x74>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80003aa:	4b08      	ldr	r3, [pc, #32]	@ (80003cc <main+0x74>)
 80003ac:	0019      	movs	r1, r3
 80003ae:	2000      	movs	r0, #0
 80003b0:	f000 fbb4 	bl	8000b1c <BSP_COM_Init>
 80003b4:	1e03      	subs	r3, r0, #0
 80003b6:	d001      	beq.n	80003bc <main+0x64>
  {
    Error_Handler();
 80003b8:	f000 f95c 	bl	8000674 <Error_Handler>
  }

  /* Start scheduler */
  osKernelStart();
 80003bc:	f003 fa48 	bl	8003850 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

   osKernelStart();
 80003c0:	f003 fa46 	bl	8003850 <osKernelStart>

  while (1)
 80003c4:	46c0      	nop			@ (mov r8, r8)
 80003c6:	e7fd      	b.n	80003c4 <main+0x6c>
 80003c8:	20000064 	.word	0x20000064
 80003cc:	20000054 	.word	0x20000054

080003d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d0:	b590      	push	{r4, r7, lr}
 80003d2:	b08d      	sub	sp, #52	@ 0x34
 80003d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003d6:	2414      	movs	r4, #20
 80003d8:	193b      	adds	r3, r7, r4
 80003da:	0018      	movs	r0, r3
 80003dc:	231c      	movs	r3, #28
 80003de:	001a      	movs	r2, r3
 80003e0:	2100      	movs	r1, #0
 80003e2:	f006 f87f 	bl	80064e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e6:	003b      	movs	r3, r7
 80003e8:	0018      	movs	r0, r3
 80003ea:	2314      	movs	r3, #20
 80003ec:	001a      	movs	r2, r3
 80003ee:	2100      	movs	r1, #0
 80003f0:	f006 f878 	bl	80064e4 <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 80003f4:	4b19      	ldr	r3, [pc, #100]	@ (800045c <SystemClock_Config+0x8c>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	2207      	movs	r2, #7
 80003fa:	4393      	bics	r3, r2
 80003fc:	001a      	movs	r2, r3
 80003fe:	4b17      	ldr	r3, [pc, #92]	@ (800045c <SystemClock_Config+0x8c>)
 8000400:	2101      	movs	r1, #1
 8000402:	430a      	orrs	r2, r1
 8000404:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000406:	193b      	adds	r3, r7, r4
 8000408:	2201      	movs	r2, #1
 800040a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800040c:	193b      	adds	r3, r7, r4
 800040e:	2280      	movs	r2, #128	@ 0x80
 8000410:	0252      	lsls	r2, r2, #9
 8000412:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000414:	193b      	adds	r3, r7, r4
 8000416:	0018      	movs	r0, r3
 8000418:	f001 fe64 	bl	80020e4 <HAL_RCC_OscConfig>
 800041c:	1e03      	subs	r3, r0, #0
 800041e:	d001      	beq.n	8000424 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000420:	f000 f928 	bl	8000674 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000424:	003b      	movs	r3, r7
 8000426:	2207      	movs	r2, #7
 8000428:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800042a:	003b      	movs	r3, r7
 800042c:	2201      	movs	r2, #1
 800042e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000430:	003b      	movs	r3, r7
 8000432:	2200      	movs	r2, #0
 8000434:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000436:	003b      	movs	r3, r7
 8000438:	2200      	movs	r2, #0
 800043a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800043c:	003b      	movs	r3, r7
 800043e:	2200      	movs	r2, #0
 8000440:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000442:	003b      	movs	r3, r7
 8000444:	2101      	movs	r1, #1
 8000446:	0018      	movs	r0, r3
 8000448:	f002 f830 	bl	80024ac <HAL_RCC_ClockConfig>
 800044c:	1e03      	subs	r3, r0, #0
 800044e:	d001      	beq.n	8000454 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000450:	f000 f910 	bl	8000674 <Error_Handler>
  }
}
 8000454:	46c0      	nop			@ (mov r8, r8)
 8000456:	46bd      	mov	sp, r7
 8000458:	b00d      	add	sp, #52	@ 0x34
 800045a:	bd90      	pop	{r4, r7, pc}
 800045c:	40022000 	.word	0x40022000

08000460 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b084      	sub	sp, #16
 8000464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	0018      	movs	r0, r3
 800046a:	230c      	movs	r3, #12
 800046c:	001a      	movs	r2, r3
 800046e:	2100      	movs	r1, #0
 8000470:	f006 f838 	bl	80064e4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000474:	4b2f      	ldr	r3, [pc, #188]	@ (8000534 <MX_ADC1_Init+0xd4>)
 8000476:	4a30      	ldr	r2, [pc, #192]	@ (8000538 <MX_ADC1_Init+0xd8>)
 8000478:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800047a:	4b2e      	ldr	r3, [pc, #184]	@ (8000534 <MX_ADC1_Init+0xd4>)
 800047c:	2280      	movs	r2, #128	@ 0x80
 800047e:	05d2      	lsls	r2, r2, #23
 8000480:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000482:	4b2c      	ldr	r3, [pc, #176]	@ (8000534 <MX_ADC1_Init+0xd4>)
 8000484:	2200      	movs	r2, #0
 8000486:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000488:	4b2a      	ldr	r3, [pc, #168]	@ (8000534 <MX_ADC1_Init+0xd4>)
 800048a:	2200      	movs	r2, #0
 800048c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 800048e:	4b29      	ldr	r3, [pc, #164]	@ (8000534 <MX_ADC1_Init+0xd4>)
 8000490:	2280      	movs	r2, #128	@ 0x80
 8000492:	0612      	lsls	r2, r2, #24
 8000494:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000496:	4b27      	ldr	r3, [pc, #156]	@ (8000534 <MX_ADC1_Init+0xd4>)
 8000498:	2204      	movs	r2, #4
 800049a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800049c:	4b25      	ldr	r3, [pc, #148]	@ (8000534 <MX_ADC1_Init+0xd4>)
 800049e:	2200      	movs	r2, #0
 80004a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80004a2:	4b24      	ldr	r3, [pc, #144]	@ (8000534 <MX_ADC1_Init+0xd4>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80004a8:	4b22      	ldr	r3, [pc, #136]	@ (8000534 <MX_ADC1_Init+0xd4>)
 80004aa:	2201      	movs	r2, #1
 80004ac:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80004ae:	4b21      	ldr	r3, [pc, #132]	@ (8000534 <MX_ADC1_Init+0xd4>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000534 <MX_ADC1_Init+0xd4>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000534 <MX_ADC1_Init+0xd4>)
 80004bc:	2200      	movs	r2, #0
 80004be:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80004c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000534 <MX_ADC1_Init+0xd4>)
 80004c2:	222c      	movs	r2, #44	@ 0x2c
 80004c4:	2100      	movs	r1, #0
 80004c6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000534 <MX_ADC1_Init+0xd4>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80004ce:	4b19      	ldr	r3, [pc, #100]	@ (8000534 <MX_ADC1_Init+0xd4>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80004d4:	4b17      	ldr	r3, [pc, #92]	@ (8000534 <MX_ADC1_Init+0xd4>)
 80004d6:	223c      	movs	r2, #60	@ 0x3c
 80004d8:	2100      	movs	r1, #0
 80004da:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80004dc:	4b15      	ldr	r3, [pc, #84]	@ (8000534 <MX_ADC1_Init+0xd4>)
 80004de:	2200      	movs	r2, #0
 80004e0:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004e2:	4b14      	ldr	r3, [pc, #80]	@ (8000534 <MX_ADC1_Init+0xd4>)
 80004e4:	0018      	movs	r0, r3
 80004e6:	f000 fd7f 	bl	8000fe8 <HAL_ADC_Init>
 80004ea:	1e03      	subs	r3, r0, #0
 80004ec:	d001      	beq.n	80004f2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80004ee:	f000 f8c1 	bl	8000674 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	4a11      	ldr	r2, [pc, #68]	@ (800053c <MX_ADC1_Init+0xdc>)
 80004f6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	2201      	movs	r2, #1
 80004fc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004fe:	1d3a      	adds	r2, r7, #4
 8000500:	4b0c      	ldr	r3, [pc, #48]	@ (8000534 <MX_ADC1_Init+0xd4>)
 8000502:	0011      	movs	r1, r2
 8000504:	0018      	movs	r0, r3
 8000506:	f001 f839 	bl	800157c <HAL_ADC_ConfigChannel>
 800050a:	1e03      	subs	r3, r0, #0
 800050c:	d001      	beq.n	8000512 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800050e:	f000 f8b1 	bl	8000674 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000512:	1d3b      	adds	r3, r7, #4
 8000514:	4a0a      	ldr	r2, [pc, #40]	@ (8000540 <MX_ADC1_Init+0xe0>)
 8000516:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000518:	1d3a      	adds	r2, r7, #4
 800051a:	4b06      	ldr	r3, [pc, #24]	@ (8000534 <MX_ADC1_Init+0xd4>)
 800051c:	0011      	movs	r1, r2
 800051e:	0018      	movs	r0, r3
 8000520:	f001 f82c 	bl	800157c <HAL_ADC_ConfigChannel>
 8000524:	1e03      	subs	r3, r0, #0
 8000526:	d001      	beq.n	800052c <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000528:	f000 f8a4 	bl	8000674 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800052c:	46c0      	nop			@ (mov r8, r8)
 800052e:	46bd      	mov	sp, r7
 8000530:	b004      	add	sp, #16
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000064 	.word	0x20000064
 8000538:	40012400 	.word	0x40012400
 800053c:	2c000800 	.word	0x2c000800
 8000540:	30001000 	.word	0x30001000

08000544 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000544:	b590      	push	{r4, r7, lr}
 8000546:	b08b      	sub	sp, #44	@ 0x2c
 8000548:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054a:	2414      	movs	r4, #20
 800054c:	193b      	adds	r3, r7, r4
 800054e:	0018      	movs	r0, r3
 8000550:	2314      	movs	r3, #20
 8000552:	001a      	movs	r2, r3
 8000554:	2100      	movs	r1, #0
 8000556:	f005 ffc5 	bl	80064e4 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800055a:	4b3b      	ldr	r3, [pc, #236]	@ (8000648 <MX_GPIO_Init+0x104>)
 800055c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800055e:	4b3a      	ldr	r3, [pc, #232]	@ (8000648 <MX_GPIO_Init+0x104>)
 8000560:	2104      	movs	r1, #4
 8000562:	430a      	orrs	r2, r1
 8000564:	635a      	str	r2, [r3, #52]	@ 0x34
 8000566:	4b38      	ldr	r3, [pc, #224]	@ (8000648 <MX_GPIO_Init+0x104>)
 8000568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800056a:	2204      	movs	r2, #4
 800056c:	4013      	ands	r3, r2
 800056e:	613b      	str	r3, [r7, #16]
 8000570:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000572:	4b35      	ldr	r3, [pc, #212]	@ (8000648 <MX_GPIO_Init+0x104>)
 8000574:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000576:	4b34      	ldr	r3, [pc, #208]	@ (8000648 <MX_GPIO_Init+0x104>)
 8000578:	2120      	movs	r1, #32
 800057a:	430a      	orrs	r2, r1
 800057c:	635a      	str	r2, [r3, #52]	@ 0x34
 800057e:	4b32      	ldr	r3, [pc, #200]	@ (8000648 <MX_GPIO_Init+0x104>)
 8000580:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000582:	2220      	movs	r2, #32
 8000584:	4013      	ands	r3, r2
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058a:	4b2f      	ldr	r3, [pc, #188]	@ (8000648 <MX_GPIO_Init+0x104>)
 800058c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800058e:	4b2e      	ldr	r3, [pc, #184]	@ (8000648 <MX_GPIO_Init+0x104>)
 8000590:	2101      	movs	r1, #1
 8000592:	430a      	orrs	r2, r1
 8000594:	635a      	str	r2, [r3, #52]	@ 0x34
 8000596:	4b2c      	ldr	r3, [pc, #176]	@ (8000648 <MX_GPIO_Init+0x104>)
 8000598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800059a:	2201      	movs	r2, #1
 800059c:	4013      	ands	r3, r2
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a2:	4b29      	ldr	r3, [pc, #164]	@ (8000648 <MX_GPIO_Init+0x104>)
 80005a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005a6:	4b28      	ldr	r3, [pc, #160]	@ (8000648 <MX_GPIO_Init+0x104>)
 80005a8:	2102      	movs	r1, #2
 80005aa:	430a      	orrs	r2, r1
 80005ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80005ae:	4b26      	ldr	r3, [pc, #152]	@ (8000648 <MX_GPIO_Init+0x104>)
 80005b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005b2:	2202      	movs	r2, #2
 80005b4:	4013      	ands	r3, r2
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_4, GPIO_PIN_RESET);
 80005ba:	23a0      	movs	r3, #160	@ 0xa0
 80005bc:	05db      	lsls	r3, r3, #23
 80005be:	2200      	movs	r2, #0
 80005c0:	2111      	movs	r1, #17
 80005c2:	0018      	movs	r0, r3
 80005c4:	f001 fd70 	bl	80020a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80005c8:	4b20      	ldr	r3, [pc, #128]	@ (800064c <MX_GPIO_Init+0x108>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	2102      	movs	r1, #2
 80005ce:	0018      	movs	r0, r3
 80005d0:	f001 fd6a 	bl	80020a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 80005d4:	193b      	adds	r3, r7, r4
 80005d6:	2211      	movs	r2, #17
 80005d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005da:	193b      	adds	r3, r7, r4
 80005dc:	2201      	movs	r2, #1
 80005de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	193b      	adds	r3, r7, r4
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e6:	193b      	adds	r3, r7, r4
 80005e8:	2200      	movs	r2, #0
 80005ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ec:	193a      	adds	r2, r7, r4
 80005ee:	23a0      	movs	r3, #160	@ 0xa0
 80005f0:	05db      	lsls	r3, r3, #23
 80005f2:	0011      	movs	r1, r2
 80005f4:	0018      	movs	r0, r3
 80005f6:	f001 fbe5 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80005fa:	193b      	adds	r3, r7, r4
 80005fc:	2240      	movs	r2, #64	@ 0x40
 80005fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000600:	193b      	adds	r3, r7, r4
 8000602:	2200      	movs	r2, #0
 8000604:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	193b      	adds	r3, r7, r4
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060c:	193a      	adds	r2, r7, r4
 800060e:	23a0      	movs	r3, #160	@ 0xa0
 8000610:	05db      	lsls	r3, r3, #23
 8000612:	0011      	movs	r1, r2
 8000614:	0018      	movs	r0, r3
 8000616:	f001 fbd5 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800061a:	0021      	movs	r1, r4
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2202      	movs	r2, #2
 8000620:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2201      	movs	r2, #1
 8000626:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000634:	187b      	adds	r3, r7, r1
 8000636:	4a05      	ldr	r2, [pc, #20]	@ (800064c <MX_GPIO_Init+0x108>)
 8000638:	0019      	movs	r1, r3
 800063a:	0010      	movs	r0, r2
 800063c:	f001 fbc2 	bl	8001dc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000640:	46c0      	nop			@ (mov r8, r8)
 8000642:	46bd      	mov	sp, r7
 8000644:	b00b      	add	sp, #44	@ 0x2c
 8000646:	bd90      	pop	{r4, r7, pc}
 8000648:	40021000 	.word	0x40021000
 800064c:	50000400 	.word	0x50000400

08000650 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a04      	ldr	r2, [pc, #16]	@ (8000670 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d101      	bne.n	8000666 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000662:	f000 fb3b 	bl	8000cdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000666:	46c0      	nop			@ (mov r8, r8)
 8000668:	46bd      	mov	sp, r7
 800066a:	b002      	add	sp, #8
 800066c:	bd80      	pop	{r7, pc}
 800066e:	46c0      	nop			@ (mov r8, r8)
 8000670:	40000400 	.word	0x40000400

08000674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000678:	b672      	cpsid	i
}
 800067a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800067c:	46c0      	nop			@ (mov r8, r8)
 800067e:	e7fd      	b.n	800067c <Error_Handler+0x8>

08000680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000686:	4b12      	ldr	r3, [pc, #72]	@ (80006d0 <HAL_MspInit+0x50>)
 8000688:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800068a:	4b11      	ldr	r3, [pc, #68]	@ (80006d0 <HAL_MspInit+0x50>)
 800068c:	2101      	movs	r1, #1
 800068e:	430a      	orrs	r2, r1
 8000690:	641a      	str	r2, [r3, #64]	@ 0x40
 8000692:	4b0f      	ldr	r3, [pc, #60]	@ (80006d0 <HAL_MspInit+0x50>)
 8000694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000696:	2201      	movs	r2, #1
 8000698:	4013      	ands	r3, r2
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069e:	4b0c      	ldr	r3, [pc, #48]	@ (80006d0 <HAL_MspInit+0x50>)
 80006a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80006a2:	4b0b      	ldr	r3, [pc, #44]	@ (80006d0 <HAL_MspInit+0x50>)
 80006a4:	2180      	movs	r1, #128	@ 0x80
 80006a6:	0549      	lsls	r1, r1, #21
 80006a8:	430a      	orrs	r2, r1
 80006aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80006ac:	4b08      	ldr	r3, [pc, #32]	@ (80006d0 <HAL_MspInit+0x50>)
 80006ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80006b0:	2380      	movs	r3, #128	@ 0x80
 80006b2:	055b      	lsls	r3, r3, #21
 80006b4:	4013      	ands	r3, r2
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80006ba:	2302      	movs	r3, #2
 80006bc:	425b      	negs	r3, r3
 80006be:	2200      	movs	r2, #0
 80006c0:	2103      	movs	r1, #3
 80006c2:	0018      	movs	r0, r3
 80006c4:	f001 faca 	bl	8001c5c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c8:	46c0      	nop			@ (mov r8, r8)
 80006ca:	46bd      	mov	sp, r7
 80006cc:	b002      	add	sp, #8
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40021000 	.word	0x40021000

080006d4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006d4:	b590      	push	{r4, r7, lr}
 80006d6:	b091      	sub	sp, #68	@ 0x44
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006dc:	232c      	movs	r3, #44	@ 0x2c
 80006de:	18fb      	adds	r3, r7, r3
 80006e0:	0018      	movs	r0, r3
 80006e2:	2314      	movs	r3, #20
 80006e4:	001a      	movs	r2, r3
 80006e6:	2100      	movs	r1, #0
 80006e8:	f005 fefc 	bl	80064e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006ec:	2410      	movs	r4, #16
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	0018      	movs	r0, r3
 80006f2:	231c      	movs	r3, #28
 80006f4:	001a      	movs	r2, r3
 80006f6:	2100      	movs	r1, #0
 80006f8:	f005 fef4 	bl	80064e4 <memset>
  if(hadc->Instance==ADC1)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a20      	ldr	r2, [pc, #128]	@ (8000784 <HAL_ADC_MspInit+0xb0>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d139      	bne.n	800077a <HAL_ADC_MspInit+0xa6>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000706:	193b      	adds	r3, r7, r4
 8000708:	2220      	movs	r2, #32
 800070a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800070c:	193b      	adds	r3, r7, r4
 800070e:	2200      	movs	r2, #0
 8000710:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000712:	193b      	adds	r3, r7, r4
 8000714:	0018      	movs	r0, r3
 8000716:	f002 f86d 	bl	80027f4 <HAL_RCCEx_PeriphCLKConfig>
 800071a:	1e03      	subs	r3, r0, #0
 800071c:	d001      	beq.n	8000722 <HAL_ADC_MspInit+0x4e>
    {
      Error_Handler();
 800071e:	f7ff ffa9 	bl	8000674 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000722:	4b19      	ldr	r3, [pc, #100]	@ (8000788 <HAL_ADC_MspInit+0xb4>)
 8000724:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000726:	4b18      	ldr	r3, [pc, #96]	@ (8000788 <HAL_ADC_MspInit+0xb4>)
 8000728:	2180      	movs	r1, #128	@ 0x80
 800072a:	0349      	lsls	r1, r1, #13
 800072c:	430a      	orrs	r2, r1
 800072e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000730:	4b15      	ldr	r3, [pc, #84]	@ (8000788 <HAL_ADC_MspInit+0xb4>)
 8000732:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000734:	2380      	movs	r3, #128	@ 0x80
 8000736:	035b      	lsls	r3, r3, #13
 8000738:	4013      	ands	r3, r2
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	4b12      	ldr	r3, [pc, #72]	@ (8000788 <HAL_ADC_MspInit+0xb4>)
 8000740:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000742:	4b11      	ldr	r3, [pc, #68]	@ (8000788 <HAL_ADC_MspInit+0xb4>)
 8000744:	2101      	movs	r1, #1
 8000746:	430a      	orrs	r2, r1
 8000748:	635a      	str	r2, [r3, #52]	@ 0x34
 800074a:	4b0f      	ldr	r3, [pc, #60]	@ (8000788 <HAL_ADC_MspInit+0xb4>)
 800074c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800074e:	2201      	movs	r2, #1
 8000750:	4013      	ands	r3, r2
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA11 [PA9]     ------> ADC1_IN11
    PA12 [PA10]     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000756:	212c      	movs	r1, #44	@ 0x2c
 8000758:	187b      	adds	r3, r7, r1
 800075a:	22c0      	movs	r2, #192	@ 0xc0
 800075c:	0152      	lsls	r2, r2, #5
 800075e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000760:	187b      	adds	r3, r7, r1
 8000762:	2203      	movs	r2, #3
 8000764:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	187b      	adds	r3, r7, r1
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076c:	187a      	adds	r2, r7, r1
 800076e:	23a0      	movs	r3, #160	@ 0xa0
 8000770:	05db      	lsls	r3, r3, #23
 8000772:	0011      	movs	r1, r2
 8000774:	0018      	movs	r0, r3
 8000776:	f001 fb25 	bl	8001dc4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800077a:	46c0      	nop			@ (mov r8, r8)
 800077c:	46bd      	mov	sp, r7
 800077e:	b011      	add	sp, #68	@ 0x44
 8000780:	bd90      	pop	{r4, r7, pc}
 8000782:	46c0      	nop			@ (mov r8, r8)
 8000784:	40012400 	.word	0x40012400
 8000788:	40021000 	.word	0x40021000

0800078c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08c      	sub	sp, #48	@ 0x30
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  /*Configure the TIM3 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2b03      	cmp	r3, #3
 80007a0:	d841      	bhi.n	8000826 <HAL_InitTick+0x9a>
   {
     HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2200      	movs	r2, #0
 80007a6:	0019      	movs	r1, r3
 80007a8:	2010      	movs	r0, #16
 80007aa:	f001 fa57 	bl	8001c5c <HAL_NVIC_SetPriority>

     /* Enable the TIM3 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80007ae:	2010      	movs	r0, #16
 80007b0:	f001 fa69 	bl	8001c86 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80007b4:	4b22      	ldr	r3, [pc, #136]	@ (8000840 <HAL_InitTick+0xb4>)
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80007ba:	4b22      	ldr	r3, [pc, #136]	@ (8000844 <HAL_InitTick+0xb8>)
 80007bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007be:	4b21      	ldr	r3, [pc, #132]	@ (8000844 <HAL_InitTick+0xb8>)
 80007c0:	2102      	movs	r1, #2
 80007c2:	430a      	orrs	r2, r1
 80007c4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80007c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000844 <HAL_InitTick+0xb8>)
 80007c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80007ca:	2202      	movs	r2, #2
 80007cc:	4013      	ands	r3, r2
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007d2:	2310      	movs	r3, #16
 80007d4:	18fa      	adds	r2, r7, r3
 80007d6:	2314      	movs	r3, #20
 80007d8:	18fb      	adds	r3, r7, r3
 80007da:	0011      	movs	r1, r2
 80007dc:	0018      	movs	r0, r3
 80007de:	f001 ffdb 	bl	8002798 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007e2:	f001 ffc1 	bl	8002768 <HAL_RCC_GetPCLK1Freq>
 80007e6:	0003      	movs	r3, r0
 80007e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007ec:	4916      	ldr	r1, [pc, #88]	@ (8000848 <HAL_InitTick+0xbc>)
 80007ee:	0018      	movs	r0, r3
 80007f0:	f7ff fc8a 	bl	8000108 <__udivsi3>
 80007f4:	0003      	movs	r3, r0
 80007f6:	3b01      	subs	r3, #1
 80007f8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80007fa:	4b14      	ldr	r3, [pc, #80]	@ (800084c <HAL_InitTick+0xc0>)
 80007fc:	4a14      	ldr	r2, [pc, #80]	@ (8000850 <HAL_InitTick+0xc4>)
 80007fe:	601a      	str	r2, [r3, #0]
   * Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000800:	4b12      	ldr	r3, [pc, #72]	@ (800084c <HAL_InitTick+0xc0>)
 8000802:	4a14      	ldr	r2, [pc, #80]	@ (8000854 <HAL_InitTick+0xc8>)
 8000804:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000806:	4b11      	ldr	r3, [pc, #68]	@ (800084c <HAL_InitTick+0xc0>)
 8000808:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800080a:	605a      	str	r2, [r3, #4]
  htim3.Init.ClockDivision = 0;
 800080c:	4b0f      	ldr	r3, [pc, #60]	@ (800084c <HAL_InitTick+0xc0>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000812:	4b0e      	ldr	r3, [pc, #56]	@ (800084c <HAL_InitTick+0xc0>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8000818:	4b0c      	ldr	r3, [pc, #48]	@ (800084c <HAL_InitTick+0xc0>)
 800081a:	0018      	movs	r0, r3
 800081c:	f002 f8d6 	bl	80029cc <HAL_TIM_Base_Init>
 8000820:	1e03      	subs	r3, r0, #0
 8000822:	d108      	bne.n	8000836 <HAL_InitTick+0xaa>
 8000824:	e001      	b.n	800082a <HAL_InitTick+0x9e>
    return HAL_ERROR;
 8000826:	2301      	movs	r3, #1
 8000828:	e006      	b.n	8000838 <HAL_InitTick+0xac>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 800082a:	4b08      	ldr	r3, [pc, #32]	@ (800084c <HAL_InitTick+0xc0>)
 800082c:	0018      	movs	r0, r3
 800082e:	f002 f92d 	bl	8002a8c <HAL_TIM_Base_Start_IT>
 8000832:	0003      	movs	r3, r0
 8000834:	e000      	b.n	8000838 <HAL_InitTick+0xac>
  }

  /* Return function status */
  return HAL_ERROR;
 8000836:	2301      	movs	r3, #1
}
 8000838:	0018      	movs	r0, r3
 800083a:	46bd      	mov	sp, r7
 800083c:	b00c      	add	sp, #48	@ 0x30
 800083e:	bd80      	pop	{r7, pc}
 8000840:	2000001c 	.word	0x2000001c
 8000844:	40021000 	.word	0x40021000
 8000848:	000f4240 	.word	0x000f4240
 800084c:	200000c8 	.word	0x200000c8
 8000850:	40000400 	.word	0x40000400
 8000854:	000003e7 	.word	0x000003e7

08000858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800085c:	46c0      	nop			@ (mov r8, r8)
 800085e:	e7fd      	b.n	800085c <NMI_Handler+0x4>

08000860 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000864:	46c0      	nop			@ (mov r8, r8)
 8000866:	e7fd      	b.n	8000864 <HardFault_Handler+0x4>

08000868 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800086c:	2000      	movs	r0, #0
 800086e:	f000 f933 	bl	8000ad8 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000872:	46c0      	nop			@ (mov r8, r8)
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800087c:	4b03      	ldr	r3, [pc, #12]	@ (800088c <TIM3_IRQHandler+0x14>)
 800087e:	0018      	movs	r0, r3
 8000880:	f002 f952 	bl	8002b28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000884:	46c0      	nop			@ (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			@ (mov r8, r8)
 800088c:	200000c8 	.word	0x200000c8

08000890 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000894:	4b03      	ldr	r3, [pc, #12]	@ (80008a4 <SystemInit+0x14>)
 8000896:	2280      	movs	r2, #128	@ 0x80
 8000898:	0512      	lsls	r2, r2, #20
 800089a:	609a      	str	r2, [r3, #8]
#endif
}
 800089c:	46c0      	nop			@ (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	46c0      	nop			@ (mov r8, r8)
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008a8:	480d      	ldr	r0, [pc, #52]	@ (80008e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008ac:	f7ff fff0 	bl	8000890 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80008b0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80008b2:	e003      	b.n	80008bc <LoopCopyDataInit>

080008b4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80008b4:	4b0b      	ldr	r3, [pc, #44]	@ (80008e4 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80008b6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80008b8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80008ba:	3104      	adds	r1, #4

080008bc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80008bc:	480a      	ldr	r0, [pc, #40]	@ (80008e8 <LoopForever+0xa>)
  ldr r3, =_edata
 80008be:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <LoopForever+0xe>)
  adds r2, r0, r1
 80008c0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80008c2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80008c4:	d3f6      	bcc.n	80008b4 <CopyDataInit>
  ldr r2, =_sbss
 80008c6:	4a0a      	ldr	r2, [pc, #40]	@ (80008f0 <LoopForever+0x12>)
  b LoopFillZerobss
 80008c8:	e002      	b.n	80008d0 <LoopFillZerobss>

080008ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80008ca:	2300      	movs	r3, #0
  str  r3, [r2]
 80008cc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008ce:	3204      	adds	r2, #4

080008d0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80008d0:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <LoopForever+0x16>)
  cmp r2, r3
 80008d2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80008d4:	d3f9      	bcc.n	80008ca <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80008d6:	f005 fe0d 	bl	80064f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008da:	f7ff fd3d 	bl	8000358 <main>

080008de <LoopForever>:

LoopForever:
    b LoopForever
 80008de:	e7fe      	b.n	80008de <LoopForever>
  ldr   r0, =_estack
 80008e0:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 80008e4:	08006698 	.word	0x08006698
  ldr r0, =_sdata
 80008e8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80008ec:	20000028 	.word	0x20000028
  ldr r2, =_sbss
 80008f0:	20000028 	.word	0x20000028
  ldr r3, = _ebss
 80008f4:	20001cfc 	.word	0x20001cfc

080008f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008f8:	e7fe      	b.n	80008f8 <ADC1_IRQHandler>
	...

080008fc <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	@ 0x28
 8000900:	af00      	add	r7, sp, #0
 8000902:	0002      	movs	r2, r0
 8000904:	1dfb      	adds	r3, r7, #7
 8000906:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;

#if defined (USE_NUCLEO_64)
  if ((Led != LED1)
 800090c:	1dfb      	adds	r3, r7, #7
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d007      	beq.n	8000924 <BSP_LED_Init+0x28>
      && (Led != LED2))
 8000914:	1dfb      	adds	r3, r7, #7
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d003      	beq.n	8000924 <BSP_LED_Init+0x28>
#else
  if (Led != LED4)
#endif /* defined (USE_NUCLEO_64) */
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800091c:	2302      	movs	r3, #2
 800091e:	425b      	negs	r3, r3
 8000920:	627b      	str	r3, [r7, #36]	@ 0x24
 8000922:	e04a      	b.n	80009ba <BSP_LED_Init+0xbe>
  }
  else
  {
    /* Enable the GPIO LED Clock */
#if defined (USE_NUCLEO_64)
    if (Led == LED1)
 8000924:	1dfb      	adds	r3, r7, #7
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d10c      	bne.n	8000946 <BSP_LED_Init+0x4a>
    {
      LED1_GPIO_CLK_ENABLE();
 800092c:	4b25      	ldr	r3, [pc, #148]	@ (80009c4 <BSP_LED_Init+0xc8>)
 800092e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000930:	4b24      	ldr	r3, [pc, #144]	@ (80009c4 <BSP_LED_Init+0xc8>)
 8000932:	2101      	movs	r1, #1
 8000934:	430a      	orrs	r2, r1
 8000936:	635a      	str	r2, [r3, #52]	@ 0x34
 8000938:	4b22      	ldr	r3, [pc, #136]	@ (80009c4 <BSP_LED_Init+0xc8>)
 800093a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800093c:	2201      	movs	r2, #1
 800093e:	4013      	ands	r3, r2
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	e00b      	b.n	800095e <BSP_LED_Init+0x62>
    }
    else
    {
      LED2_GPIO_CLK_ENABLE();
 8000946:	4b1f      	ldr	r3, [pc, #124]	@ (80009c4 <BSP_LED_Init+0xc8>)
 8000948:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800094a:	4b1e      	ldr	r3, [pc, #120]	@ (80009c4 <BSP_LED_Init+0xc8>)
 800094c:	2104      	movs	r1, #4
 800094e:	430a      	orrs	r2, r1
 8000950:	635a      	str	r2, [r3, #52]	@ 0x34
 8000952:	4b1c      	ldr	r3, [pc, #112]	@ (80009c4 <BSP_LED_Init+0xc8>)
 8000954:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000956:	2204      	movs	r2, #4
 8000958:	4013      	ands	r3, r2
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
      LED4_GPIO_CLK_ENABLE();
    }
#endif /* defined (USE_NUCLEO_64) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800095e:	1dfb      	adds	r3, r7, #7
 8000960:	781a      	ldrb	r2, [r3, #0]
 8000962:	4b19      	ldr	r3, [pc, #100]	@ (80009c8 <BSP_LED_Init+0xcc>)
 8000964:	0052      	lsls	r2, r2, #1
 8000966:	5ad3      	ldrh	r3, [r2, r3]
 8000968:	001a      	movs	r2, r3
 800096a:	2110      	movs	r1, #16
 800096c:	187b      	adds	r3, r7, r1
 800096e:	601a      	str	r2, [r3, #0]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000970:	187b      	adds	r3, r7, r1
 8000972:	2201      	movs	r2, #1
 8000974:	605a      	str	r2, [r3, #4]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000976:	187b      	adds	r3, r7, r1
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097c:	187b      	adds	r3, r7, r1
 800097e:	2203      	movs	r2, #3
 8000980:	60da      	str	r2, [r3, #12]

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000982:	1dfb      	adds	r3, r7, #7
 8000984:	781a      	ldrb	r2, [r3, #0]
 8000986:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <BSP_LED_Init+0xd0>)
 8000988:	0092      	lsls	r2, r2, #2
 800098a:	58d3      	ldr	r3, [r2, r3]
 800098c:	187a      	adds	r2, r7, r1
 800098e:	0011      	movs	r1, r2
 8000990:	0018      	movs	r0, r3
 8000992:	f001 fa17 	bl	8001dc4 <HAL_GPIO_Init>
#if defined (USE_NUCLEO_64)
    if (Led == LED2)
 8000996:	1dfb      	adds	r3, r7, #7
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d10d      	bne.n	80009ba <BSP_LED_Init+0xbe>
    {
     HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN[Led], GPIO_PIN_SET);
 800099e:	1dfb      	adds	r3, r7, #7
 80009a0:	781a      	ldrb	r2, [r3, #0]
 80009a2:	4b0a      	ldr	r3, [pc, #40]	@ (80009cc <BSP_LED_Init+0xd0>)
 80009a4:	0092      	lsls	r2, r2, #2
 80009a6:	58d0      	ldr	r0, [r2, r3]
 80009a8:	1dfb      	adds	r3, r7, #7
 80009aa:	781a      	ldrb	r2, [r3, #0]
 80009ac:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <BSP_LED_Init+0xcc>)
 80009ae:	0052      	lsls	r2, r2, #1
 80009b0:	5ad3      	ldrh	r3, [r2, r3]
 80009b2:	2201      	movs	r2, #1
 80009b4:	0019      	movs	r1, r3
 80009b6:	f001 fb77 	bl	80020a8 <HAL_GPIO_WritePin>
    }
#endif
  }
  return ret;
 80009ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80009bc:	0018      	movs	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	b00a      	add	sp, #40	@ 0x28
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40021000 	.word	0x40021000
 80009c8:	08006644 	.word	0x08006644
 80009cc:	20000008 	.word	0x20000008

080009d0 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b088      	sub	sp, #32
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	0002      	movs	r2, r0
 80009d8:	1dfb      	adds	r3, r7, #7
 80009da:	701a      	strb	r2, [r3, #0]
 80009dc:	1dbb      	adds	r3, r7, #6
 80009de:	1c0a      	adds	r2, r1, #0
 80009e0:	701a      	strb	r2, [r3, #0]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80009e2:	4b36      	ldr	r3, [pc, #216]	@ (8000abc <BSP_PB_Init+0xec>)
 80009e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009e6:	4b35      	ldr	r3, [pc, #212]	@ (8000abc <BSP_PB_Init+0xec>)
 80009e8:	2104      	movs	r1, #4
 80009ea:	430a      	orrs	r2, r1
 80009ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80009ee:	4b33      	ldr	r3, [pc, #204]	@ (8000abc <BSP_PB_Init+0xec>)
 80009f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009f2:	2204      	movs	r2, #4
 80009f4:	4013      	ands	r3, r2
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80009fa:	2380      	movs	r3, #128	@ 0x80
 80009fc:	019b      	lsls	r3, r3, #6
 80009fe:	001a      	movs	r2, r3
 8000a00:	210c      	movs	r1, #12
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	601a      	str	r2, [r3, #0]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2201      	movs	r2, #1
 8000a0a:	609a      	str	r2, [r3, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	2202      	movs	r2, #2
 8000a10:	60da      	str	r2, [r3, #12]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8000a12:	1dbb      	adds	r3, r7, #6
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d10d      	bne.n	8000a36 <BSP_PB_Init+0x66>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000a20:	1dfb      	adds	r3, r7, #7
 8000a22:	781a      	ldrb	r2, [r3, #0]
 8000a24:	4b26      	ldr	r3, [pc, #152]	@ (8000ac0 <BSP_PB_Init+0xf0>)
 8000a26:	0092      	lsls	r2, r2, #2
 8000a28:	58d3      	ldr	r3, [r2, r3]
 8000a2a:	187a      	adds	r2, r7, r1
 8000a2c:	0011      	movs	r1, r2
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f001 f9c8 	bl	8001dc4 <HAL_GPIO_Init>
 8000a34:	e03c      	b.n	8000ab0 <BSP_PB_Init+0xe0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8000a36:	210c      	movs	r1, #12
 8000a38:	187b      	adds	r3, r7, r1
 8000a3a:	4a22      	ldr	r2, [pc, #136]	@ (8000ac4 <BSP_PB_Init+0xf4>)
 8000a3c:	605a      	str	r2, [r3, #4]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000a3e:	1dfb      	adds	r3, r7, #7
 8000a40:	781a      	ldrb	r2, [r3, #0]
 8000a42:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac0 <BSP_PB_Init+0xf0>)
 8000a44:	0092      	lsls	r2, r2, #2
 8000a46:	58d3      	ldr	r3, [r2, r3]
 8000a48:	187a      	adds	r2, r7, r1
 8000a4a:	0011      	movs	r1, r2
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f001 f9b9 	bl	8001dc4 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000a52:	1dfb      	adds	r3, r7, #7
 8000a54:	781a      	ldrb	r2, [r3, #0]
 8000a56:	0013      	movs	r3, r2
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	189b      	adds	r3, r3, r2
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	4a1a      	ldr	r2, [pc, #104]	@ (8000ac8 <BSP_PB_Init+0xf8>)
 8000a60:	1898      	adds	r0, r3, r2
 8000a62:	1dfb      	adds	r3, r7, #7
 8000a64:	781a      	ldrb	r2, [r3, #0]
 8000a66:	4b19      	ldr	r3, [pc, #100]	@ (8000acc <BSP_PB_Init+0xfc>)
 8000a68:	0092      	lsls	r2, r2, #2
 8000a6a:	58d3      	ldr	r3, [r2, r3]
 8000a6c:	0019      	movs	r1, r3
 8000a6e:	f001 f94c 	bl	8001d0a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000a72:	1dfb      	adds	r3, r7, #7
 8000a74:	781a      	ldrb	r2, [r3, #0]
 8000a76:	0013      	movs	r3, r2
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	189b      	adds	r3, r3, r2
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	4a12      	ldr	r2, [pc, #72]	@ (8000ac8 <BSP_PB_Init+0xf8>)
 8000a80:	1898      	adds	r0, r3, r2
 8000a82:	1dfb      	adds	r3, r7, #7
 8000a84:	781a      	ldrb	r2, [r3, #0]
 8000a86:	4b12      	ldr	r3, [pc, #72]	@ (8000ad0 <BSP_PB_Init+0x100>)
 8000a88:	0092      	lsls	r2, r2, #2
 8000a8a:	58d3      	ldr	r3, [r2, r3]
 8000a8c:	001a      	movs	r2, r3
 8000a8e:	2100      	movs	r1, #0
 8000a90:	f001 f909 	bl	8001ca6 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000a94:	2007      	movs	r0, #7
 8000a96:	1dfb      	adds	r3, r7, #7
 8000a98:	781a      	ldrb	r2, [r3, #0]
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad4 <BSP_PB_Init+0x104>)
 8000a9c:	0092      	lsls	r2, r2, #2
 8000a9e:	58d3      	ldr	r3, [r2, r3]
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	0019      	movs	r1, r3
 8000aa4:	f001 f8da 	bl	8001c5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000aa8:	2307      	movs	r3, #7
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f001 f8eb 	bl	8001c86 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	b008      	add	sp, #32
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	46c0      	nop			@ (mov r8, r8)
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	20000010 	.word	0x20000010
 8000ac4:	10210000 	.word	0x10210000
 8000ac8:	20000114 	.word	0x20000114
 8000acc:	08006648 	.word	0x08006648
 8000ad0:	20000014 	.word	0x20000014
 8000ad4:	20000018 	.word	0x20000018

08000ad8 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	0002      	movs	r2, r0
 8000ae0:	1dfb      	adds	r3, r7, #7
 8000ae2:	701a      	strb	r2, [r3, #0]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000ae4:	1dfb      	adds	r3, r7, #7
 8000ae6:	781a      	ldrb	r2, [r3, #0]
 8000ae8:	0013      	movs	r3, r2
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	189b      	adds	r3, r3, r2
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	4a04      	ldr	r2, [pc, #16]	@ (8000b04 <BSP_PB_IRQHandler+0x2c>)
 8000af2:	189b      	adds	r3, r3, r2
 8000af4:	0018      	movs	r0, r3
 8000af6:	f001 f91b 	bl	8001d30 <HAL_EXTI_IRQHandler>
}
 8000afa:	46c0      	nop			@ (mov r8, r8)
 8000afc:	46bd      	mov	sp, r7
 8000afe:	b002      	add	sp, #8
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	46c0      	nop			@ (mov r8, r8)
 8000b04:	20000114 	.word	0x20000114

08000b08 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	0002      	movs	r2, r0
 8000b10:	1dfb      	adds	r3, r7, #7
 8000b12:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000b14:	46c0      	nop			@ (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	b002      	add	sp, #8
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	0002      	movs	r2, r0
 8000b24:	6039      	str	r1, [r7, #0]
 8000b26:	1dfb      	adds	r3, r7, #7
 8000b28:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 8000b2e:	1dfb      	adds	r3, r7, #7
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d003      	beq.n	8000b3e <BSP_COM_Init+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000b36:	2302      	movs	r3, #2
 8000b38:	425b      	negs	r3, r3
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	e018      	b.n	8000b70 <BSP_COM_Init+0x54>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000b3e:	1dfb      	adds	r3, r7, #7
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2294      	movs	r2, #148	@ 0x94
 8000b44:	435a      	muls	r2, r3
 8000b46:	4b0d      	ldr	r3, [pc, #52]	@ (8000b7c <BSP_COM_Init+0x60>)
 8000b48:	18d3      	adds	r3, r2, r3
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f000 f856 	bl	8000bfc <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART2_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000b50:	1dfb      	adds	r3, r7, #7
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2294      	movs	r2, #148	@ 0x94
 8000b56:	435a      	muls	r2, r3
 8000b58:	4b08      	ldr	r3, [pc, #32]	@ (8000b7c <BSP_COM_Init+0x60>)
 8000b5a:	18d3      	adds	r3, r2, r3
 8000b5c:	683a      	ldr	r2, [r7, #0]
 8000b5e:	0011      	movs	r1, r2
 8000b60:	0018      	movs	r0, r3
 8000b62:	f000 f80d 	bl	8000b80 <MX_USART2_Init>
 8000b66:	1e03      	subs	r3, r0, #0
 8000b68:	d002      	beq.n	8000b70 <BSP_COM_Init+0x54>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000b6a:	2304      	movs	r3, #4
 8000b6c:	425b      	negs	r3, r3
 8000b6e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000b70:	68fb      	ldr	r3, [r7, #12]
}
 8000b72:	0018      	movs	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	b004      	add	sp, #16
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	46c0      	nop			@ (mov r8, r8)
 8000b7c:	20000120 	.word	0x20000120

08000b80 <MX_USART2_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART2_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8000b8a:	4b17      	ldr	r3, [pc, #92]	@ (8000be8 <MX_USART2_Init+0x68>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	220c      	movs	r2, #12
 8000b9e:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	895b      	ldrh	r3, [r3, #10]
 8000ba4:	001a      	movs	r2, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685a      	ldr	r2, [r3, #4]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	891b      	ldrh	r3, [r3, #8]
 8000bb6:	001a      	movs	r2, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	899b      	ldrh	r3, [r3, #12]
 8000bc0:	001a      	movs	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2280      	movs	r2, #128	@ 0x80
 8000bca:	0212      	lsls	r2, r2, #8
 8000bcc:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f002 f958 	bl	8002e8c <HAL_UART_Init>
 8000bdc:	0003      	movs	r3, r0
}
 8000bde:	0018      	movs	r0, r3
 8000be0:	46bd      	mov	sp, r7
 8000be2:	b002      	add	sp, #8
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	46c0      	nop			@ (mov r8, r8)
 8000be8:	20000004 	.word	0x20000004

08000bec <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f7ff ff89 	bl	8000b08 <BSP_PB_Callback>
}
 8000bf6:	46c0      	nop			@ (mov r8, r8)
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000bfc:	b590      	push	{r4, r7, lr}
 8000bfe:	b08b      	sub	sp, #44	@ 0x2c
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000c04:	4b28      	ldr	r3, [pc, #160]	@ (8000ca8 <COM1_MspInit+0xac>)
 8000c06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c08:	4b27      	ldr	r3, [pc, #156]	@ (8000ca8 <COM1_MspInit+0xac>)
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c10:	4b25      	ldr	r3, [pc, #148]	@ (8000ca8 <COM1_MspInit+0xac>)
 8000c12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c14:	2201      	movs	r2, #1
 8000c16:	4013      	ands	r3, r2
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000c1c:	4b22      	ldr	r3, [pc, #136]	@ (8000ca8 <COM1_MspInit+0xac>)
 8000c1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c20:	4b21      	ldr	r3, [pc, #132]	@ (8000ca8 <COM1_MspInit+0xac>)
 8000c22:	2101      	movs	r1, #1
 8000c24:	430a      	orrs	r2, r1
 8000c26:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c28:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca8 <COM1_MspInit+0xac>)
 8000c2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	4013      	ands	r3, r2
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000c34:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca8 <COM1_MspInit+0xac>)
 8000c36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c38:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca8 <COM1_MspInit+0xac>)
 8000c3a:	2180      	movs	r1, #128	@ 0x80
 8000c3c:	0289      	lsls	r1, r1, #10
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c42:	4b19      	ldr	r3, [pc, #100]	@ (8000ca8 <COM1_MspInit+0xac>)
 8000c44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c46:	2380      	movs	r3, #128	@ 0x80
 8000c48:	029b      	lsls	r3, r3, #10
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8000c50:	2414      	movs	r4, #20
 8000c52:	193b      	adds	r3, r7, r4
 8000c54:	2204      	movs	r2, #4
 8000c56:	601a      	str	r2, [r3, #0]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000c58:	193b      	adds	r3, r7, r4
 8000c5a:	2202      	movs	r2, #2
 8000c5c:	605a      	str	r2, [r3, #4]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000c5e:	193b      	adds	r3, r7, r4
 8000c60:	2202      	movs	r2, #2
 8000c62:	60da      	str	r2, [r3, #12]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000c64:	193b      	adds	r3, r7, r4
 8000c66:	2201      	movs	r2, #1
 8000c68:	609a      	str	r2, [r3, #8]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000c6a:	193b      	adds	r3, r7, r4
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000c70:	193a      	adds	r2, r7, r4
 8000c72:	23a0      	movs	r3, #160	@ 0xa0
 8000c74:	05db      	lsls	r3, r3, #23
 8000c76:	0011      	movs	r1, r2
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f001 f8a3 	bl	8001dc4 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8000c7e:	193b      	adds	r3, r7, r4
 8000c80:	2208      	movs	r2, #8
 8000c82:	601a      	str	r2, [r3, #0]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000c84:	193b      	adds	r3, r7, r4
 8000c86:	2202      	movs	r2, #2
 8000c88:	605a      	str	r2, [r3, #4]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000c8a:	193b      	adds	r3, r7, r4
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000c90:	193a      	adds	r2, r7, r4
 8000c92:	23a0      	movs	r3, #160	@ 0xa0
 8000c94:	05db      	lsls	r3, r3, #23
 8000c96:	0011      	movs	r1, r2
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f001 f893 	bl	8001dc4 <HAL_GPIO_Init>
}
 8000c9e:	46c0      	nop			@ (mov r8, r8)
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	b00b      	add	sp, #44	@ 0x2c
 8000ca4:	bd90      	pop	{r4, r7, pc}
 8000ca6:	46c0      	nop			@ (mov r8, r8)
 8000ca8:	40021000 	.word	0x40021000

08000cac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cb2:	1dfb      	adds	r3, r7, #7
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cb8:	2003      	movs	r0, #3
 8000cba:	f7ff fd67 	bl	800078c <HAL_InitTick>
 8000cbe:	1e03      	subs	r3, r0, #0
 8000cc0:	d003      	beq.n	8000cca <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000cc2:	1dfb      	adds	r3, r7, #7
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	701a      	strb	r2, [r3, #0]
 8000cc8:	e001      	b.n	8000cce <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cca:	f7ff fcd9 	bl	8000680 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cce:	1dfb      	adds	r3, r7, #7
 8000cd0:	781b      	ldrb	r3, [r3, #0]
}
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	b002      	add	sp, #8
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ce0:	4b05      	ldr	r3, [pc, #20]	@ (8000cf8 <HAL_IncTick+0x1c>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	001a      	movs	r2, r3
 8000ce6:	4b05      	ldr	r3, [pc, #20]	@ (8000cfc <HAL_IncTick+0x20>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	18d2      	adds	r2, r2, r3
 8000cec:	4b03      	ldr	r3, [pc, #12]	@ (8000cfc <HAL_IncTick+0x20>)
 8000cee:	601a      	str	r2, [r3, #0]
}
 8000cf0:	46c0      	nop			@ (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			@ (mov r8, r8)
 8000cf8:	20000020 	.word	0x20000020
 8000cfc:	200001b4 	.word	0x200001b4

08000d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  return uwTick;
 8000d04:	4b02      	ldr	r3, [pc, #8]	@ (8000d10 <HAL_GetTick+0x10>)
 8000d06:	681b      	ldr	r3, [r3, #0]
}
 8000d08:	0018      	movs	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	46c0      	nop			@ (mov r8, r8)
 8000d10:	200001b4 	.word	0x200001b4

08000d14 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a05      	ldr	r2, [pc, #20]	@ (8000d38 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000d24:	401a      	ands	r2, r3
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	431a      	orrs	r2, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	601a      	str	r2, [r3, #0]
}
 8000d2e:	46c0      	nop			@ (mov r8, r8)
 8000d30:	46bd      	mov	sp, r7
 8000d32:	b002      	add	sp, #8
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	46c0      	nop			@ (mov r8, r8)
 8000d38:	ff3fffff 	.word	0xff3fffff

08000d3c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	23c0      	movs	r3, #192	@ 0xc0
 8000d4a:	041b      	lsls	r3, r3, #16
 8000d4c:	4013      	ands	r3, r2
}
 8000d4e:	0018      	movs	r0, r3
 8000d50:	46bd      	mov	sp, r7
 8000d52:	b002      	add	sp, #8
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b084      	sub	sp, #16
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	60f8      	str	r0, [r7, #12]
 8000d5e:	60b9      	str	r1, [r7, #8]
 8000d60:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	695b      	ldr	r3, [r3, #20]
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	2104      	movs	r1, #4
 8000d6a:	400a      	ands	r2, r1
 8000d6c:	2107      	movs	r1, #7
 8000d6e:	4091      	lsls	r1, r2
 8000d70:	000a      	movs	r2, r1
 8000d72:	43d2      	mvns	r2, r2
 8000d74:	401a      	ands	r2, r3
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	2104      	movs	r1, #4
 8000d7a:	400b      	ands	r3, r1
 8000d7c:	6879      	ldr	r1, [r7, #4]
 8000d7e:	4099      	lsls	r1, r3
 8000d80:	000b      	movs	r3, r1
 8000d82:	431a      	orrs	r2, r3
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000d88:	46c0      	nop			@ (mov r8, r8)
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	b004      	add	sp, #16
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	695b      	ldr	r3, [r3, #20]
 8000d9e:	683a      	ldr	r2, [r7, #0]
 8000da0:	2104      	movs	r1, #4
 8000da2:	400a      	ands	r2, r1
 8000da4:	2107      	movs	r1, #7
 8000da6:	4091      	lsls	r1, r2
 8000da8:	000a      	movs	r2, r1
 8000daa:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	2104      	movs	r1, #4
 8000db0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000db2:	40da      	lsrs	r2, r3
 8000db4:	0013      	movs	r3, r2
}
 8000db6:	0018      	movs	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b002      	add	sp, #8
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	68da      	ldr	r2, [r3, #12]
 8000dca:	23c0      	movs	r3, #192	@ 0xc0
 8000dcc:	011b      	lsls	r3, r3, #4
 8000dce:	4013      	ands	r3, r2
 8000dd0:	d101      	bne.n	8000dd6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e000      	b.n	8000dd8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000dd6:	2300      	movs	r3, #0
}
 8000dd8:	0018      	movs	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	b002      	add	sp, #8
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000df0:	68ba      	ldr	r2, [r7, #8]
 8000df2:	211f      	movs	r1, #31
 8000df4:	400a      	ands	r2, r1
 8000df6:	210f      	movs	r1, #15
 8000df8:	4091      	lsls	r1, r2
 8000dfa:	000a      	movs	r2, r1
 8000dfc:	43d2      	mvns	r2, r2
 8000dfe:	401a      	ands	r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	0e9b      	lsrs	r3, r3, #26
 8000e04:	210f      	movs	r1, #15
 8000e06:	4019      	ands	r1, r3
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	201f      	movs	r0, #31
 8000e0c:	4003      	ands	r3, r0
 8000e0e:	4099      	lsls	r1, r3
 8000e10:	000b      	movs	r3, r1
 8000e12:	431a      	orrs	r2, r3
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e18:	46c0      	nop			@ (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b004      	add	sp, #16
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	025b      	lsls	r3, r3, #9
 8000e32:	0a5b      	lsrs	r3, r3, #9
 8000e34:	431a      	orrs	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e3a:	46c0      	nop			@ (mov r8, r8)
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	b002      	add	sp, #8
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
 8000e4a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e50:	683a      	ldr	r2, [r7, #0]
 8000e52:	0252      	lsls	r2, r2, #9
 8000e54:	0a52      	lsrs	r2, r2, #9
 8000e56:	43d2      	mvns	r2, r2
 8000e58:	401a      	ands	r2, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e5e:	46c0      	nop			@ (mov r8, r8)
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b002      	add	sp, #8
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	695b      	ldr	r3, [r3, #20]
 8000e78:	68ba      	ldr	r2, [r7, #8]
 8000e7a:	0212      	lsls	r2, r2, #8
 8000e7c:	43d2      	mvns	r2, r2
 8000e7e:	401a      	ands	r2, r3
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	021b      	lsls	r3, r3, #8
 8000e84:	6879      	ldr	r1, [r7, #4]
 8000e86:	400b      	ands	r3, r1
 8000e88:	4904      	ldr	r1, [pc, #16]	@ (8000e9c <LL_ADC_SetChannelSamplingTime+0x34>)
 8000e8a:	400b      	ands	r3, r1
 8000e8c:	431a      	orrs	r2, r3
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000e92:	46c0      	nop			@ (mov r8, r8)
 8000e94:	46bd      	mov	sp, r7
 8000e96:	b004      	add	sp, #16
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	46c0      	nop			@ (mov r8, r8)
 8000e9c:	7fffff00 	.word	0x7fffff00

08000ea0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	4a05      	ldr	r2, [pc, #20]	@ (8000ec4 <LL_ADC_EnableInternalRegulator+0x24>)
 8000eae:	4013      	ands	r3, r2
 8000eb0:	2280      	movs	r2, #128	@ 0x80
 8000eb2:	0552      	lsls	r2, r2, #21
 8000eb4:	431a      	orrs	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000eba:	46c0      	nop			@ (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b002      	add	sp, #8
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			@ (mov r8, r8)
 8000ec4:	6fffffe8 	.word	0x6fffffe8

08000ec8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	689a      	ldr	r2, [r3, #8]
 8000ed4:	2380      	movs	r3, #128	@ 0x80
 8000ed6:	055b      	lsls	r3, r3, #21
 8000ed8:	401a      	ands	r2, r3
 8000eda:	2380      	movs	r3, #128	@ 0x80
 8000edc:	055b      	lsls	r3, r3, #21
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d101      	bne.n	8000ee6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e000      	b.n	8000ee8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000ee6:	2300      	movs	r3, #0
}
 8000ee8:	0018      	movs	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	b002      	add	sp, #8
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	4a04      	ldr	r2, [pc, #16]	@ (8000f10 <LL_ADC_Enable+0x20>)
 8000efe:	4013      	ands	r3, r2
 8000f00:	2201      	movs	r2, #1
 8000f02:	431a      	orrs	r2, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000f08:	46c0      	nop			@ (mov r8, r8)
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	b002      	add	sp, #8
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	7fffffe8 	.word	0x7fffffe8

08000f14 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	4a04      	ldr	r2, [pc, #16]	@ (8000f34 <LL_ADC_Disable+0x20>)
 8000f22:	4013      	ands	r3, r2
 8000f24:	2202      	movs	r2, #2
 8000f26:	431a      	orrs	r2, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000f2c:	46c0      	nop			@ (mov r8, r8)
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	b002      	add	sp, #8
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	7fffffe8 	.word	0x7fffffe8

08000f38 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	2201      	movs	r2, #1
 8000f46:	4013      	ands	r3, r2
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d101      	bne.n	8000f50 <LL_ADC_IsEnabled+0x18>
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e000      	b.n	8000f52 <LL_ADC_IsEnabled+0x1a>
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	0018      	movs	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	b002      	add	sp, #8
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	2202      	movs	r2, #2
 8000f68:	4013      	ands	r3, r2
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d101      	bne.n	8000f72 <LL_ADC_IsDisableOngoing+0x18>
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e000      	b.n	8000f74 <LL_ADC_IsDisableOngoing+0x1a>
 8000f72:	2300      	movs	r3, #0
}
 8000f74:	0018      	movs	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	b002      	add	sp, #8
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	4a04      	ldr	r2, [pc, #16]	@ (8000f9c <LL_ADC_REG_StartConversion+0x20>)
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	2204      	movs	r2, #4
 8000f8e:	431a      	orrs	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000f94:	46c0      	nop			@ (mov r8, r8)
 8000f96:	46bd      	mov	sp, r7
 8000f98:	b002      	add	sp, #8
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	7fffffe8 	.word	0x7fffffe8

08000fa0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	4a04      	ldr	r2, [pc, #16]	@ (8000fc0 <LL_ADC_REG_StopConversion+0x20>)
 8000fae:	4013      	ands	r3, r2
 8000fb0:	2210      	movs	r2, #16
 8000fb2:	431a      	orrs	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8000fb8:	46c0      	nop			@ (mov r8, r8)
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b002      	add	sp, #8
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	7fffffe8 	.word	0x7fffffe8

08000fc4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	2204      	movs	r2, #4
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	2b04      	cmp	r3, #4
 8000fd6:	d101      	bne.n	8000fdc <LL_ADC_REG_IsConversionOngoing+0x18>
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e000      	b.n	8000fde <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	0018      	movs	r0, r3
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	b002      	add	sp, #8
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ff0:	231f      	movs	r3, #31
 8000ff2:	18fb      	adds	r3, r7, r3
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d101      	bne.n	800100e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e17e      	b.n	800130c <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001012:	2b00      	cmp	r3, #0
 8001014:	d10a      	bne.n	800102c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	0018      	movs	r0, r3
 800101a:	f7ff fb5b 	bl	80006d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2254      	movs	r2, #84	@ 0x54
 8001028:	2100      	movs	r1, #0
 800102a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	0018      	movs	r0, r3
 8001032:	f7ff ff49 	bl	8000ec8 <LL_ADC_IsInternalRegulatorEnabled>
 8001036:	1e03      	subs	r3, r0, #0
 8001038:	d114      	bne.n	8001064 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	0018      	movs	r0, r3
 8001040:	f7ff ff2e 	bl	8000ea0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001044:	4bb3      	ldr	r3, [pc, #716]	@ (8001314 <HAL_ADC_Init+0x32c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	49b3      	ldr	r1, [pc, #716]	@ (8001318 <HAL_ADC_Init+0x330>)
 800104a:	0018      	movs	r0, r3
 800104c:	f7ff f85c 	bl	8000108 <__udivsi3>
 8001050:	0003      	movs	r3, r0
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001056:	e002      	b.n	800105e <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	3b01      	subs	r3, #1
 800105c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1f9      	bne.n	8001058 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	0018      	movs	r0, r3
 800106a:	f7ff ff2d 	bl	8000ec8 <LL_ADC_IsInternalRegulatorEnabled>
 800106e:	1e03      	subs	r3, r0, #0
 8001070:	d10f      	bne.n	8001092 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001076:	2210      	movs	r2, #16
 8001078:	431a      	orrs	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001082:	2201      	movs	r2, #1
 8001084:	431a      	orrs	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800108a:	231f      	movs	r3, #31
 800108c:	18fb      	adds	r3, r7, r3
 800108e:	2201      	movs	r2, #1
 8001090:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	0018      	movs	r0, r3
 8001098:	f7ff ff94 	bl	8000fc4 <LL_ADC_REG_IsConversionOngoing>
 800109c:	0003      	movs	r3, r0
 800109e:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010a4:	2210      	movs	r2, #16
 80010a6:	4013      	ands	r3, r2
 80010a8:	d000      	beq.n	80010ac <HAL_ADC_Init+0xc4>
 80010aa:	e122      	b.n	80012f2 <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d000      	beq.n	80010b4 <HAL_ADC_Init+0xcc>
 80010b2:	e11e      	b.n	80012f2 <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b8:	4a98      	ldr	r2, [pc, #608]	@ (800131c <HAL_ADC_Init+0x334>)
 80010ba:	4013      	ands	r3, r2
 80010bc:	2202      	movs	r2, #2
 80010be:	431a      	orrs	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	0018      	movs	r0, r3
 80010ca:	f7ff ff35 	bl	8000f38 <LL_ADC_IsEnabled>
 80010ce:	1e03      	subs	r3, r0, #0
 80010d0:	d000      	beq.n	80010d4 <HAL_ADC_Init+0xec>
 80010d2:	e0ad      	b.n	8001230 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	7e1b      	ldrb	r3, [r3, #24]
 80010dc:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80010de:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	7e5b      	ldrb	r3, [r3, #25]
 80010e4:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80010e6:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	7e9b      	ldrb	r3, [r3, #26]
 80010ec:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80010ee:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d002      	beq.n	80010fe <HAL_ADC_Init+0x116>
 80010f8:	2380      	movs	r3, #128	@ 0x80
 80010fa:	015b      	lsls	r3, r3, #5
 80010fc:	e000      	b.n	8001100 <HAL_ADC_Init+0x118>
 80010fe:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001100:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001106:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	691b      	ldr	r3, [r3, #16]
 800110c:	2b00      	cmp	r3, #0
 800110e:	da04      	bge.n	800111a <HAL_ADC_Init+0x132>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	691b      	ldr	r3, [r3, #16]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	085b      	lsrs	r3, r3, #1
 8001118:	e001      	b.n	800111e <HAL_ADC_Init+0x136>
 800111a:	2380      	movs	r3, #128	@ 0x80
 800111c:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 800111e:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	212c      	movs	r1, #44	@ 0x2c
 8001124:	5c5b      	ldrb	r3, [r3, r1]
 8001126:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001128:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2220      	movs	r2, #32
 8001134:	5c9b      	ldrb	r3, [r3, r2]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d115      	bne.n	8001166 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	7e9b      	ldrb	r3, [r3, #26]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d105      	bne.n	800114e <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	2280      	movs	r2, #128	@ 0x80
 8001146:	0252      	lsls	r2, r2, #9
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
 800114c:	e00b      	b.n	8001166 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001152:	2220      	movs	r2, #32
 8001154:	431a      	orrs	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800115e:	2201      	movs	r2, #1
 8001160:	431a      	orrs	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800116a:	2b00      	cmp	r3, #0
 800116c:	d00a      	beq.n	8001184 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001172:	23e0      	movs	r3, #224	@ 0xe0
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800117c:	4313      	orrs	r3, r2
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	4a65      	ldr	r2, [pc, #404]	@ (8001320 <HAL_ADC_Init+0x338>)
 800118c:	4013      	ands	r3, r2
 800118e:	0019      	movs	r1, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	430a      	orrs	r2, r1
 8001198:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	0f9b      	lsrs	r3, r3, #30
 80011a0:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80011a6:	4313      	orrs	r3, r2
 80011a8:	697a      	ldr	r2, [r7, #20]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	223c      	movs	r2, #60	@ 0x3c
 80011b2:	5c9b      	ldrb	r3, [r3, r2]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d111      	bne.n	80011dc <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	0f9b      	lsrs	r3, r3, #30
 80011be:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80011c4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 80011ca:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80011d0:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	2201      	movs	r2, #1
 80011d8:	4313      	orrs	r3, r2
 80011da:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	4a50      	ldr	r2, [pc, #320]	@ (8001324 <HAL_ADC_Init+0x33c>)
 80011e4:	4013      	ands	r3, r2
 80011e6:	0019      	movs	r1, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	430a      	orrs	r2, r1
 80011f0:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685a      	ldr	r2, [r3, #4]
 80011f6:	23c0      	movs	r3, #192	@ 0xc0
 80011f8:	061b      	lsls	r3, r3, #24
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d018      	beq.n	8001230 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001202:	2380      	movs	r3, #128	@ 0x80
 8001204:	05db      	lsls	r3, r3, #23
 8001206:	429a      	cmp	r2, r3
 8001208:	d012      	beq.n	8001230 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800120e:	2380      	movs	r3, #128	@ 0x80
 8001210:	061b      	lsls	r3, r3, #24
 8001212:	429a      	cmp	r2, r3
 8001214:	d00c      	beq.n	8001230 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001216:	4b44      	ldr	r3, [pc, #272]	@ (8001328 <HAL_ADC_Init+0x340>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a44      	ldr	r2, [pc, #272]	@ (800132c <HAL_ADC_Init+0x344>)
 800121c:	4013      	ands	r3, r2
 800121e:	0019      	movs	r1, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	23f0      	movs	r3, #240	@ 0xf0
 8001226:	039b      	lsls	r3, r3, #14
 8001228:	401a      	ands	r2, r3
 800122a:	4b3f      	ldr	r3, [pc, #252]	@ (8001328 <HAL_ADC_Init+0x340>)
 800122c:	430a      	orrs	r2, r1
 800122e:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6818      	ldr	r0, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001238:	001a      	movs	r2, r3
 800123a:	2100      	movs	r1, #0
 800123c:	f7ff fd8b 	bl	8000d56 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6818      	ldr	r0, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001248:	4939      	ldr	r1, [pc, #228]	@ (8001330 <HAL_ADC_Init+0x348>)
 800124a:	001a      	movs	r2, r3
 800124c:	f7ff fd83 	bl	8000d56 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d109      	bne.n	800126c <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2110      	movs	r1, #16
 8001264:	4249      	negs	r1, r1
 8001266:	430a      	orrs	r2, r1
 8001268:	629a      	str	r2, [r3, #40]	@ 0x28
 800126a:	e018      	b.n	800129e <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	691a      	ldr	r2, [r3, #16]
 8001270:	2380      	movs	r3, #128	@ 0x80
 8001272:	039b      	lsls	r3, r3, #14
 8001274:	429a      	cmp	r2, r3
 8001276:	d112      	bne.n	800129e <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	3b01      	subs	r3, #1
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	221c      	movs	r2, #28
 8001288:	4013      	ands	r3, r2
 800128a:	2210      	movs	r2, #16
 800128c:	4252      	negs	r2, r2
 800128e:	409a      	lsls	r2, r3
 8001290:	0011      	movs	r1, r2
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	430a      	orrs	r2, r1
 800129c:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2100      	movs	r1, #0
 80012a4:	0018      	movs	r0, r3
 80012a6:	f7ff fd73 	bl	8000d90 <LL_ADC_GetSamplingTimeCommonChannels>
 80012aa:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d10b      	bne.n	80012cc <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012be:	2203      	movs	r2, #3
 80012c0:	4393      	bics	r3, r2
 80012c2:	2201      	movs	r2, #1
 80012c4:	431a      	orrs	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80012ca:	e01c      	b.n	8001306 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012d0:	2212      	movs	r2, #18
 80012d2:	4393      	bics	r3, r2
 80012d4:	2210      	movs	r2, #16
 80012d6:	431a      	orrs	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012e0:	2201      	movs	r2, #1
 80012e2:	431a      	orrs	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80012e8:	231f      	movs	r3, #31
 80012ea:	18fb      	adds	r3, r7, r3
 80012ec:	2201      	movs	r2, #1
 80012ee:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80012f0:	e009      	b.n	8001306 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012f6:	2210      	movs	r2, #16
 80012f8:	431a      	orrs	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80012fe:	231f      	movs	r3, #31
 8001300:	18fb      	adds	r3, r7, r3
 8001302:	2201      	movs	r2, #1
 8001304:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001306:	231f      	movs	r3, #31
 8001308:	18fb      	adds	r3, r7, r3
 800130a:	781b      	ldrb	r3, [r3, #0]
}
 800130c:	0018      	movs	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	b008      	add	sp, #32
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000000 	.word	0x20000000
 8001318:	00030d40 	.word	0x00030d40
 800131c:	fffffefd 	.word	0xfffffefd
 8001320:	ffde0201 	.word	0xffde0201
 8001324:	1ffffc02 	.word	0x1ffffc02
 8001328:	40012708 	.word	0x40012708
 800132c:	ffc3ffff 	.word	0xffc3ffff
 8001330:	7fffff04 	.word	0x7fffff04

08001334 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001334:	b5b0      	push	{r4, r5, r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	0018      	movs	r0, r3
 8001342:	f7ff fe3f 	bl	8000fc4 <LL_ADC_REG_IsConversionOngoing>
 8001346:	1e03      	subs	r3, r0, #0
 8001348:	d135      	bne.n	80013b6 <HAL_ADC_Start+0x82>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2254      	movs	r2, #84	@ 0x54
 800134e:	5c9b      	ldrb	r3, [r3, r2]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d101      	bne.n	8001358 <HAL_ADC_Start+0x24>
 8001354:	2302      	movs	r3, #2
 8001356:	e035      	b.n	80013c4 <HAL_ADC_Start+0x90>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2254      	movs	r2, #84	@ 0x54
 800135c:	2101      	movs	r1, #1
 800135e:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001360:	250f      	movs	r5, #15
 8001362:	197c      	adds	r4, r7, r5
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	0018      	movs	r0, r3
 8001368:	f000 fb1a 	bl	80019a0 <ADC_Enable>
 800136c:	0003      	movs	r3, r0
 800136e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001370:	197b      	adds	r3, r7, r5
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d119      	bne.n	80013ac <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800137c:	4a13      	ldr	r2, [pc, #76]	@ (80013cc <HAL_ADC_Start+0x98>)
 800137e:	4013      	ands	r3, r2
 8001380:	2280      	movs	r2, #128	@ 0x80
 8001382:	0052      	lsls	r2, r2, #1
 8001384:	431a      	orrs	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	221c      	movs	r2, #28
 8001396:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2254      	movs	r2, #84	@ 0x54
 800139c:	2100      	movs	r1, #0
 800139e:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	0018      	movs	r0, r3
 80013a6:	f7ff fde9 	bl	8000f7c <LL_ADC_REG_StartConversion>
 80013aa:	e008      	b.n	80013be <HAL_ADC_Start+0x8a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2254      	movs	r2, #84	@ 0x54
 80013b0:	2100      	movs	r1, #0
 80013b2:	5499      	strb	r1, [r3, r2]
 80013b4:	e003      	b.n	80013be <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80013b6:	230f      	movs	r3, #15
 80013b8:	18fb      	adds	r3, r7, r3
 80013ba:	2202      	movs	r2, #2
 80013bc:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80013be:	230f      	movs	r3, #15
 80013c0:	18fb      	adds	r3, r7, r3
 80013c2:	781b      	ldrb	r3, [r3, #0]
}
 80013c4:	0018      	movs	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b004      	add	sp, #16
 80013ca:	bdb0      	pop	{r4, r5, r7, pc}
 80013cc:	fffff0fe 	.word	0xfffff0fe

080013d0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80013d0:	b5b0      	push	{r4, r5, r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2254      	movs	r2, #84	@ 0x54
 80013dc:	5c9b      	ldrb	r3, [r3, r2]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d101      	bne.n	80013e6 <HAL_ADC_Stop+0x16>
 80013e2:	2302      	movs	r3, #2
 80013e4:	e029      	b.n	800143a <HAL_ADC_Stop+0x6a>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2254      	movs	r2, #84	@ 0x54
 80013ea:	2101      	movs	r1, #1
 80013ec:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80013ee:	250f      	movs	r5, #15
 80013f0:	197c      	adds	r4, r7, r5
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	0018      	movs	r0, r3
 80013f6:	f000 fa97 	bl	8001928 <ADC_ConversionStop>
 80013fa:	0003      	movs	r3, r0
 80013fc:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80013fe:	197b      	adds	r3, r7, r5
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d112      	bne.n	800142c <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001406:	197c      	adds	r4, r7, r5
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	0018      	movs	r0, r3
 800140c:	f000 fb46 	bl	8001a9c <ADC_Disable>
 8001410:	0003      	movs	r3, r0
 8001412:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001414:	197b      	adds	r3, r7, r5
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d107      	bne.n	800142c <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001420:	4a08      	ldr	r2, [pc, #32]	@ (8001444 <HAL_ADC_Stop+0x74>)
 8001422:	4013      	ands	r3, r2
 8001424:	2201      	movs	r2, #1
 8001426:	431a      	orrs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2254      	movs	r2, #84	@ 0x54
 8001430:	2100      	movs	r1, #0
 8001432:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001434:	230f      	movs	r3, #15
 8001436:	18fb      	adds	r3, r7, r3
 8001438:	781b      	ldrb	r3, [r3, #0]
}
 800143a:	0018      	movs	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	b004      	add	sp, #16
 8001440:	bdb0      	pop	{r4, r5, r7, pc}
 8001442:	46c0      	nop			@ (mov r8, r8)
 8001444:	fffffefe 	.word	0xfffffefe

08001448 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	2b08      	cmp	r3, #8
 8001458:	d102      	bne.n	8001460 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800145a:	2308      	movs	r3, #8
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	e00f      	b.n	8001480 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	2201      	movs	r2, #1
 8001468:	4013      	ands	r3, r2
 800146a:	d007      	beq.n	800147c <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001470:	2220      	movs	r2, #32
 8001472:	431a      	orrs	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e06c      	b.n	8001556 <HAL_ADC_PollForConversion+0x10e>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800147c:	2304      	movs	r3, #4
 800147e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001480:	f7ff fc3e 	bl	8000d00 <HAL_GetTick>
 8001484:	0003      	movs	r3, r0
 8001486:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001488:	e019      	b.n	80014be <HAL_ADC_PollForConversion+0x76>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	3301      	adds	r3, #1
 800148e:	d016      	beq.n	80014be <HAL_ADC_PollForConversion+0x76>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001490:	f7ff fc36 	bl	8000d00 <HAL_GetTick>
 8001494:	0002      	movs	r2, r0
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	429a      	cmp	r2, r3
 800149e:	d302      	bcc.n	80014a6 <HAL_ADC_PollForConversion+0x5e>
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10b      	bne.n	80014be <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014aa:	2204      	movs	r2, #4
 80014ac:	431a      	orrs	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2254      	movs	r2, #84	@ 0x54
 80014b6:	2100      	movs	r1, #0
 80014b8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e04b      	b.n	8001556 <HAL_ADC_PollForConversion+0x10e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	68fa      	ldr	r2, [r7, #12]
 80014c6:	4013      	ands	r3, r2
 80014c8:	d0df      	beq.n	800148a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ce:	2280      	movs	r2, #128	@ 0x80
 80014d0:	0092      	lsls	r2, r2, #2
 80014d2:	431a      	orrs	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	0018      	movs	r0, r3
 80014de:	f7ff fc6e 	bl	8000dbe <LL_ADC_REG_IsTriggerSourceSWStart>
 80014e2:	1e03      	subs	r3, r0, #0
 80014e4:	d02e      	beq.n	8001544 <HAL_ADC_PollForConversion+0xfc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	7e9b      	ldrb	r3, [r3, #26]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d12a      	bne.n	8001544 <HAL_ADC_PollForConversion+0xfc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2208      	movs	r2, #8
 80014f6:	4013      	ands	r3, r2
 80014f8:	2b08      	cmp	r3, #8
 80014fa:	d123      	bne.n	8001544 <HAL_ADC_PollForConversion+0xfc>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	0018      	movs	r0, r3
 8001502:	f7ff fd5f 	bl	8000fc4 <LL_ADC_REG_IsConversionOngoing>
 8001506:	1e03      	subs	r3, r0, #0
 8001508:	d110      	bne.n	800152c <HAL_ADC_PollForConversion+0xe4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	685a      	ldr	r2, [r3, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	210c      	movs	r1, #12
 8001516:	438a      	bics	r2, r1
 8001518:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800151e:	4a10      	ldr	r2, [pc, #64]	@ (8001560 <HAL_ADC_PollForConversion+0x118>)
 8001520:	4013      	ands	r3, r2
 8001522:	2201      	movs	r2, #1
 8001524:	431a      	orrs	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	659a      	str	r2, [r3, #88]	@ 0x58
 800152a:	e00b      	b.n	8001544 <HAL_ADC_PollForConversion+0xfc>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001530:	2220      	movs	r2, #32
 8001532:	431a      	orrs	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800153c:	2201      	movs	r2, #1
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	7e1b      	ldrb	r3, [r3, #24]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d103      	bne.n	8001554 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	220c      	movs	r2, #12
 8001552:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	0018      	movs	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	b004      	add	sp, #16
 800155c:	bd80      	pop	{r7, pc}
 800155e:	46c0      	nop			@ (mov r8, r8)
 8001560:	fffffefe 	.word	0xfffffefe

08001564 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001572:	0018      	movs	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	b002      	add	sp, #8
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001586:	2317      	movs	r3, #23
 8001588:	18fb      	adds	r3, r7, r3
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2254      	movs	r2, #84	@ 0x54
 8001596:	5c9b      	ldrb	r3, [r3, r2]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d101      	bne.n	80015a0 <HAL_ADC_ConfigChannel+0x24>
 800159c:	2302      	movs	r3, #2
 800159e:	e1be      	b.n	800191e <HAL_ADC_ConfigChannel+0x3a2>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2254      	movs	r2, #84	@ 0x54
 80015a4:	2101      	movs	r1, #1
 80015a6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	0018      	movs	r0, r3
 80015ae:	f7ff fd09 	bl	8000fc4 <LL_ADC_REG_IsConversionOngoing>
 80015b2:	1e03      	subs	r3, r0, #0
 80015b4:	d000      	beq.n	80015b8 <HAL_ADC_ConfigChannel+0x3c>
 80015b6:	e1a1      	b.n	80018fc <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d100      	bne.n	80015c2 <HAL_ADC_ConfigChannel+0x46>
 80015c0:	e152      	b.n	8001868 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	691a      	ldr	r2, [r3, #16]
 80015c6:	2380      	movs	r3, #128	@ 0x80
 80015c8:	061b      	lsls	r3, r3, #24
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d004      	beq.n	80015d8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80015d2:	4ac2      	ldr	r2, [pc, #776]	@ (80018dc <HAL_ADC_ConfigChannel+0x360>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d108      	bne.n	80015ea <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	0019      	movs	r1, r3
 80015e2:	0010      	movs	r0, r2
 80015e4:	f7ff fc1c 	bl	8000e20 <LL_ADC_REG_SetSequencerChAdd>
 80015e8:	e0ed      	b.n	80017c6 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	211f      	movs	r1, #31
 80015f4:	400b      	ands	r3, r1
 80015f6:	210f      	movs	r1, #15
 80015f8:	4099      	lsls	r1, r3
 80015fa:	000b      	movs	r3, r1
 80015fc:	43db      	mvns	r3, r3
 80015fe:	4013      	ands	r3, r2
 8001600:	0019      	movs	r1, r3
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	025b      	lsls	r3, r3, #9
 8001608:	0a5b      	lsrs	r3, r3, #9
 800160a:	d105      	bne.n	8001618 <HAL_ADC_ConfigChannel+0x9c>
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	0e9b      	lsrs	r3, r3, #26
 8001612:	221f      	movs	r2, #31
 8001614:	4013      	ands	r3, r2
 8001616:	e0bc      	b.n	8001792 <HAL_ADC_ConfigChannel+0x216>
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2201      	movs	r2, #1
 800161e:	4013      	ands	r3, r2
 8001620:	d000      	beq.n	8001624 <HAL_ADC_ConfigChannel+0xa8>
 8001622:	e0b5      	b.n	8001790 <HAL_ADC_ConfigChannel+0x214>
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2202      	movs	r2, #2
 800162a:	4013      	ands	r3, r2
 800162c:	d000      	beq.n	8001630 <HAL_ADC_ConfigChannel+0xb4>
 800162e:	e0ad      	b.n	800178c <HAL_ADC_ConfigChannel+0x210>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2204      	movs	r2, #4
 8001636:	4013      	ands	r3, r2
 8001638:	d000      	beq.n	800163c <HAL_ADC_ConfigChannel+0xc0>
 800163a:	e0a5      	b.n	8001788 <HAL_ADC_ConfigChannel+0x20c>
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2208      	movs	r2, #8
 8001642:	4013      	ands	r3, r2
 8001644:	d000      	beq.n	8001648 <HAL_ADC_ConfigChannel+0xcc>
 8001646:	e09d      	b.n	8001784 <HAL_ADC_ConfigChannel+0x208>
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2210      	movs	r2, #16
 800164e:	4013      	ands	r3, r2
 8001650:	d000      	beq.n	8001654 <HAL_ADC_ConfigChannel+0xd8>
 8001652:	e095      	b.n	8001780 <HAL_ADC_ConfigChannel+0x204>
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2220      	movs	r2, #32
 800165a:	4013      	ands	r3, r2
 800165c:	d000      	beq.n	8001660 <HAL_ADC_ConfigChannel+0xe4>
 800165e:	e08d      	b.n	800177c <HAL_ADC_ConfigChannel+0x200>
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2240      	movs	r2, #64	@ 0x40
 8001666:	4013      	ands	r3, r2
 8001668:	d000      	beq.n	800166c <HAL_ADC_ConfigChannel+0xf0>
 800166a:	e085      	b.n	8001778 <HAL_ADC_ConfigChannel+0x1fc>
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2280      	movs	r2, #128	@ 0x80
 8001672:	4013      	ands	r3, r2
 8001674:	d000      	beq.n	8001678 <HAL_ADC_ConfigChannel+0xfc>
 8001676:	e07d      	b.n	8001774 <HAL_ADC_ConfigChannel+0x1f8>
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	2380      	movs	r3, #128	@ 0x80
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	4013      	ands	r3, r2
 8001682:	d000      	beq.n	8001686 <HAL_ADC_ConfigChannel+0x10a>
 8001684:	e074      	b.n	8001770 <HAL_ADC_ConfigChannel+0x1f4>
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	2380      	movs	r3, #128	@ 0x80
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4013      	ands	r3, r2
 8001690:	d000      	beq.n	8001694 <HAL_ADC_ConfigChannel+0x118>
 8001692:	e06b      	b.n	800176c <HAL_ADC_ConfigChannel+0x1f0>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	2380      	movs	r3, #128	@ 0x80
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	4013      	ands	r3, r2
 800169e:	d000      	beq.n	80016a2 <HAL_ADC_ConfigChannel+0x126>
 80016a0:	e062      	b.n	8001768 <HAL_ADC_ConfigChannel+0x1ec>
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	2380      	movs	r3, #128	@ 0x80
 80016a8:	011b      	lsls	r3, r3, #4
 80016aa:	4013      	ands	r3, r2
 80016ac:	d000      	beq.n	80016b0 <HAL_ADC_ConfigChannel+0x134>
 80016ae:	e059      	b.n	8001764 <HAL_ADC_ConfigChannel+0x1e8>
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	2380      	movs	r3, #128	@ 0x80
 80016b6:	015b      	lsls	r3, r3, #5
 80016b8:	4013      	ands	r3, r2
 80016ba:	d151      	bne.n	8001760 <HAL_ADC_ConfigChannel+0x1e4>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	2380      	movs	r3, #128	@ 0x80
 80016c2:	019b      	lsls	r3, r3, #6
 80016c4:	4013      	ands	r3, r2
 80016c6:	d149      	bne.n	800175c <HAL_ADC_ConfigChannel+0x1e0>
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	2380      	movs	r3, #128	@ 0x80
 80016ce:	01db      	lsls	r3, r3, #7
 80016d0:	4013      	ands	r3, r2
 80016d2:	d141      	bne.n	8001758 <HAL_ADC_ConfigChannel+0x1dc>
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	2380      	movs	r3, #128	@ 0x80
 80016da:	021b      	lsls	r3, r3, #8
 80016dc:	4013      	ands	r3, r2
 80016de:	d139      	bne.n	8001754 <HAL_ADC_ConfigChannel+0x1d8>
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	2380      	movs	r3, #128	@ 0x80
 80016e6:	025b      	lsls	r3, r3, #9
 80016e8:	4013      	ands	r3, r2
 80016ea:	d131      	bne.n	8001750 <HAL_ADC_ConfigChannel+0x1d4>
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	2380      	movs	r3, #128	@ 0x80
 80016f2:	029b      	lsls	r3, r3, #10
 80016f4:	4013      	ands	r3, r2
 80016f6:	d129      	bne.n	800174c <HAL_ADC_ConfigChannel+0x1d0>
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	2380      	movs	r3, #128	@ 0x80
 80016fe:	02db      	lsls	r3, r3, #11
 8001700:	4013      	ands	r3, r2
 8001702:	d121      	bne.n	8001748 <HAL_ADC_ConfigChannel+0x1cc>
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	2380      	movs	r3, #128	@ 0x80
 800170a:	031b      	lsls	r3, r3, #12
 800170c:	4013      	ands	r3, r2
 800170e:	d119      	bne.n	8001744 <HAL_ADC_ConfigChannel+0x1c8>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	2380      	movs	r3, #128	@ 0x80
 8001716:	035b      	lsls	r3, r3, #13
 8001718:	4013      	ands	r3, r2
 800171a:	d111      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x1c4>
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	2380      	movs	r3, #128	@ 0x80
 8001722:	039b      	lsls	r3, r3, #14
 8001724:	4013      	ands	r3, r2
 8001726:	d109      	bne.n	800173c <HAL_ADC_ConfigChannel+0x1c0>
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	2380      	movs	r3, #128	@ 0x80
 800172e:	03db      	lsls	r3, r3, #15
 8001730:	4013      	ands	r3, r2
 8001732:	d001      	beq.n	8001738 <HAL_ADC_ConfigChannel+0x1bc>
 8001734:	2316      	movs	r3, #22
 8001736:	e02c      	b.n	8001792 <HAL_ADC_ConfigChannel+0x216>
 8001738:	2300      	movs	r3, #0
 800173a:	e02a      	b.n	8001792 <HAL_ADC_ConfigChannel+0x216>
 800173c:	2315      	movs	r3, #21
 800173e:	e028      	b.n	8001792 <HAL_ADC_ConfigChannel+0x216>
 8001740:	2314      	movs	r3, #20
 8001742:	e026      	b.n	8001792 <HAL_ADC_ConfigChannel+0x216>
 8001744:	2313      	movs	r3, #19
 8001746:	e024      	b.n	8001792 <HAL_ADC_ConfigChannel+0x216>
 8001748:	2312      	movs	r3, #18
 800174a:	e022      	b.n	8001792 <HAL_ADC_ConfigChannel+0x216>
 800174c:	2311      	movs	r3, #17
 800174e:	e020      	b.n	8001792 <HAL_ADC_ConfigChannel+0x216>
 8001750:	2310      	movs	r3, #16
 8001752:	e01e      	b.n	8001792 <HAL_ADC_ConfigChannel+0x216>
 8001754:	230f      	movs	r3, #15
 8001756:	e01c      	b.n	8001792 <HAL_ADC_ConfigChannel+0x216>
 8001758:	230e      	movs	r3, #14
 800175a:	e01a      	b.n	8001792 <HAL_ADC_ConfigChannel+0x216>
 800175c:	230d      	movs	r3, #13
 800175e:	e018      	b.n	8001792 <HAL_ADC_ConfigChannel+0x216>
 8001760:	230c      	movs	r3, #12
 8001762:	e016      	b.n	8001792 <HAL_ADC_ConfigChannel+0x216>
 8001764:	230b      	movs	r3, #11
 8001766:	e014      	b.n	8001792 <HAL_ADC_ConfigChannel+0x216>
 8001768:	230a      	movs	r3, #10
 800176a:	e012      	b.n	8001792 <HAL_ADC_ConfigChannel+0x216>
 800176c:	2309      	movs	r3, #9
 800176e:	e010      	b.n	8001792 <HAL_ADC_ConfigChannel+0x216>
 8001770:	2308      	movs	r3, #8
 8001772:	e00e      	b.n	8001792 <HAL_ADC_ConfigChannel+0x216>
 8001774:	2307      	movs	r3, #7
 8001776:	e00c      	b.n	8001792 <HAL_ADC_ConfigChannel+0x216>
 8001778:	2306      	movs	r3, #6
 800177a:	e00a      	b.n	8001792 <HAL_ADC_ConfigChannel+0x216>
 800177c:	2305      	movs	r3, #5
 800177e:	e008      	b.n	8001792 <HAL_ADC_ConfigChannel+0x216>
 8001780:	2304      	movs	r3, #4
 8001782:	e006      	b.n	8001792 <HAL_ADC_ConfigChannel+0x216>
 8001784:	2303      	movs	r3, #3
 8001786:	e004      	b.n	8001792 <HAL_ADC_ConfigChannel+0x216>
 8001788:	2302      	movs	r3, #2
 800178a:	e002      	b.n	8001792 <HAL_ADC_ConfigChannel+0x216>
 800178c:	2301      	movs	r3, #1
 800178e:	e000      	b.n	8001792 <HAL_ADC_ConfigChannel+0x216>
 8001790:	2300      	movs	r3, #0
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	6852      	ldr	r2, [r2, #4]
 8001796:	201f      	movs	r0, #31
 8001798:	4002      	ands	r2, r0
 800179a:	4093      	lsls	r3, r2
 800179c:	000a      	movs	r2, r1
 800179e:	431a      	orrs	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	089b      	lsrs	r3, r3, #2
 80017aa:	1c5a      	adds	r2, r3, #1
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	69db      	ldr	r3, [r3, #28]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d808      	bhi.n	80017c6 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6818      	ldr	r0, [r3, #0]
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	6859      	ldr	r1, [r3, #4]
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	001a      	movs	r2, r3
 80017c2:	f7ff fb0d 	bl	8000de0 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6818      	ldr	r0, [r3, #0]
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	6819      	ldr	r1, [r3, #0]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	001a      	movs	r2, r3
 80017d4:	f7ff fb48 	bl	8000e68 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	db00      	blt.n	80017e2 <HAL_ADC_ConfigChannel+0x266>
 80017e0:	e096      	b.n	8001910 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017e2:	4b3f      	ldr	r3, [pc, #252]	@ (80018e0 <HAL_ADC_ConfigChannel+0x364>)
 80017e4:	0018      	movs	r0, r3
 80017e6:	f7ff faa9 	bl	8000d3c <LL_ADC_GetCommonPathInternalCh>
 80017ea:	0003      	movs	r3, r0
 80017ec:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a3c      	ldr	r2, [pc, #240]	@ (80018e4 <HAL_ADC_ConfigChannel+0x368>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d123      	bne.n	8001840 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	2380      	movs	r3, #128	@ 0x80
 80017fc:	041b      	lsls	r3, r3, #16
 80017fe:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001800:	d11e      	bne.n	8001840 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	2280      	movs	r2, #128	@ 0x80
 8001806:	0412      	lsls	r2, r2, #16
 8001808:	4313      	orrs	r3, r2
 800180a:	4a35      	ldr	r2, [pc, #212]	@ (80018e0 <HAL_ADC_ConfigChannel+0x364>)
 800180c:	0019      	movs	r1, r3
 800180e:	0010      	movs	r0, r2
 8001810:	f7ff fa80 	bl	8000d14 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001814:	4b34      	ldr	r3, [pc, #208]	@ (80018e8 <HAL_ADC_ConfigChannel+0x36c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4934      	ldr	r1, [pc, #208]	@ (80018ec <HAL_ADC_ConfigChannel+0x370>)
 800181a:	0018      	movs	r0, r3
 800181c:	f7fe fc74 	bl	8000108 <__udivsi3>
 8001820:	0003      	movs	r3, r0
 8001822:	001a      	movs	r2, r3
 8001824:	0013      	movs	r3, r2
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	189b      	adds	r3, r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	3301      	adds	r3, #1
 800182e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001830:	e002      	b.n	8001838 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	3b01      	subs	r3, #1
 8001836:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f9      	bne.n	8001832 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800183e:	e067      	b.n	8001910 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a2a      	ldr	r2, [pc, #168]	@ (80018f0 <HAL_ADC_ConfigChannel+0x374>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d162      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	2380      	movs	r3, #128	@ 0x80
 800184e:	03db      	lsls	r3, r3, #15
 8001850:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001852:	d15d      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	2280      	movs	r2, #128	@ 0x80
 8001858:	03d2      	lsls	r2, r2, #15
 800185a:	4313      	orrs	r3, r2
 800185c:	4a20      	ldr	r2, [pc, #128]	@ (80018e0 <HAL_ADC_ConfigChannel+0x364>)
 800185e:	0019      	movs	r1, r3
 8001860:	0010      	movs	r0, r2
 8001862:	f7ff fa57 	bl	8000d14 <LL_ADC_SetCommonPathInternalCh>
 8001866:	e053      	b.n	8001910 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691a      	ldr	r2, [r3, #16]
 800186c:	2380      	movs	r3, #128	@ 0x80
 800186e:	061b      	lsls	r3, r3, #24
 8001870:	429a      	cmp	r2, r3
 8001872:	d004      	beq.n	800187e <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001878:	4a18      	ldr	r2, [pc, #96]	@ (80018dc <HAL_ADC_ConfigChannel+0x360>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d107      	bne.n	800188e <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	0019      	movs	r1, r3
 8001888:	0010      	movs	r0, r2
 800188a:	f7ff fada 	bl	8000e42 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	da3c      	bge.n	8001910 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001896:	4b12      	ldr	r3, [pc, #72]	@ (80018e0 <HAL_ADC_ConfigChannel+0x364>)
 8001898:	0018      	movs	r0, r3
 800189a:	f7ff fa4f 	bl	8000d3c <LL_ADC_GetCommonPathInternalCh>
 800189e:	0003      	movs	r3, r0
 80018a0:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a0f      	ldr	r2, [pc, #60]	@ (80018e4 <HAL_ADC_ConfigChannel+0x368>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d108      	bne.n	80018be <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	4a11      	ldr	r2, [pc, #68]	@ (80018f4 <HAL_ADC_ConfigChannel+0x378>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	4a0b      	ldr	r2, [pc, #44]	@ (80018e0 <HAL_ADC_ConfigChannel+0x364>)
 80018b4:	0019      	movs	r1, r3
 80018b6:	0010      	movs	r0, r2
 80018b8:	f7ff fa2c 	bl	8000d14 <LL_ADC_SetCommonPathInternalCh>
 80018bc:	e028      	b.n	8001910 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a0b      	ldr	r2, [pc, #44]	@ (80018f0 <HAL_ADC_ConfigChannel+0x374>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d123      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	4a0b      	ldr	r2, [pc, #44]	@ (80018f8 <HAL_ADC_ConfigChannel+0x37c>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	4a04      	ldr	r2, [pc, #16]	@ (80018e0 <HAL_ADC_ConfigChannel+0x364>)
 80018d0:	0019      	movs	r1, r3
 80018d2:	0010      	movs	r0, r2
 80018d4:	f7ff fa1e 	bl	8000d14 <LL_ADC_SetCommonPathInternalCh>
 80018d8:	e01a      	b.n	8001910 <HAL_ADC_ConfigChannel+0x394>
 80018da:	46c0      	nop			@ (mov r8, r8)
 80018dc:	80000004 	.word	0x80000004
 80018e0:	40012708 	.word	0x40012708
 80018e4:	a4000200 	.word	0xa4000200
 80018e8:	20000000 	.word	0x20000000
 80018ec:	00030d40 	.word	0x00030d40
 80018f0:	a8000400 	.word	0xa8000400
 80018f4:	ff7fffff 	.word	0xff7fffff
 80018f8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001900:	2220      	movs	r2, #32
 8001902:	431a      	orrs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001908:	2317      	movs	r3, #23
 800190a:	18fb      	adds	r3, r7, r3
 800190c:	2201      	movs	r2, #1
 800190e:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2254      	movs	r2, #84	@ 0x54
 8001914:	2100      	movs	r1, #0
 8001916:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001918:	2317      	movs	r3, #23
 800191a:	18fb      	adds	r3, r7, r3
 800191c:	781b      	ldrb	r3, [r3, #0]
}
 800191e:	0018      	movs	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	b006      	add	sp, #24
 8001924:	bd80      	pop	{r7, pc}
 8001926:	46c0      	nop			@ (mov r8, r8)

08001928 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	0018      	movs	r0, r3
 8001936:	f7ff fb45 	bl	8000fc4 <LL_ADC_REG_IsConversionOngoing>
 800193a:	1e03      	subs	r3, r0, #0
 800193c:	d02b      	beq.n	8001996 <ADC_ConversionStop+0x6e>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	0018      	movs	r0, r3
 8001944:	f7ff fb09 	bl	8000f5a <LL_ADC_IsDisableOngoing>
 8001948:	1e03      	subs	r3, r0, #0
 800194a:	d104      	bne.n	8001956 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	0018      	movs	r0, r3
 8001952:	f7ff fb25 	bl	8000fa0 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001956:	f7ff f9d3 	bl	8000d00 <HAL_GetTick>
 800195a:	0003      	movs	r3, r0
 800195c:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800195e:	e014      	b.n	800198a <ADC_ConversionStop+0x62>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001960:	f7ff f9ce 	bl	8000d00 <HAL_GetTick>
 8001964:	0002      	movs	r2, r0
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d90d      	bls.n	800198a <ADC_ConversionStop+0x62>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001972:	2210      	movs	r2, #16
 8001974:	431a      	orrs	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800197e:	2201      	movs	r2, #1
 8001980:	431a      	orrs	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e006      	b.n	8001998 <ADC_ConversionStop+0x70>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	2204      	movs	r2, #4
 8001992:	4013      	ands	r3, r2
 8001994:	d1e4      	bne.n	8001960 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	0018      	movs	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	b004      	add	sp, #16
 800199e:	bd80      	pop	{r7, pc}

080019a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	0018      	movs	r0, r3
 80019b2:	f7ff fac1 	bl	8000f38 <LL_ADC_IsEnabled>
 80019b6:	1e03      	subs	r3, r0, #0
 80019b8:	d162      	bne.n	8001a80 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	4a32      	ldr	r2, [pc, #200]	@ (8001a8c <ADC_Enable+0xec>)
 80019c2:	4013      	ands	r3, r2
 80019c4:	d00d      	beq.n	80019e2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ca:	2210      	movs	r2, #16
 80019cc:	431a      	orrs	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d6:	2201      	movs	r2, #1
 80019d8:	431a      	orrs	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e04f      	b.n	8001a82 <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	0018      	movs	r0, r3
 80019e8:	f7ff fa82 	bl	8000ef0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80019ec:	4b28      	ldr	r3, [pc, #160]	@ (8001a90 <ADC_Enable+0xf0>)
 80019ee:	0018      	movs	r0, r3
 80019f0:	f7ff f9a4 	bl	8000d3c <LL_ADC_GetCommonPathInternalCh>
 80019f4:	0002      	movs	r2, r0
 80019f6:	2380      	movs	r3, #128	@ 0x80
 80019f8:	041b      	lsls	r3, r3, #16
 80019fa:	4013      	ands	r3, r2
 80019fc:	d00f      	beq.n	8001a1e <ADC_Enable+0x7e>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019fe:	4b25      	ldr	r3, [pc, #148]	@ (8001a94 <ADC_Enable+0xf4>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4925      	ldr	r1, [pc, #148]	@ (8001a98 <ADC_Enable+0xf8>)
 8001a04:	0018      	movs	r0, r3
 8001a06:	f7fe fb7f 	bl	8000108 <__udivsi3>
 8001a0a:	0003      	movs	r3, r0
 8001a0c:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001a0e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001a10:	e002      	b.n	8001a18 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f9      	bne.n	8001a12 <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	7e5b      	ldrb	r3, [r3, #25]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d02c      	beq.n	8001a80 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001a26:	f7ff f96b 	bl	8000d00 <HAL_GetTick>
 8001a2a:	0003      	movs	r3, r0
 8001a2c:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001a2e:	e020      	b.n	8001a72 <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	0018      	movs	r0, r3
 8001a36:	f7ff fa7f 	bl	8000f38 <LL_ADC_IsEnabled>
 8001a3a:	1e03      	subs	r3, r0, #0
 8001a3c:	d104      	bne.n	8001a48 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	0018      	movs	r0, r3
 8001a44:	f7ff fa54 	bl	8000ef0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a48:	f7ff f95a 	bl	8000d00 <HAL_GetTick>
 8001a4c:	0002      	movs	r2, r0
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d90d      	bls.n	8001a72 <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a5a:	2210      	movs	r2, #16
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a66:	2201      	movs	r2, #1
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e007      	b.n	8001a82 <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d1d7      	bne.n	8001a30 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	0018      	movs	r0, r3
 8001a84:	46bd      	mov	sp, r7
 8001a86:	b004      	add	sp, #16
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	46c0      	nop			@ (mov r8, r8)
 8001a8c:	80000017 	.word	0x80000017
 8001a90:	40012708 	.word	0x40012708
 8001a94:	20000000 	.word	0x20000000
 8001a98:	00030d40 	.word	0x00030d40

08001a9c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f7ff fa56 	bl	8000f5a <LL_ADC_IsDisableOngoing>
 8001aae:	0003      	movs	r3, r0
 8001ab0:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	f7ff fa3e 	bl	8000f38 <LL_ADC_IsEnabled>
 8001abc:	1e03      	subs	r3, r0, #0
 8001abe:	d040      	beq.n	8001b42 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d13d      	bne.n	8001b42 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2205      	movs	r2, #5
 8001ace:	4013      	ands	r3, r2
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d10d      	bne.n	8001af0 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f7ff fa1b 	bl	8000f14 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2203      	movs	r2, #3
 8001ae4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ae6:	f7ff f90b 	bl	8000d00 <HAL_GetTick>
 8001aea:	0003      	movs	r3, r0
 8001aec:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001aee:	e022      	b.n	8001b36 <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af4:	2210      	movs	r2, #16
 8001af6:	431a      	orrs	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b00:	2201      	movs	r2, #1
 8001b02:	431a      	orrs	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e01b      	b.n	8001b44 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b0c:	f7ff f8f8 	bl	8000d00 <HAL_GetTick>
 8001b10:	0002      	movs	r2, r0
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d90d      	bls.n	8001b36 <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b1e:	2210      	movs	r2, #16
 8001b20:	431a      	orrs	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e006      	b.n	8001b44 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d1e4      	bne.n	8001b0c <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	0018      	movs	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	b004      	add	sp, #16
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	0002      	movs	r2, r0
 8001b54:	1dfb      	adds	r3, r7, #7
 8001b56:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b58:	1dfb      	adds	r3, r7, #7
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b5e:	d809      	bhi.n	8001b74 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b60:	1dfb      	adds	r3, r7, #7
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	001a      	movs	r2, r3
 8001b66:	231f      	movs	r3, #31
 8001b68:	401a      	ands	r2, r3
 8001b6a:	4b04      	ldr	r3, [pc, #16]	@ (8001b7c <__NVIC_EnableIRQ+0x30>)
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	4091      	lsls	r1, r2
 8001b70:	000a      	movs	r2, r1
 8001b72:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001b74:	46c0      	nop			@ (mov r8, r8)
 8001b76:	46bd      	mov	sp, r7
 8001b78:	b002      	add	sp, #8
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	e000e100 	.word	0xe000e100

08001b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b80:	b590      	push	{r4, r7, lr}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	0002      	movs	r2, r0
 8001b88:	6039      	str	r1, [r7, #0]
 8001b8a:	1dfb      	adds	r3, r7, #7
 8001b8c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b8e:	1dfb      	adds	r3, r7, #7
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b94:	d828      	bhi.n	8001be8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b96:	4a2f      	ldr	r2, [pc, #188]	@ (8001c54 <__NVIC_SetPriority+0xd4>)
 8001b98:	1dfb      	adds	r3, r7, #7
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	b25b      	sxtb	r3, r3
 8001b9e:	089b      	lsrs	r3, r3, #2
 8001ba0:	33c0      	adds	r3, #192	@ 0xc0
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	589b      	ldr	r3, [r3, r2]
 8001ba6:	1dfa      	adds	r2, r7, #7
 8001ba8:	7812      	ldrb	r2, [r2, #0]
 8001baa:	0011      	movs	r1, r2
 8001bac:	2203      	movs	r2, #3
 8001bae:	400a      	ands	r2, r1
 8001bb0:	00d2      	lsls	r2, r2, #3
 8001bb2:	21ff      	movs	r1, #255	@ 0xff
 8001bb4:	4091      	lsls	r1, r2
 8001bb6:	000a      	movs	r2, r1
 8001bb8:	43d2      	mvns	r2, r2
 8001bba:	401a      	ands	r2, r3
 8001bbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	019b      	lsls	r3, r3, #6
 8001bc2:	22ff      	movs	r2, #255	@ 0xff
 8001bc4:	401a      	ands	r2, r3
 8001bc6:	1dfb      	adds	r3, r7, #7
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	0018      	movs	r0, r3
 8001bcc:	2303      	movs	r3, #3
 8001bce:	4003      	ands	r3, r0
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bd4:	481f      	ldr	r0, [pc, #124]	@ (8001c54 <__NVIC_SetPriority+0xd4>)
 8001bd6:	1dfb      	adds	r3, r7, #7
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	b25b      	sxtb	r3, r3
 8001bdc:	089b      	lsrs	r3, r3, #2
 8001bde:	430a      	orrs	r2, r1
 8001be0:	33c0      	adds	r3, #192	@ 0xc0
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001be6:	e031      	b.n	8001c4c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001be8:	4a1b      	ldr	r2, [pc, #108]	@ (8001c58 <__NVIC_SetPriority+0xd8>)
 8001bea:	1dfb      	adds	r3, r7, #7
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	0019      	movs	r1, r3
 8001bf0:	230f      	movs	r3, #15
 8001bf2:	400b      	ands	r3, r1
 8001bf4:	3b08      	subs	r3, #8
 8001bf6:	089b      	lsrs	r3, r3, #2
 8001bf8:	3306      	adds	r3, #6
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	18d3      	adds	r3, r2, r3
 8001bfe:	3304      	adds	r3, #4
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	1dfa      	adds	r2, r7, #7
 8001c04:	7812      	ldrb	r2, [r2, #0]
 8001c06:	0011      	movs	r1, r2
 8001c08:	2203      	movs	r2, #3
 8001c0a:	400a      	ands	r2, r1
 8001c0c:	00d2      	lsls	r2, r2, #3
 8001c0e:	21ff      	movs	r1, #255	@ 0xff
 8001c10:	4091      	lsls	r1, r2
 8001c12:	000a      	movs	r2, r1
 8001c14:	43d2      	mvns	r2, r2
 8001c16:	401a      	ands	r2, r3
 8001c18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	019b      	lsls	r3, r3, #6
 8001c1e:	22ff      	movs	r2, #255	@ 0xff
 8001c20:	401a      	ands	r2, r3
 8001c22:	1dfb      	adds	r3, r7, #7
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	0018      	movs	r0, r3
 8001c28:	2303      	movs	r3, #3
 8001c2a:	4003      	ands	r3, r0
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c30:	4809      	ldr	r0, [pc, #36]	@ (8001c58 <__NVIC_SetPriority+0xd8>)
 8001c32:	1dfb      	adds	r3, r7, #7
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	001c      	movs	r4, r3
 8001c38:	230f      	movs	r3, #15
 8001c3a:	4023      	ands	r3, r4
 8001c3c:	3b08      	subs	r3, #8
 8001c3e:	089b      	lsrs	r3, r3, #2
 8001c40:	430a      	orrs	r2, r1
 8001c42:	3306      	adds	r3, #6
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	18c3      	adds	r3, r0, r3
 8001c48:	3304      	adds	r3, #4
 8001c4a:	601a      	str	r2, [r3, #0]
}
 8001c4c:	46c0      	nop			@ (mov r8, r8)
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	b003      	add	sp, #12
 8001c52:	bd90      	pop	{r4, r7, pc}
 8001c54:	e000e100 	.word	0xe000e100
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	607a      	str	r2, [r7, #4]
 8001c66:	210f      	movs	r1, #15
 8001c68:	187b      	adds	r3, r7, r1
 8001c6a:	1c02      	adds	r2, r0, #0
 8001c6c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	187b      	adds	r3, r7, r1
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	b25b      	sxtb	r3, r3
 8001c76:	0011      	movs	r1, r2
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f7ff ff81 	bl	8001b80 <__NVIC_SetPriority>
}
 8001c7e:	46c0      	nop			@ (mov r8, r8)
 8001c80:	46bd      	mov	sp, r7
 8001c82:	b004      	add	sp, #16
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	0002      	movs	r2, r0
 8001c8e:	1dfb      	adds	r3, r7, #7
 8001c90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c92:	1dfb      	adds	r3, r7, #7
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	b25b      	sxtb	r3, r3
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f7ff ff57 	bl	8001b4c <__NVIC_EnableIRQ>
}
 8001c9e:	46c0      	nop			@ (mov r8, r8)
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	b002      	add	sp, #8
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b086      	sub	sp, #24
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	60f8      	str	r0, [r7, #12]
 8001cae:	607a      	str	r2, [r7, #4]
 8001cb0:	200b      	movs	r0, #11
 8001cb2:	183b      	adds	r3, r7, r0
 8001cb4:	1c0a      	adds	r2, r1, #0
 8001cb6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cb8:	2317      	movs	r3, #23
 8001cba:	18fb      	adds	r3, r7, r3
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]

  switch (CallbackID)
 8001cc0:	183b      	adds	r3, r7, r0
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d010      	beq.n	8001cea <HAL_EXTI_RegisterCallback+0x44>
 8001cc8:	dc13      	bgt.n	8001cf2 <HAL_EXTI_RegisterCallback+0x4c>
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d002      	beq.n	8001cd4 <HAL_EXTI_RegisterCallback+0x2e>
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d007      	beq.n	8001ce2 <HAL_EXTI_RegisterCallback+0x3c>
 8001cd2:	e00e      	b.n	8001cf2 <HAL_EXTI_RegisterCallback+0x4c>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	609a      	str	r2, [r3, #8]
      break;
 8001ce0:	e00c      	b.n	8001cfc <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	605a      	str	r2, [r3, #4]
      break;
 8001ce8:	e008      	b.n	8001cfc <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	609a      	str	r2, [r3, #8]
      break;
 8001cf0:	e004      	b.n	8001cfc <HAL_EXTI_RegisterCallback+0x56>

    default:
      status = HAL_ERROR;
 8001cf2:	2317      	movs	r3, #23
 8001cf4:	18fb      	adds	r3, r7, r3
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	701a      	strb	r2, [r3, #0]
      break;
 8001cfa:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
 8001cfc:	2317      	movs	r3, #23
 8001cfe:	18fb      	adds	r3, r7, r3
 8001d00:	781b      	ldrb	r3, [r3, #0]
}
 8001d02:	0018      	movs	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	b006      	add	sp, #24
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
 8001d12:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e003      	b.n	8001d26 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001d24:	2300      	movs	r3, #0
  }
}
 8001d26:	0018      	movs	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	b002      	add	sp, #8
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	0c1b      	lsrs	r3, r3, #16
 8001d3e:	2201      	movs	r2, #1
 8001d40:	4013      	ands	r3, r2
 8001d42:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	221f      	movs	r2, #31
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	409a      	lsls	r2, r3
 8001d50:	0013      	movs	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	015b      	lsls	r3, r3, #5
 8001d58:	4a18      	ldr	r2, [pc, #96]	@ (8001dbc <HAL_EXTI_IRQHandler+0x8c>)
 8001d5a:	4694      	mov	ip, r2
 8001d5c:	4463      	add	r3, ip
 8001d5e:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	4013      	ands	r3, r2
 8001d68:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d009      	beq.n	8001d84 <HAL_EXTI_IRQHandler+0x54>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d002      	beq.n	8001d84 <HAL_EXTI_IRQHandler+0x54>
    {
      hexti->RisingCallback();
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	015b      	lsls	r3, r3, #5
 8001d88:	4a0d      	ldr	r2, [pc, #52]	@ (8001dc0 <HAL_EXTI_IRQHandler+0x90>)
 8001d8a:	4694      	mov	ip, r2
 8001d8c:	4463      	add	r3, ip
 8001d8e:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	4013      	ands	r3, r2
 8001d98:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d009      	beq.n	8001db4 <HAL_EXTI_IRQHandler+0x84>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d002      	beq.n	8001db4 <HAL_EXTI_IRQHandler+0x84>
    {
      hexti->FallingCallback();
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	4798      	blx	r3
    }
  }
}
 8001db4:	46c0      	nop			@ (mov r8, r8)
 8001db6:	46bd      	mov	sp, r7
 8001db8:	b006      	add	sp, #24
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	4002180c 	.word	0x4002180c
 8001dc0:	40021810 	.word	0x40021810

08001dc4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001dd2:	e153      	b.n	800207c <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2101      	movs	r1, #1
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4091      	lsls	r1, r2
 8001dde:	000a      	movs	r2, r1
 8001de0:	4013      	ands	r3, r2
 8001de2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d100      	bne.n	8001dec <HAL_GPIO_Init+0x28>
 8001dea:	e144      	b.n	8002076 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d003      	beq.n	8001dfc <HAL_GPIO_Init+0x38>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b12      	cmp	r3, #18
 8001dfa:	d125      	bne.n	8001e48 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	08da      	lsrs	r2, r3, #3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3208      	adds	r2, #8
 8001e04:	0092      	lsls	r2, r2, #2
 8001e06:	58d3      	ldr	r3, [r2, r3]
 8001e08:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	2207      	movs	r2, #7
 8001e0e:	4013      	ands	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	220f      	movs	r2, #15
 8001e14:	409a      	lsls	r2, r3
 8001e16:	0013      	movs	r3, r2
 8001e18:	43da      	mvns	r2, r3
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	220f      	movs	r2, #15
 8001e26:	401a      	ands	r2, r3
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	2107      	movs	r1, #7
 8001e2c:	400b      	ands	r3, r1
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	409a      	lsls	r2, r3
 8001e32:	0013      	movs	r3, r2
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	08da      	lsrs	r2, r3, #3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3208      	adds	r2, #8
 8001e42:	0092      	lsls	r2, r2, #2
 8001e44:	6979      	ldr	r1, [r7, #20]
 8001e46:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	2203      	movs	r2, #3
 8001e54:	409a      	lsls	r2, r3
 8001e56:	0013      	movs	r3, r2
 8001e58:	43da      	mvns	r2, r3
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2203      	movs	r2, #3
 8001e66:	401a      	ands	r2, r3
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	409a      	lsls	r2, r3
 8001e6e:	0013      	movs	r3, r2
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d00b      	beq.n	8001e9c <HAL_GPIO_Init+0xd8>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d007      	beq.n	8001e9c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e90:	2b11      	cmp	r3, #17
 8001e92:	d003      	beq.n	8001e9c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b12      	cmp	r3, #18
 8001e9a:	d130      	bne.n	8001efe <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	2203      	movs	r2, #3
 8001ea8:	409a      	lsls	r2, r3
 8001eaa:	0013      	movs	r3, r2
 8001eac:	43da      	mvns	r2, r3
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	409a      	lsls	r2, r3
 8001ebe:	0013      	movs	r3, r2
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	409a      	lsls	r2, r3
 8001ed8:	0013      	movs	r3, r2
 8001eda:	43da      	mvns	r2, r3
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	2201      	movs	r2, #1
 8001eea:	401a      	ands	r2, r3
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	409a      	lsls	r2, r3
 8001ef0:	0013      	movs	r3, r2
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b03      	cmp	r3, #3
 8001f04:	d017      	beq.n	8001f36 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	2203      	movs	r2, #3
 8001f12:	409a      	lsls	r2, r3
 8001f14:	0013      	movs	r3, r2
 8001f16:	43da      	mvns	r2, r3
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	409a      	lsls	r2, r3
 8001f28:	0013      	movs	r3, r2
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	2380      	movs	r3, #128	@ 0x80
 8001f3c:	055b      	lsls	r3, r3, #21
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d100      	bne.n	8001f44 <HAL_GPIO_Init+0x180>
 8001f42:	e098      	b.n	8002076 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001f44:	4a53      	ldr	r2, [pc, #332]	@ (8002094 <HAL_GPIO_Init+0x2d0>)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	089b      	lsrs	r3, r3, #2
 8001f4a:	3318      	adds	r3, #24
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	589b      	ldr	r3, [r3, r2]
 8001f50:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	2203      	movs	r2, #3
 8001f56:	4013      	ands	r3, r2
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	220f      	movs	r2, #15
 8001f5c:	409a      	lsls	r2, r3
 8001f5e:	0013      	movs	r3, r2
 8001f60:	43da      	mvns	r2, r3
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	4013      	ands	r3, r2
 8001f66:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	23a0      	movs	r3, #160	@ 0xa0
 8001f6c:	05db      	lsls	r3, r3, #23
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d019      	beq.n	8001fa6 <HAL_GPIO_Init+0x1e2>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a48      	ldr	r2, [pc, #288]	@ (8002098 <HAL_GPIO_Init+0x2d4>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d013      	beq.n	8001fa2 <HAL_GPIO_Init+0x1de>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a47      	ldr	r2, [pc, #284]	@ (800209c <HAL_GPIO_Init+0x2d8>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d00d      	beq.n	8001f9e <HAL_GPIO_Init+0x1da>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a46      	ldr	r2, [pc, #280]	@ (80020a0 <HAL_GPIO_Init+0x2dc>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d007      	beq.n	8001f9a <HAL_GPIO_Init+0x1d6>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a45      	ldr	r2, [pc, #276]	@ (80020a4 <HAL_GPIO_Init+0x2e0>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d101      	bne.n	8001f96 <HAL_GPIO_Init+0x1d2>
 8001f92:	2305      	movs	r3, #5
 8001f94:	e008      	b.n	8001fa8 <HAL_GPIO_Init+0x1e4>
 8001f96:	2306      	movs	r3, #6
 8001f98:	e006      	b.n	8001fa8 <HAL_GPIO_Init+0x1e4>
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e004      	b.n	8001fa8 <HAL_GPIO_Init+0x1e4>
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	e002      	b.n	8001fa8 <HAL_GPIO_Init+0x1e4>
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e000      	b.n	8001fa8 <HAL_GPIO_Init+0x1e4>
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	2103      	movs	r1, #3
 8001fac:	400a      	ands	r2, r1
 8001fae:	00d2      	lsls	r2, r2, #3
 8001fb0:	4093      	lsls	r3, r2
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001fb8:	4936      	ldr	r1, [pc, #216]	@ (8002094 <HAL_GPIO_Init+0x2d0>)
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	089b      	lsrs	r3, r3, #2
 8001fbe:	3318      	adds	r3, #24
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001fc6:	4a33      	ldr	r2, [pc, #204]	@ (8002094 <HAL_GPIO_Init+0x2d0>)
 8001fc8:	2380      	movs	r3, #128	@ 0x80
 8001fca:	58d3      	ldr	r3, [r2, r3]
 8001fcc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	43da      	mvns	r2, r3
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	2380      	movs	r3, #128	@ 0x80
 8001fde:	025b      	lsls	r3, r3, #9
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	d003      	beq.n	8001fec <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001fec:	4929      	ldr	r1, [pc, #164]	@ (8002094 <HAL_GPIO_Init+0x2d0>)
 8001fee:	2280      	movs	r2, #128	@ 0x80
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001ff4:	4a27      	ldr	r2, [pc, #156]	@ (8002094 <HAL_GPIO_Init+0x2d0>)
 8001ff6:	2384      	movs	r3, #132	@ 0x84
 8001ff8:	58d3      	ldr	r3, [r2, r3]
 8001ffa:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	43da      	mvns	r2, r3
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	4013      	ands	r3, r2
 8002004:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	2380      	movs	r3, #128	@ 0x80
 800200c:	029b      	lsls	r3, r3, #10
 800200e:	4013      	ands	r3, r2
 8002010:	d003      	beq.n	800201a <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4313      	orrs	r3, r2
 8002018:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800201a:	491e      	ldr	r1, [pc, #120]	@ (8002094 <HAL_GPIO_Init+0x2d0>)
 800201c:	2284      	movs	r2, #132	@ 0x84
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002022:	4b1c      	ldr	r3, [pc, #112]	@ (8002094 <HAL_GPIO_Init+0x2d0>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	43da      	mvns	r2, r3
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	4013      	ands	r3, r2
 8002030:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	2380      	movs	r3, #128	@ 0x80
 8002038:	035b      	lsls	r3, r3, #13
 800203a:	4013      	ands	r3, r2
 800203c:	d003      	beq.n	8002046 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4313      	orrs	r3, r2
 8002044:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002046:	4b13      	ldr	r3, [pc, #76]	@ (8002094 <HAL_GPIO_Init+0x2d0>)
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 800204c:	4b11      	ldr	r3, [pc, #68]	@ (8002094 <HAL_GPIO_Init+0x2d0>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	43da      	mvns	r2, r3
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	4013      	ands	r3, r2
 800205a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	2380      	movs	r3, #128	@ 0x80
 8002062:	039b      	lsls	r3, r3, #14
 8002064:	4013      	ands	r3, r2
 8002066:	d003      	beq.n	8002070 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	4313      	orrs	r3, r2
 800206e:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002070:	4b08      	ldr	r3, [pc, #32]	@ (8002094 <HAL_GPIO_Init+0x2d0>)
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	3301      	adds	r3, #1
 800207a:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	40da      	lsrs	r2, r3
 8002084:	1e13      	subs	r3, r2, #0
 8002086:	d000      	beq.n	800208a <HAL_GPIO_Init+0x2c6>
 8002088:	e6a4      	b.n	8001dd4 <HAL_GPIO_Init+0x10>
  }
}
 800208a:	46c0      	nop			@ (mov r8, r8)
 800208c:	46c0      	nop			@ (mov r8, r8)
 800208e:	46bd      	mov	sp, r7
 8002090:	b006      	add	sp, #24
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40021800 	.word	0x40021800
 8002098:	50000400 	.word	0x50000400
 800209c:	50000800 	.word	0x50000800
 80020a0:	50000c00 	.word	0x50000c00
 80020a4:	50001400 	.word	0x50001400

080020a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	0008      	movs	r0, r1
 80020b2:	0011      	movs	r1, r2
 80020b4:	1cbb      	adds	r3, r7, #2
 80020b6:	1c02      	adds	r2, r0, #0
 80020b8:	801a      	strh	r2, [r3, #0]
 80020ba:	1c7b      	adds	r3, r7, #1
 80020bc:	1c0a      	adds	r2, r1, #0
 80020be:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020c0:	1c7b      	adds	r3, r7, #1
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d004      	beq.n	80020d2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020c8:	1cbb      	adds	r3, r7, #2
 80020ca:	881a      	ldrh	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020d0:	e003      	b.n	80020da <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020d2:	1cbb      	adds	r3, r7, #2
 80020d4:	881a      	ldrh	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020da:	46c0      	nop			@ (mov r8, r8)
 80020dc:	46bd      	mov	sp, r7
 80020de:	b002      	add	sp, #8
 80020e0:	bd80      	pop	{r7, pc}
	...

080020e4 <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e1d0      	b.n	8002498 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2201      	movs	r2, #1
 80020fc:	4013      	ands	r3, r2
 80020fe:	d100      	bne.n	8002102 <HAL_RCC_OscConfig+0x1e>
 8002100:	e069      	b.n	80021d6 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002102:	4bc8      	ldr	r3, [pc, #800]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	2238      	movs	r2, #56	@ 0x38
 8002108:	4013      	ands	r3, r2
 800210a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2b08      	cmp	r3, #8
 8002110:	d105      	bne.n	800211e <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d15d      	bne.n	80021d6 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e1bc      	b.n	8002498 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	2380      	movs	r3, #128	@ 0x80
 8002124:	025b      	lsls	r3, r3, #9
 8002126:	429a      	cmp	r2, r3
 8002128:	d107      	bne.n	800213a <HAL_RCC_OscConfig+0x56>
 800212a:	4bbe      	ldr	r3, [pc, #760]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	4bbd      	ldr	r3, [pc, #756]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 8002130:	2180      	movs	r1, #128	@ 0x80
 8002132:	0249      	lsls	r1, r1, #9
 8002134:	430a      	orrs	r2, r1
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	e020      	b.n	800217c <HAL_RCC_OscConfig+0x98>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	23a0      	movs	r3, #160	@ 0xa0
 8002140:	02db      	lsls	r3, r3, #11
 8002142:	429a      	cmp	r2, r3
 8002144:	d10e      	bne.n	8002164 <HAL_RCC_OscConfig+0x80>
 8002146:	4bb7      	ldr	r3, [pc, #732]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	4bb6      	ldr	r3, [pc, #728]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 800214c:	2180      	movs	r1, #128	@ 0x80
 800214e:	02c9      	lsls	r1, r1, #11
 8002150:	430a      	orrs	r2, r1
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	4bb3      	ldr	r3, [pc, #716]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	4bb2      	ldr	r3, [pc, #712]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 800215a:	2180      	movs	r1, #128	@ 0x80
 800215c:	0249      	lsls	r1, r1, #9
 800215e:	430a      	orrs	r2, r1
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	e00b      	b.n	800217c <HAL_RCC_OscConfig+0x98>
 8002164:	4baf      	ldr	r3, [pc, #700]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4bae      	ldr	r3, [pc, #696]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 800216a:	49af      	ldr	r1, [pc, #700]	@ (8002428 <HAL_RCC_OscConfig+0x344>)
 800216c:	400a      	ands	r2, r1
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	4bac      	ldr	r3, [pc, #688]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4bab      	ldr	r3, [pc, #684]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 8002176:	49ad      	ldr	r1, [pc, #692]	@ (800242c <HAL_RCC_OscConfig+0x348>)
 8002178:	400a      	ands	r2, r1
 800217a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d014      	beq.n	80021ae <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002184:	f7fe fdbc 	bl	8000d00 <HAL_GetTick>
 8002188:	0003      	movs	r3, r0
 800218a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800218e:	f7fe fdb7 	bl	8000d00 <HAL_GetTick>
 8002192:	0002      	movs	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b64      	cmp	r3, #100	@ 0x64
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e17b      	b.n	8002498 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021a0:	4ba0      	ldr	r3, [pc, #640]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	2380      	movs	r3, #128	@ 0x80
 80021a6:	029b      	lsls	r3, r3, #10
 80021a8:	4013      	ands	r3, r2
 80021aa:	d0f0      	beq.n	800218e <HAL_RCC_OscConfig+0xaa>
 80021ac:	e013      	b.n	80021d6 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ae:	f7fe fda7 	bl	8000d00 <HAL_GetTick>
 80021b2:	0003      	movs	r3, r0
 80021b4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80021b8:	f7fe fda2 	bl	8000d00 <HAL_GetTick>
 80021bc:	0002      	movs	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b64      	cmp	r3, #100	@ 0x64
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e166      	b.n	8002498 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ca:	4b96      	ldr	r3, [pc, #600]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	2380      	movs	r3, #128	@ 0x80
 80021d0:	029b      	lsls	r3, r3, #10
 80021d2:	4013      	ands	r3, r2
 80021d4:	d1f0      	bne.n	80021b8 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2202      	movs	r2, #2
 80021dc:	4013      	ands	r3, r2
 80021de:	d100      	bne.n	80021e2 <HAL_RCC_OscConfig+0xfe>
 80021e0:	e086      	b.n	80022f0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021e2:	4b90      	ldr	r3, [pc, #576]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	2238      	movs	r2, #56	@ 0x38
 80021e8:	4013      	ands	r3, r2
 80021ea:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d12f      	bne.n	8002252 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e14c      	b.n	8002498 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021fe:	4b89      	ldr	r3, [pc, #548]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	4a8b      	ldr	r2, [pc, #556]	@ (8002430 <HAL_RCC_OscConfig+0x34c>)
 8002204:	4013      	ands	r3, r2
 8002206:	0019      	movs	r1, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	021a      	lsls	r2, r3, #8
 800220e:	4b85      	ldr	r3, [pc, #532]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 8002210:	430a      	orrs	r2, r1
 8002212:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d112      	bne.n	8002240 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800221a:	4b82      	ldr	r3, [pc, #520]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a85      	ldr	r2, [pc, #532]	@ (8002434 <HAL_RCC_OscConfig+0x350>)
 8002220:	4013      	ands	r3, r2
 8002222:	0019      	movs	r1, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691a      	ldr	r2, [r3, #16]
 8002228:	4b7e      	ldr	r3, [pc, #504]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 800222a:	430a      	orrs	r2, r1
 800222c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800222e:	4b7d      	ldr	r3, [pc, #500]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	0adb      	lsrs	r3, r3, #11
 8002234:	2207      	movs	r2, #7
 8002236:	4013      	ands	r3, r2
 8002238:	4a7f      	ldr	r2, [pc, #508]	@ (8002438 <HAL_RCC_OscConfig+0x354>)
 800223a:	40da      	lsrs	r2, r3
 800223c:	4b7f      	ldr	r3, [pc, #508]	@ (800243c <HAL_RCC_OscConfig+0x358>)
 800223e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002240:	4b7f      	ldr	r3, [pc, #508]	@ (8002440 <HAL_RCC_OscConfig+0x35c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	0018      	movs	r0, r3
 8002246:	f7fe faa1 	bl	800078c <HAL_InitTick>
 800224a:	1e03      	subs	r3, r0, #0
 800224c:	d050      	beq.n	80022f0 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e122      	b.n	8002498 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d030      	beq.n	80022bc <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800225a:	4b72      	ldr	r3, [pc, #456]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a75      	ldr	r2, [pc, #468]	@ (8002434 <HAL_RCC_OscConfig+0x350>)
 8002260:	4013      	ands	r3, r2
 8002262:	0019      	movs	r1, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691a      	ldr	r2, [r3, #16]
 8002268:	4b6e      	ldr	r3, [pc, #440]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 800226a:	430a      	orrs	r2, r1
 800226c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800226e:	4b6d      	ldr	r3, [pc, #436]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	4b6c      	ldr	r3, [pc, #432]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 8002274:	2180      	movs	r1, #128	@ 0x80
 8002276:	0049      	lsls	r1, r1, #1
 8002278:	430a      	orrs	r2, r1
 800227a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227c:	f7fe fd40 	bl	8000d00 <HAL_GetTick>
 8002280:	0003      	movs	r3, r0
 8002282:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002286:	f7fe fd3b 	bl	8000d00 <HAL_GetTick>
 800228a:	0002      	movs	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e0ff      	b.n	8002498 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002298:	4b62      	ldr	r3, [pc, #392]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	2380      	movs	r3, #128	@ 0x80
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	4013      	ands	r3, r2
 80022a2:	d0f0      	beq.n	8002286 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a4:	4b5f      	ldr	r3, [pc, #380]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	4a61      	ldr	r2, [pc, #388]	@ (8002430 <HAL_RCC_OscConfig+0x34c>)
 80022aa:	4013      	ands	r3, r2
 80022ac:	0019      	movs	r1, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	021a      	lsls	r2, r3, #8
 80022b4:	4b5b      	ldr	r3, [pc, #364]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 80022b6:	430a      	orrs	r2, r1
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	e019      	b.n	80022f0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80022bc:	4b59      	ldr	r3, [pc, #356]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	4b58      	ldr	r3, [pc, #352]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 80022c2:	4960      	ldr	r1, [pc, #384]	@ (8002444 <HAL_RCC_OscConfig+0x360>)
 80022c4:	400a      	ands	r2, r1
 80022c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c8:	f7fe fd1a 	bl	8000d00 <HAL_GetTick>
 80022cc:	0003      	movs	r3, r0
 80022ce:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80022d2:	f7fe fd15 	bl	8000d00 <HAL_GetTick>
 80022d6:	0002      	movs	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e0d9      	b.n	8002498 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022e4:	4b4f      	ldr	r3, [pc, #316]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	2380      	movs	r3, #128	@ 0x80
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4013      	ands	r3, r2
 80022ee:	d1f0      	bne.n	80022d2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2208      	movs	r2, #8
 80022f6:	4013      	ands	r3, r2
 80022f8:	d042      	beq.n	8002380 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80022fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	2238      	movs	r2, #56	@ 0x38
 8002300:	4013      	ands	r3, r2
 8002302:	2b18      	cmp	r3, #24
 8002304:	d105      	bne.n	8002312 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d138      	bne.n	8002380 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e0c2      	b.n	8002498 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d019      	beq.n	800234e <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800231a:	4b42      	ldr	r3, [pc, #264]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 800231c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800231e:	4b41      	ldr	r3, [pc, #260]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 8002320:	2101      	movs	r1, #1
 8002322:	430a      	orrs	r2, r1
 8002324:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002326:	f7fe fceb 	bl	8000d00 <HAL_GetTick>
 800232a:	0003      	movs	r3, r0
 800232c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002330:	f7fe fce6 	bl	8000d00 <HAL_GetTick>
 8002334:	0002      	movs	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e0aa      	b.n	8002498 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002342:	4b38      	ldr	r3, [pc, #224]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 8002344:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002346:	2202      	movs	r2, #2
 8002348:	4013      	ands	r3, r2
 800234a:	d0f1      	beq.n	8002330 <HAL_RCC_OscConfig+0x24c>
 800234c:	e018      	b.n	8002380 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800234e:	4b35      	ldr	r3, [pc, #212]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 8002350:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002352:	4b34      	ldr	r3, [pc, #208]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 8002354:	2101      	movs	r1, #1
 8002356:	438a      	bics	r2, r1
 8002358:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235a:	f7fe fcd1 	bl	8000d00 <HAL_GetTick>
 800235e:	0003      	movs	r3, r0
 8002360:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002364:	f7fe fccc 	bl	8000d00 <HAL_GetTick>
 8002368:	0002      	movs	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e090      	b.n	8002498 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002376:	4b2b      	ldr	r3, [pc, #172]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 8002378:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800237a:	2202      	movs	r2, #2
 800237c:	4013      	ands	r3, r2
 800237e:	d1f1      	bne.n	8002364 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2204      	movs	r2, #4
 8002386:	4013      	ands	r3, r2
 8002388:	d100      	bne.n	800238c <HAL_RCC_OscConfig+0x2a8>
 800238a:	e084      	b.n	8002496 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800238c:	230f      	movs	r3, #15
 800238e:	18fb      	adds	r3, r7, r3
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002394:	4b23      	ldr	r3, [pc, #140]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	2238      	movs	r2, #56	@ 0x38
 800239a:	4013      	ands	r3, r2
 800239c:	2b20      	cmp	r3, #32
 800239e:	d106      	bne.n	80023ae <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d000      	beq.n	80023aa <HAL_RCC_OscConfig+0x2c6>
 80023a8:	e075      	b.n	8002496 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e074      	b.n	8002498 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d106      	bne.n	80023c4 <HAL_RCC_OscConfig+0x2e0>
 80023b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 80023b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80023ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 80023bc:	2101      	movs	r1, #1
 80023be:	430a      	orrs	r2, r1
 80023c0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80023c2:	e01c      	b.n	80023fe <HAL_RCC_OscConfig+0x31a>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	2b05      	cmp	r3, #5
 80023ca:	d10c      	bne.n	80023e6 <HAL_RCC_OscConfig+0x302>
 80023cc:	4b15      	ldr	r3, [pc, #84]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 80023ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80023d0:	4b14      	ldr	r3, [pc, #80]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 80023d2:	2104      	movs	r1, #4
 80023d4:	430a      	orrs	r2, r1
 80023d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80023d8:	4b12      	ldr	r3, [pc, #72]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 80023da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80023dc:	4b11      	ldr	r3, [pc, #68]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 80023de:	2101      	movs	r1, #1
 80023e0:	430a      	orrs	r2, r1
 80023e2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80023e4:	e00b      	b.n	80023fe <HAL_RCC_OscConfig+0x31a>
 80023e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 80023e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80023ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 80023ec:	2101      	movs	r1, #1
 80023ee:	438a      	bics	r2, r1
 80023f0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80023f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 80023f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80023f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 80023f8:	2104      	movs	r1, #4
 80023fa:	438a      	bics	r2, r1
 80023fc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d028      	beq.n	8002458 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002406:	f7fe fc7b 	bl	8000d00 <HAL_GetTick>
 800240a:	0003      	movs	r3, r0
 800240c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800240e:	e01d      	b.n	800244c <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002410:	f7fe fc76 	bl	8000d00 <HAL_GetTick>
 8002414:	0002      	movs	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	4a0b      	ldr	r2, [pc, #44]	@ (8002448 <HAL_RCC_OscConfig+0x364>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d915      	bls.n	800244c <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e039      	b.n	8002498 <HAL_RCC_OscConfig+0x3b4>
 8002424:	40021000 	.word	0x40021000
 8002428:	fffeffff 	.word	0xfffeffff
 800242c:	fffbffff 	.word	0xfffbffff
 8002430:	ffff80ff 	.word	0xffff80ff
 8002434:	ffffc7ff 	.word	0xffffc7ff
 8002438:	02dc6c00 	.word	0x02dc6c00
 800243c:	20000000 	.word	0x20000000
 8002440:	2000001c 	.word	0x2000001c
 8002444:	fffffeff 	.word	0xfffffeff
 8002448:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800244c:	4b14      	ldr	r3, [pc, #80]	@ (80024a0 <HAL_RCC_OscConfig+0x3bc>)
 800244e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002450:	2202      	movs	r2, #2
 8002452:	4013      	ands	r3, r2
 8002454:	d0dc      	beq.n	8002410 <HAL_RCC_OscConfig+0x32c>
 8002456:	e013      	b.n	8002480 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002458:	f7fe fc52 	bl	8000d00 <HAL_GetTick>
 800245c:	0003      	movs	r3, r0
 800245e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002460:	e009      	b.n	8002476 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002462:	f7fe fc4d 	bl	8000d00 <HAL_GetTick>
 8002466:	0002      	movs	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	4a0d      	ldr	r2, [pc, #52]	@ (80024a4 <HAL_RCC_OscConfig+0x3c0>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e010      	b.n	8002498 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002476:	4b0a      	ldr	r3, [pc, #40]	@ (80024a0 <HAL_RCC_OscConfig+0x3bc>)
 8002478:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800247a:	2202      	movs	r2, #2
 800247c:	4013      	ands	r3, r2
 800247e:	d1f0      	bne.n	8002462 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002480:	230f      	movs	r3, #15
 8002482:	18fb      	adds	r3, r7, r3
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d105      	bne.n	8002496 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800248a:	4b05      	ldr	r3, [pc, #20]	@ (80024a0 <HAL_RCC_OscConfig+0x3bc>)
 800248c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800248e:	4b04      	ldr	r3, [pc, #16]	@ (80024a0 <HAL_RCC_OscConfig+0x3bc>)
 8002490:	4905      	ldr	r1, [pc, #20]	@ (80024a8 <HAL_RCC_OscConfig+0x3c4>)
 8002492:	400a      	ands	r2, r1
 8002494:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	0018      	movs	r0, r3
 800249a:	46bd      	mov	sp, r7
 800249c:	b006      	add	sp, #24
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40021000 	.word	0x40021000
 80024a4:	00001388 	.word	0x00001388
 80024a8:	efffffff 	.word	0xefffffff

080024ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0df      	b.n	8002680 <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024c0:	4b71      	ldr	r3, [pc, #452]	@ (8002688 <HAL_RCC_ClockConfig+0x1dc>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2207      	movs	r2, #7
 80024c6:	4013      	ands	r3, r2
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d91e      	bls.n	800250c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ce:	4b6e      	ldr	r3, [pc, #440]	@ (8002688 <HAL_RCC_ClockConfig+0x1dc>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2207      	movs	r2, #7
 80024d4:	4393      	bics	r3, r2
 80024d6:	0019      	movs	r1, r3
 80024d8:	4b6b      	ldr	r3, [pc, #428]	@ (8002688 <HAL_RCC_ClockConfig+0x1dc>)
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	430a      	orrs	r2, r1
 80024de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024e0:	f7fe fc0e 	bl	8000d00 <HAL_GetTick>
 80024e4:	0003      	movs	r3, r0
 80024e6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024e8:	e009      	b.n	80024fe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80024ea:	f7fe fc09 	bl	8000d00 <HAL_GetTick>
 80024ee:	0002      	movs	r2, r0
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	4a65      	ldr	r2, [pc, #404]	@ (800268c <HAL_RCC_ClockConfig+0x1e0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e0c0      	b.n	8002680 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024fe:	4b62      	ldr	r3, [pc, #392]	@ (8002688 <HAL_RCC_ClockConfig+0x1dc>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2207      	movs	r2, #7
 8002504:	4013      	ands	r3, r2
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d1ee      	bne.n	80024ea <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2202      	movs	r2, #2
 8002512:	4013      	ands	r3, r2
 8002514:	d017      	beq.n	8002546 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2204      	movs	r2, #4
 800251c:	4013      	ands	r3, r2
 800251e:	d008      	beq.n	8002532 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002520:	4b5b      	ldr	r3, [pc, #364]	@ (8002690 <HAL_RCC_ClockConfig+0x1e4>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	4a5b      	ldr	r2, [pc, #364]	@ (8002694 <HAL_RCC_ClockConfig+0x1e8>)
 8002526:	401a      	ands	r2, r3
 8002528:	4b59      	ldr	r3, [pc, #356]	@ (8002690 <HAL_RCC_ClockConfig+0x1e4>)
 800252a:	21b0      	movs	r1, #176	@ 0xb0
 800252c:	0109      	lsls	r1, r1, #4
 800252e:	430a      	orrs	r2, r1
 8002530:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002532:	4b57      	ldr	r3, [pc, #348]	@ (8002690 <HAL_RCC_ClockConfig+0x1e4>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	4a58      	ldr	r2, [pc, #352]	@ (8002698 <HAL_RCC_ClockConfig+0x1ec>)
 8002538:	4013      	ands	r3, r2
 800253a:	0019      	movs	r1, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	4b53      	ldr	r3, [pc, #332]	@ (8002690 <HAL_RCC_ClockConfig+0x1e4>)
 8002542:	430a      	orrs	r2, r1
 8002544:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2201      	movs	r2, #1
 800254c:	4013      	ands	r3, r2
 800254e:	d04b      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d107      	bne.n	8002568 <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002558:	4b4d      	ldr	r3, [pc, #308]	@ (8002690 <HAL_RCC_ClockConfig+0x1e4>)
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	2380      	movs	r3, #128	@ 0x80
 800255e:	029b      	lsls	r3, r3, #10
 8002560:	4013      	ands	r3, r2
 8002562:	d11f      	bne.n	80025a4 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e08b      	b.n	8002680 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d107      	bne.n	8002580 <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002570:	4b47      	ldr	r3, [pc, #284]	@ (8002690 <HAL_RCC_ClockConfig+0x1e4>)
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	2380      	movs	r3, #128	@ 0x80
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	4013      	ands	r3, r2
 800257a:	d113      	bne.n	80025a4 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e07f      	b.n	8002680 <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b03      	cmp	r3, #3
 8002586:	d106      	bne.n	8002596 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002588:	4b41      	ldr	r3, [pc, #260]	@ (8002690 <HAL_RCC_ClockConfig+0x1e4>)
 800258a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800258c:	2202      	movs	r2, #2
 800258e:	4013      	ands	r3, r2
 8002590:	d108      	bne.n	80025a4 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e074      	b.n	8002680 <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002596:	4b3e      	ldr	r3, [pc, #248]	@ (8002690 <HAL_RCC_ClockConfig+0x1e4>)
 8002598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800259a:	2202      	movs	r2, #2
 800259c:	4013      	ands	r3, r2
 800259e:	d101      	bne.n	80025a4 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e06d      	b.n	8002680 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025a4:	4b3a      	ldr	r3, [pc, #232]	@ (8002690 <HAL_RCC_ClockConfig+0x1e4>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	2207      	movs	r2, #7
 80025aa:	4393      	bics	r3, r2
 80025ac:	0019      	movs	r1, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	4b37      	ldr	r3, [pc, #220]	@ (8002690 <HAL_RCC_ClockConfig+0x1e4>)
 80025b4:	430a      	orrs	r2, r1
 80025b6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025b8:	f7fe fba2 	bl	8000d00 <HAL_GetTick>
 80025bc:	0003      	movs	r3, r0
 80025be:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c0:	e009      	b.n	80025d6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80025c2:	f7fe fb9d 	bl	8000d00 <HAL_GetTick>
 80025c6:	0002      	movs	r2, r0
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	4a2f      	ldr	r2, [pc, #188]	@ (800268c <HAL_RCC_ClockConfig+0x1e0>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e054      	b.n	8002680 <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d6:	4b2e      	ldr	r3, [pc, #184]	@ (8002690 <HAL_RCC_ClockConfig+0x1e4>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2238      	movs	r2, #56	@ 0x38
 80025dc:	401a      	ands	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d1ec      	bne.n	80025c2 <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025e8:	4b27      	ldr	r3, [pc, #156]	@ (8002688 <HAL_RCC_ClockConfig+0x1dc>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2207      	movs	r2, #7
 80025ee:	4013      	ands	r3, r2
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d21e      	bcs.n	8002634 <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f6:	4b24      	ldr	r3, [pc, #144]	@ (8002688 <HAL_RCC_ClockConfig+0x1dc>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2207      	movs	r2, #7
 80025fc:	4393      	bics	r3, r2
 80025fe:	0019      	movs	r1, r3
 8002600:	4b21      	ldr	r3, [pc, #132]	@ (8002688 <HAL_RCC_ClockConfig+0x1dc>)
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002608:	f7fe fb7a 	bl	8000d00 <HAL_GetTick>
 800260c:	0003      	movs	r3, r0
 800260e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002610:	e009      	b.n	8002626 <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002612:	f7fe fb75 	bl	8000d00 <HAL_GetTick>
 8002616:	0002      	movs	r2, r0
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	4a1b      	ldr	r2, [pc, #108]	@ (800268c <HAL_RCC_ClockConfig+0x1e0>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e02c      	b.n	8002680 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002626:	4b18      	ldr	r3, [pc, #96]	@ (8002688 <HAL_RCC_ClockConfig+0x1dc>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2207      	movs	r2, #7
 800262c:	4013      	ands	r3, r2
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	429a      	cmp	r2, r3
 8002632:	d1ee      	bne.n	8002612 <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2204      	movs	r2, #4
 800263a:	4013      	ands	r3, r2
 800263c:	d009      	beq.n	8002652 <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800263e:	4b14      	ldr	r3, [pc, #80]	@ (8002690 <HAL_RCC_ClockConfig+0x1e4>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	4a16      	ldr	r2, [pc, #88]	@ (800269c <HAL_RCC_ClockConfig+0x1f0>)
 8002644:	4013      	ands	r3, r2
 8002646:	0019      	movs	r1, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	4b10      	ldr	r3, [pc, #64]	@ (8002690 <HAL_RCC_ClockConfig+0x1e4>)
 800264e:	430a      	orrs	r2, r1
 8002650:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002652:	f000 f82b 	bl	80026ac <HAL_RCC_GetSysClockFreq>
 8002656:	0001      	movs	r1, r0
 8002658:	4b0d      	ldr	r3, [pc, #52]	@ (8002690 <HAL_RCC_ClockConfig+0x1e4>)
 800265a:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800265c:	0a1b      	lsrs	r3, r3, #8
 800265e:	220f      	movs	r2, #15
 8002660:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002662:	4b0f      	ldr	r3, [pc, #60]	@ (80026a0 <HAL_RCC_ClockConfig+0x1f4>)
 8002664:	0092      	lsls	r2, r2, #2
 8002666:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002668:	221f      	movs	r2, #31
 800266a:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800266c:	000a      	movs	r2, r1
 800266e:	40da      	lsrs	r2, r3
 8002670:	4b0c      	ldr	r3, [pc, #48]	@ (80026a4 <HAL_RCC_ClockConfig+0x1f8>)
 8002672:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002674:	4b0c      	ldr	r3, [pc, #48]	@ (80026a8 <HAL_RCC_ClockConfig+0x1fc>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	0018      	movs	r0, r3
 800267a:	f7fe f887 	bl	800078c <HAL_InitTick>
 800267e:	0003      	movs	r3, r0
}
 8002680:	0018      	movs	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	b004      	add	sp, #16
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40022000 	.word	0x40022000
 800268c:	00001388 	.word	0x00001388
 8002690:	40021000 	.word	0x40021000
 8002694:	ffff84ff 	.word	0xffff84ff
 8002698:	fffff0ff 	.word	0xfffff0ff
 800269c:	ffff8fff 	.word	0xffff8fff
 80026a0:	080065e4 	.word	0x080065e4
 80026a4:	20000000 	.word	0x20000000
 80026a8:	2000001c 	.word	0x2000001c

080026ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80026b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x78>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	2238      	movs	r2, #56	@ 0x38
 80026b8:	4013      	ands	r3, r2
 80026ba:	d10f      	bne.n	80026dc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80026bc:	4b19      	ldr	r3, [pc, #100]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x78>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	0adb      	lsrs	r3, r3, #11
 80026c2:	2207      	movs	r2, #7
 80026c4:	4013      	ands	r3, r2
 80026c6:	2201      	movs	r2, #1
 80026c8:	409a      	lsls	r2, r3
 80026ca:	0013      	movs	r3, r2
 80026cc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80026ce:	6839      	ldr	r1, [r7, #0]
 80026d0:	4815      	ldr	r0, [pc, #84]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x7c>)
 80026d2:	f7fd fd19 	bl	8000108 <__udivsi3>
 80026d6:	0003      	movs	r3, r0
 80026d8:	607b      	str	r3, [r7, #4]
 80026da:	e01e      	b.n	800271a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80026dc:	4b11      	ldr	r3, [pc, #68]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x78>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2238      	movs	r2, #56	@ 0x38
 80026e2:	4013      	ands	r3, r2
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d102      	bne.n	80026ee <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x7c>)
 80026ea:	607b      	str	r3, [r7, #4]
 80026ec:	e015      	b.n	800271a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80026ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x78>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	2238      	movs	r2, #56	@ 0x38
 80026f4:	4013      	ands	r3, r2
 80026f6:	2b20      	cmp	r3, #32
 80026f8:	d103      	bne.n	8002702 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80026fa:	2380      	movs	r3, #128	@ 0x80
 80026fc:	021b      	lsls	r3, r3, #8
 80026fe:	607b      	str	r3, [r7, #4]
 8002700:	e00b      	b.n	800271a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002702:	4b08      	ldr	r3, [pc, #32]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x78>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	2238      	movs	r2, #56	@ 0x38
 8002708:	4013      	ands	r3, r2
 800270a:	2b18      	cmp	r3, #24
 800270c:	d103      	bne.n	8002716 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800270e:	23fa      	movs	r3, #250	@ 0xfa
 8002710:	01db      	lsls	r3, r3, #7
 8002712:	607b      	str	r3, [r7, #4]
 8002714:	e001      	b.n	800271a <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8002716:	2300      	movs	r3, #0
 8002718:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 800271a:	687b      	ldr	r3, [r7, #4]
}
 800271c:	0018      	movs	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	b002      	add	sp, #8
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40021000 	.word	0x40021000
 8002728:	02dc6c00 	.word	0x02dc6c00

0800272c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002730:	f7ff ffbc 	bl	80026ac <HAL_RCC_GetSysClockFreq>
 8002734:	0001      	movs	r1, r0
 8002736:	4b09      	ldr	r3, [pc, #36]	@ (800275c <HAL_RCC_GetHCLKFreq+0x30>)
 8002738:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800273a:	0a1b      	lsrs	r3, r3, #8
 800273c:	220f      	movs	r2, #15
 800273e:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002740:	4b07      	ldr	r3, [pc, #28]	@ (8002760 <HAL_RCC_GetHCLKFreq+0x34>)
 8002742:	0092      	lsls	r2, r2, #2
 8002744:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002746:	221f      	movs	r2, #31
 8002748:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800274a:	000a      	movs	r2, r1
 800274c:	40da      	lsrs	r2, r3
 800274e:	4b05      	ldr	r3, [pc, #20]	@ (8002764 <HAL_RCC_GetHCLKFreq+0x38>)
 8002750:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8002752:	4b04      	ldr	r3, [pc, #16]	@ (8002764 <HAL_RCC_GetHCLKFreq+0x38>)
 8002754:	681b      	ldr	r3, [r3, #0]
}
 8002756:	0018      	movs	r0, r3
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40021000 	.word	0x40021000
 8002760:	080065e4 	.word	0x080065e4
 8002764:	20000000 	.word	0x20000000

08002768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 800276c:	f7ff ffde 	bl	800272c <HAL_RCC_GetHCLKFreq>
 8002770:	0001      	movs	r1, r0
 8002772:	4b07      	ldr	r3, [pc, #28]	@ (8002790 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	0b1b      	lsrs	r3, r3, #12
 8002778:	2207      	movs	r2, #7
 800277a:	401a      	ands	r2, r3
 800277c:	4b05      	ldr	r3, [pc, #20]	@ (8002794 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800277e:	0092      	lsls	r2, r2, #2
 8002780:	58d3      	ldr	r3, [r2, r3]
 8002782:	221f      	movs	r2, #31
 8002784:	4013      	ands	r3, r2
 8002786:	40d9      	lsrs	r1, r3
 8002788:	000b      	movs	r3, r1
}
 800278a:	0018      	movs	r0, r3
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40021000 	.word	0x40021000
 8002794:	08006624 	.word	0x08006624

08002798 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2207      	movs	r2, #7
 80027a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027a8:	4b10      	ldr	r3, [pc, #64]	@ (80027ec <HAL_RCC_GetClockConfig+0x54>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	2207      	movs	r2, #7
 80027ae:	401a      	ands	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	605a      	str	r2, [r3, #4]

#if defined(RCC_CR_SYSDIV)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CR & RCC_CR_SYSDIV);
#else
  RCC_ClkInitStruct->SYSCLKDivider = RCC_SYSCLK_DIV1;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	609a      	str	r2, [r3, #8]
#endif /* RCC_CR_SYSDIV */

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027ba:	4b0c      	ldr	r3, [pc, #48]	@ (80027ec <HAL_RCC_GetClockConfig+0x54>)
 80027bc:	689a      	ldr	r2, [r3, #8]
 80027be:	23f0      	movs	r3, #240	@ 0xf0
 80027c0:	011b      	lsls	r3, r3, #4
 80027c2:	401a      	ands	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	60da      	str	r2, [r3, #12]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 80027c8:	4b08      	ldr	r3, [pc, #32]	@ (80027ec <HAL_RCC_GetClockConfig+0x54>)
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	23e0      	movs	r3, #224	@ 0xe0
 80027ce:	01db      	lsls	r3, r3, #7
 80027d0:	401a      	ands	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	611a      	str	r2, [r3, #16]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027d6:	4b06      	ldr	r3, [pc, #24]	@ (80027f0 <HAL_RCC_GetClockConfig+0x58>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2207      	movs	r2, #7
 80027dc:	401a      	ands	r2, r3
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	601a      	str	r2, [r3, #0]
}
 80027e2:	46c0      	nop			@ (mov r8, r8)
 80027e4:	46bd      	mov	sp, r7
 80027e6:	b002      	add	sp, #8
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	46c0      	nop			@ (mov r8, r8)
 80027ec:	40021000 	.word	0x40021000
 80027f0:	40022000 	.word	0x40022000

080027f4 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80027fc:	2313      	movs	r3, #19
 80027fe:	18fb      	adds	r3, r7, r3
 8002800:	2200      	movs	r2, #0
 8002802:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002804:	2312      	movs	r3, #18
 8002806:	18fb      	adds	r3, r7, r3
 8002808:	2200      	movs	r2, #0
 800280a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2240      	movs	r2, #64	@ 0x40
 8002812:	4013      	ands	r3, r2
 8002814:	d100      	bne.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8002816:	e079      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002818:	2011      	movs	r0, #17
 800281a:	183b      	adds	r3, r7, r0
 800281c:	2200      	movs	r2, #0
 800281e:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002820:	4b63      	ldr	r3, [pc, #396]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002822:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002824:	2380      	movs	r3, #128	@ 0x80
 8002826:	055b      	lsls	r3, r3, #21
 8002828:	4013      	ands	r3, r2
 800282a:	d110      	bne.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800282c:	4b60      	ldr	r3, [pc, #384]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800282e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002830:	4b5f      	ldr	r3, [pc, #380]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002832:	2180      	movs	r1, #128	@ 0x80
 8002834:	0549      	lsls	r1, r1, #21
 8002836:	430a      	orrs	r2, r1
 8002838:	63da      	str	r2, [r3, #60]	@ 0x3c
 800283a:	4b5d      	ldr	r3, [pc, #372]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800283c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800283e:	2380      	movs	r3, #128	@ 0x80
 8002840:	055b      	lsls	r3, r3, #21
 8002842:	4013      	ands	r3, r2
 8002844:	60bb      	str	r3, [r7, #8]
 8002846:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002848:	183b      	adds	r3, r7, r0
 800284a:	2201      	movs	r2, #1
 800284c:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 800284e:	4b58      	ldr	r3, [pc, #352]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002850:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002852:	23c0      	movs	r3, #192	@ 0xc0
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4013      	ands	r3, r2
 8002858:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d019      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	429a      	cmp	r2, r3
 8002868:	d014      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 800286a:	4b51      	ldr	r3, [pc, #324]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800286c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800286e:	4a51      	ldr	r2, [pc, #324]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002870:	4013      	ands	r3, r2
 8002872:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002874:	4b4e      	ldr	r3, [pc, #312]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002876:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002878:	4b4d      	ldr	r3, [pc, #308]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800287a:	2180      	movs	r1, #128	@ 0x80
 800287c:	0249      	lsls	r1, r1, #9
 800287e:	430a      	orrs	r2, r1
 8002880:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002882:	4b4b      	ldr	r3, [pc, #300]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002884:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002886:	4b4a      	ldr	r3, [pc, #296]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002888:	494b      	ldr	r1, [pc, #300]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800288a:	400a      	ands	r2, r1
 800288c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 800288e:	4b48      	ldr	r3, [pc, #288]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	2201      	movs	r2, #1
 8002898:	4013      	ands	r3, r2
 800289a:	d016      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800289c:	f7fe fa30 	bl	8000d00 <HAL_GetTick>
 80028a0:	0003      	movs	r3, r0
 80028a2:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80028a4:	e00c      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a6:	f7fe fa2b 	bl	8000d00 <HAL_GetTick>
 80028aa:	0002      	movs	r2, r0
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	4a42      	ldr	r2, [pc, #264]	@ (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d904      	bls.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 80028b6:	2313      	movs	r3, #19
 80028b8:	18fb      	adds	r3, r7, r3
 80028ba:	2203      	movs	r2, #3
 80028bc:	701a      	strb	r2, [r3, #0]
          break;
 80028be:	e004      	b.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80028c0:	4b3b      	ldr	r3, [pc, #236]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80028c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c4:	2202      	movs	r2, #2
 80028c6:	4013      	ands	r3, r2
 80028c8:	d0ed      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 80028ca:	2313      	movs	r3, #19
 80028cc:	18fb      	adds	r3, r7, r3
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10a      	bne.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028d4:	4b36      	ldr	r3, [pc, #216]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80028d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d8:	4a36      	ldr	r2, [pc, #216]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028da:	4013      	ands	r3, r2
 80028dc:	0019      	movs	r1, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	699a      	ldr	r2, [r3, #24]
 80028e2:	4b33      	ldr	r3, [pc, #204]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80028e4:	430a      	orrs	r2, r1
 80028e6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80028e8:	e005      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028ea:	2312      	movs	r3, #18
 80028ec:	18fb      	adds	r3, r7, r3
 80028ee:	2213      	movs	r2, #19
 80028f0:	18ba      	adds	r2, r7, r2
 80028f2:	7812      	ldrb	r2, [r2, #0]
 80028f4:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028f6:	2311      	movs	r3, #17
 80028f8:	18fb      	adds	r3, r7, r3
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d105      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002900:	4b2b      	ldr	r3, [pc, #172]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002902:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002904:	4b2a      	ldr	r3, [pc, #168]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002906:	492e      	ldr	r1, [pc, #184]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002908:	400a      	ands	r2, r1
 800290a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2201      	movs	r2, #1
 8002912:	4013      	ands	r3, r2
 8002914:	d009      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002916:	4b26      	ldr	r3, [pc, #152]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800291a:	2203      	movs	r2, #3
 800291c:	4393      	bics	r3, r2
 800291e:	0019      	movs	r1, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	4b22      	ldr	r3, [pc, #136]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002926:	430a      	orrs	r2, r1
 8002928:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2202      	movs	r2, #2
 8002930:	4013      	ands	r3, r2
 8002932:	d009      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002934:	4b1e      	ldr	r3, [pc, #120]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002938:	4a22      	ldr	r2, [pc, #136]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800293a:	4013      	ands	r3, r2
 800293c:	0019      	movs	r1, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	4b1b      	ldr	r3, [pc, #108]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002944:	430a      	orrs	r2, r1
 8002946:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2220      	movs	r2, #32
 800294e:	4013      	ands	r3, r2
 8002950:	d008      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002952:	4b17      	ldr	r3, [pc, #92]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	0899      	lsrs	r1, r3, #2
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	695a      	ldr	r2, [r3, #20]
 800295e:	4b14      	ldr	r3, [pc, #80]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002960:	430a      	orrs	r2, r1
 8002962:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2204      	movs	r2, #4
 800296a:	4013      	ands	r3, r2
 800296c:	d009      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800296e:	4b10      	ldr	r3, [pc, #64]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002972:	4a15      	ldr	r2, [pc, #84]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002974:	4013      	ands	r3, r2
 8002976:	0019      	movs	r1, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691a      	ldr	r2, [r3, #16]
 800297c:	4b0c      	ldr	r3, [pc, #48]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800297e:	430a      	orrs	r2, r1
 8002980:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2280      	movs	r2, #128	@ 0x80
 8002988:	4013      	ands	r3, r2
 800298a:	d009      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 800298c:	4b08      	ldr	r3, [pc, #32]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	22e0      	movs	r2, #224	@ 0xe0
 8002992:	4393      	bics	r3, r2
 8002994:	0019      	movs	r1, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	4b05      	ldr	r3, [pc, #20]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800299c:	430a      	orrs	r2, r1
 800299e:	601a      	str	r2, [r3, #0]
  }
  return status;
 80029a0:	2312      	movs	r3, #18
 80029a2:	18fb      	adds	r3, r7, r3
 80029a4:	781b      	ldrb	r3, [r3, #0]
}
 80029a6:	0018      	movs	r0, r3
 80029a8:	46bd      	mov	sp, r7
 80029aa:	b006      	add	sp, #24
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	46c0      	nop			@ (mov r8, r8)
 80029b0:	40021000 	.word	0x40021000
 80029b4:	fffffcff 	.word	0xfffffcff
 80029b8:	fffeffff 	.word	0xfffeffff
 80029bc:	00001388 	.word	0x00001388
 80029c0:	efffffff 	.word	0xefffffff
 80029c4:	ffffcfff 	.word	0xffffcfff
 80029c8:	ffff3fff 	.word	0xffff3fff

080029cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e04a      	b.n	8002a74 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	223d      	movs	r2, #61	@ 0x3d
 80029e2:	5c9b      	ldrb	r3, [r3, r2]
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d107      	bne.n	80029fa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	223c      	movs	r2, #60	@ 0x3c
 80029ee:	2100      	movs	r1, #0
 80029f0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	0018      	movs	r0, r3
 80029f6:	f000 f841 	bl	8002a7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	223d      	movs	r2, #61	@ 0x3d
 80029fe:	2102      	movs	r1, #2
 8002a00:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3304      	adds	r3, #4
 8002a0a:	0019      	movs	r1, r3
 8002a0c:	0010      	movs	r0, r2
 8002a0e:	f000 f9b3 	bl	8002d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2248      	movs	r2, #72	@ 0x48
 8002a16:	2101      	movs	r1, #1
 8002a18:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	223e      	movs	r2, #62	@ 0x3e
 8002a1e:	2101      	movs	r1, #1
 8002a20:	5499      	strb	r1, [r3, r2]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	223f      	movs	r2, #63	@ 0x3f
 8002a26:	2101      	movs	r1, #1
 8002a28:	5499      	strb	r1, [r3, r2]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2240      	movs	r2, #64	@ 0x40
 8002a2e:	2101      	movs	r1, #1
 8002a30:	5499      	strb	r1, [r3, r2]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2241      	movs	r2, #65	@ 0x41
 8002a36:	2101      	movs	r1, #1
 8002a38:	5499      	strb	r1, [r3, r2]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2242      	movs	r2, #66	@ 0x42
 8002a3e:	2101      	movs	r1, #1
 8002a40:	5499      	strb	r1, [r3, r2]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2243      	movs	r2, #67	@ 0x43
 8002a46:	2101      	movs	r1, #1
 8002a48:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2244      	movs	r2, #68	@ 0x44
 8002a4e:	2101      	movs	r1, #1
 8002a50:	5499      	strb	r1, [r3, r2]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2245      	movs	r2, #69	@ 0x45
 8002a56:	2101      	movs	r1, #1
 8002a58:	5499      	strb	r1, [r3, r2]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2246      	movs	r2, #70	@ 0x46
 8002a5e:	2101      	movs	r1, #1
 8002a60:	5499      	strb	r1, [r3, r2]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2247      	movs	r2, #71	@ 0x47
 8002a66:	2101      	movs	r1, #1
 8002a68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	223d      	movs	r2, #61	@ 0x3d
 8002a6e:	2101      	movs	r1, #1
 8002a70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	0018      	movs	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	b002      	add	sp, #8
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a84:	46c0      	nop			@ (mov r8, r8)
 8002a86:	46bd      	mov	sp, r7
 8002a88:	b002      	add	sp, #8
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	223d      	movs	r2, #61	@ 0x3d
 8002a98:	5c9b      	ldrb	r3, [r3, r2]
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d001      	beq.n	8002aa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e037      	b.n	8002b14 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	223d      	movs	r2, #61	@ 0x3d
 8002aa8:	2102      	movs	r1, #2
 8002aaa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a16      	ldr	r2, [pc, #88]	@ (8002b1c <HAL_TIM_Base_Start_IT+0x90>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d004      	beq.n	8002ad0 <HAL_TIM_Base_Start_IT+0x44>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a15      	ldr	r2, [pc, #84]	@ (8002b20 <HAL_TIM_Base_Start_IT+0x94>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d116      	bne.n	8002afe <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	4a13      	ldr	r2, [pc, #76]	@ (8002b24 <HAL_TIM_Base_Start_IT+0x98>)
 8002ad8:	4013      	ands	r3, r2
 8002ada:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2b06      	cmp	r3, #6
 8002ae0:	d016      	beq.n	8002b10 <HAL_TIM_Base_Start_IT+0x84>
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	2380      	movs	r3, #128	@ 0x80
 8002ae6:	025b      	lsls	r3, r3, #9
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d011      	beq.n	8002b10 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2101      	movs	r1, #1
 8002af8:	430a      	orrs	r2, r1
 8002afa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002afc:	e008      	b.n	8002b10 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2101      	movs	r1, #1
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	e000      	b.n	8002b12 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b10:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	0018      	movs	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	b004      	add	sp, #16
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40012c00 	.word	0x40012c00
 8002b20:	40000400 	.word	0x40000400
 8002b24:	00010007 	.word	0x00010007

08002b28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	2202      	movs	r2, #2
 8002b44:	4013      	ands	r3, r2
 8002b46:	d021      	beq.n	8002b8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	d01d      	beq.n	8002b8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2203      	movs	r2, #3
 8002b56:	4252      	negs	r2, r2
 8002b58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	2203      	movs	r2, #3
 8002b68:	4013      	ands	r3, r2
 8002b6a:	d004      	beq.n	8002b76 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	0018      	movs	r0, r3
 8002b70:	f000 f8ea 	bl	8002d48 <HAL_TIM_IC_CaptureCallback>
 8002b74:	e007      	b.n	8002b86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f000 f8dd 	bl	8002d38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	0018      	movs	r0, r3
 8002b82:	f000 f8e9 	bl	8002d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2204      	movs	r2, #4
 8002b90:	4013      	ands	r3, r2
 8002b92:	d022      	beq.n	8002bda <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2204      	movs	r2, #4
 8002b98:	4013      	ands	r3, r2
 8002b9a:	d01e      	beq.n	8002bda <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2205      	movs	r2, #5
 8002ba2:	4252      	negs	r2, r2
 8002ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2202      	movs	r2, #2
 8002baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	699a      	ldr	r2, [r3, #24]
 8002bb2:	23c0      	movs	r3, #192	@ 0xc0
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	d004      	beq.n	8002bc4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f000 f8c3 	bl	8002d48 <HAL_TIM_IC_CaptureCallback>
 8002bc2:	e007      	b.n	8002bd4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	f000 f8b6 	bl	8002d38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f000 f8c2 	bl	8002d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2208      	movs	r2, #8
 8002bde:	4013      	ands	r3, r2
 8002be0:	d021      	beq.n	8002c26 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2208      	movs	r2, #8
 8002be6:	4013      	ands	r3, r2
 8002be8:	d01d      	beq.n	8002c26 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2209      	movs	r2, #9
 8002bf0:	4252      	negs	r2, r2
 8002bf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2204      	movs	r2, #4
 8002bf8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	2203      	movs	r2, #3
 8002c02:	4013      	ands	r3, r2
 8002c04:	d004      	beq.n	8002c10 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	0018      	movs	r0, r3
 8002c0a:	f000 f89d 	bl	8002d48 <HAL_TIM_IC_CaptureCallback>
 8002c0e:	e007      	b.n	8002c20 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	0018      	movs	r0, r3
 8002c14:	f000 f890 	bl	8002d38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	f000 f89c 	bl	8002d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2210      	movs	r2, #16
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d022      	beq.n	8002c74 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2210      	movs	r2, #16
 8002c32:	4013      	ands	r3, r2
 8002c34:	d01e      	beq.n	8002c74 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2211      	movs	r2, #17
 8002c3c:	4252      	negs	r2, r2
 8002c3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2208      	movs	r2, #8
 8002c44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	69da      	ldr	r2, [r3, #28]
 8002c4c:	23c0      	movs	r3, #192	@ 0xc0
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4013      	ands	r3, r2
 8002c52:	d004      	beq.n	8002c5e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	0018      	movs	r0, r3
 8002c58:	f000 f876 	bl	8002d48 <HAL_TIM_IC_CaptureCallback>
 8002c5c:	e007      	b.n	8002c6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	0018      	movs	r0, r3
 8002c62:	f000 f869 	bl	8002d38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f000 f875 	bl	8002d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2201      	movs	r2, #1
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d00c      	beq.n	8002c96 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	4013      	ands	r3, r2
 8002c82:	d008      	beq.n	8002c96 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2202      	movs	r2, #2
 8002c8a:	4252      	negs	r2, r2
 8002c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	0018      	movs	r0, r3
 8002c92:	f7fd fcdd 	bl	8000650 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2280      	movs	r2, #128	@ 0x80
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d104      	bne.n	8002ca8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	2380      	movs	r3, #128	@ 0x80
 8002ca2:	019b      	lsls	r3, r3, #6
 8002ca4:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002ca6:	d00b      	beq.n	8002cc0 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2280      	movs	r2, #128	@ 0x80
 8002cac:	4013      	ands	r3, r2
 8002cae:	d007      	beq.n	8002cc0 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a1e      	ldr	r2, [pc, #120]	@ (8002d30 <HAL_TIM_IRQHandler+0x208>)
 8002cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f000 f8d6 	bl	8002e6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002cc0:	68ba      	ldr	r2, [r7, #8]
 8002cc2:	2380      	movs	r3, #128	@ 0x80
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	d00b      	beq.n	8002ce2 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2280      	movs	r2, #128	@ 0x80
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d007      	beq.n	8002ce2 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a17      	ldr	r2, [pc, #92]	@ (8002d34 <HAL_TIM_IRQHandler+0x20c>)
 8002cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f000 f8cd 	bl	8002e7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2240      	movs	r2, #64	@ 0x40
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	d00c      	beq.n	8002d04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2240      	movs	r2, #64	@ 0x40
 8002cee:	4013      	ands	r3, r2
 8002cf0:	d008      	beq.n	8002d04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2241      	movs	r2, #65	@ 0x41
 8002cf8:	4252      	negs	r2, r2
 8002cfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f000 f832 	bl	8002d68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2220      	movs	r2, #32
 8002d08:	4013      	ands	r3, r2
 8002d0a:	d00c      	beq.n	8002d26 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	4013      	ands	r3, r2
 8002d12:	d008      	beq.n	8002d26 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2221      	movs	r2, #33	@ 0x21
 8002d1a:	4252      	negs	r2, r2
 8002d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	0018      	movs	r0, r3
 8002d22:	f000 f89b 	bl	8002e5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d26:	46c0      	nop			@ (mov r8, r8)
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	b004      	add	sp, #16
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	46c0      	nop			@ (mov r8, r8)
 8002d30:	ffffdf7f 	.word	0xffffdf7f
 8002d34:	fffffeff 	.word	0xfffffeff

08002d38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d40:	46c0      	nop			@ (mov r8, r8)
 8002d42:	46bd      	mov	sp, r7
 8002d44:	b002      	add	sp, #8
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d50:	46c0      	nop			@ (mov r8, r8)
 8002d52:	46bd      	mov	sp, r7
 8002d54:	b002      	add	sp, #8
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d60:	46c0      	nop			@ (mov r8, r8)
 8002d62:	46bd      	mov	sp, r7
 8002d64:	b002      	add	sp, #8
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d70:	46c0      	nop			@ (mov r8, r8)
 8002d72:	46bd      	mov	sp, r7
 8002d74:	b002      	add	sp, #8
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a2e      	ldr	r2, [pc, #184]	@ (8002e44 <TIM_Base_SetConfig+0xcc>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d003      	beq.n	8002d98 <TIM_Base_SetConfig+0x20>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a2d      	ldr	r2, [pc, #180]	@ (8002e48 <TIM_Base_SetConfig+0xd0>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d108      	bne.n	8002daa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2270      	movs	r2, #112	@ 0x70
 8002d9c:	4393      	bics	r3, r2
 8002d9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a25      	ldr	r2, [pc, #148]	@ (8002e44 <TIM_Base_SetConfig+0xcc>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d00f      	beq.n	8002dd2 <TIM_Base_SetConfig+0x5a>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a24      	ldr	r2, [pc, #144]	@ (8002e48 <TIM_Base_SetConfig+0xd0>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d00b      	beq.n	8002dd2 <TIM_Base_SetConfig+0x5a>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a23      	ldr	r2, [pc, #140]	@ (8002e4c <TIM_Base_SetConfig+0xd4>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d007      	beq.n	8002dd2 <TIM_Base_SetConfig+0x5a>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a22      	ldr	r2, [pc, #136]	@ (8002e50 <TIM_Base_SetConfig+0xd8>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d003      	beq.n	8002dd2 <TIM_Base_SetConfig+0x5a>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a21      	ldr	r2, [pc, #132]	@ (8002e54 <TIM_Base_SetConfig+0xdc>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d108      	bne.n	8002de4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	4a20      	ldr	r2, [pc, #128]	@ (8002e58 <TIM_Base_SetConfig+0xe0>)
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2280      	movs	r2, #128	@ 0x80
 8002de8:	4393      	bics	r3, r2
 8002dea:	001a      	movs	r2, r3
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a0f      	ldr	r2, [pc, #60]	@ (8002e44 <TIM_Base_SetConfig+0xcc>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d007      	beq.n	8002e1c <TIM_Base_SetConfig+0xa4>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a10      	ldr	r2, [pc, #64]	@ (8002e50 <TIM_Base_SetConfig+0xd8>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d003      	beq.n	8002e1c <TIM_Base_SetConfig+0xa4>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a0f      	ldr	r2, [pc, #60]	@ (8002e54 <TIM_Base_SetConfig+0xdc>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d103      	bne.n	8002e24 <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	691a      	ldr	r2, [r3, #16]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2204      	movs	r2, #4
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	601a      	str	r2, [r3, #0]
}
 8002e3c:	46c0      	nop			@ (mov r8, r8)
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	b004      	add	sp, #16
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40012c00 	.word	0x40012c00
 8002e48:	40000400 	.word	0x40000400
 8002e4c:	40002000 	.word	0x40002000
 8002e50:	40014400 	.word	0x40014400
 8002e54:	40014800 	.word	0x40014800
 8002e58:	fffffcff 	.word	0xfffffcff

08002e5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e64:	46c0      	nop			@ (mov r8, r8)
 8002e66:	46bd      	mov	sp, r7
 8002e68:	b002      	add	sp, #8
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e74:	46c0      	nop			@ (mov r8, r8)
 8002e76:	46bd      	mov	sp, r7
 8002e78:	b002      	add	sp, #8
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e84:	46c0      	nop			@ (mov r8, r8)
 8002e86:	46bd      	mov	sp, r7
 8002e88:	b002      	add	sp, #8
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e046      	b.n	8002f2c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2288      	movs	r2, #136	@ 0x88
 8002ea2:	589b      	ldr	r3, [r3, r2]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d107      	bne.n	8002eb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2284      	movs	r2, #132	@ 0x84
 8002eac:	2100      	movs	r1, #0
 8002eae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f000 f840 	bl	8002f38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2288      	movs	r2, #136	@ 0x88
 8002ebc:	2124      	movs	r1, #36	@ 0x24
 8002ebe:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2101      	movs	r1, #1
 8002ecc:	438a      	bics	r2, r1
 8002ece:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	0018      	movs	r0, r3
 8002edc:	f000 f9b2 	bl	8003244 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	f000 f830 	bl	8002f48 <UART_SetConfig>
 8002ee8:	0003      	movs	r3, r0
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d101      	bne.n	8002ef2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e01c      	b.n	8002f2c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	490d      	ldr	r1, [pc, #52]	@ (8002f34 <HAL_UART_Init+0xa8>)
 8002efe:	400a      	ands	r2, r1
 8002f00:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	212a      	movs	r1, #42	@ 0x2a
 8002f0e:	438a      	bics	r2, r1
 8002f10:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2101      	movs	r1, #1
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	0018      	movs	r0, r3
 8002f26:	f000 fa41 	bl	80033ac <UART_CheckIdleState>
 8002f2a:	0003      	movs	r3, r0
}
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	b002      	add	sp, #8
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	ffffb7ff 	.word	0xffffb7ff

08002f38 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8002f40:	46c0      	nop			@ (mov r8, r8)
 8002f42:	46bd      	mov	sp, r7
 8002f44:	b002      	add	sp, #8
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b088      	sub	sp, #32
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f50:	231e      	movs	r3, #30
 8002f52:	18fb      	adds	r3, r7, r3
 8002f54:	2200      	movs	r2, #0
 8002f56:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	431a      	orrs	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4aab      	ldr	r2, [pc, #684]	@ (8003224 <UART_SetConfig+0x2dc>)
 8002f78:	4013      	ands	r3, r2
 8002f7a:	0019      	movs	r1, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	4aa6      	ldr	r2, [pc, #664]	@ (8003228 <UART_SetConfig+0x2e0>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	0019      	movs	r1, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	4a9d      	ldr	r2, [pc, #628]	@ (800322c <UART_SetConfig+0x2e4>)
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	0019      	movs	r1, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fca:	220f      	movs	r2, #15
 8002fcc:	4393      	bics	r3, r2
 8002fce:	0019      	movs	r1, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a93      	ldr	r2, [pc, #588]	@ (8003230 <UART_SetConfig+0x2e8>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d127      	bne.n	8003036 <UART_SetConfig+0xee>
 8002fe6:	4b93      	ldr	r3, [pc, #588]	@ (8003234 <UART_SetConfig+0x2ec>)
 8002fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fea:	2203      	movs	r2, #3
 8002fec:	4013      	ands	r3, r2
 8002fee:	2b03      	cmp	r3, #3
 8002ff0:	d017      	beq.n	8003022 <UART_SetConfig+0xda>
 8002ff2:	d81b      	bhi.n	800302c <UART_SetConfig+0xe4>
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d00a      	beq.n	800300e <UART_SetConfig+0xc6>
 8002ff8:	d818      	bhi.n	800302c <UART_SetConfig+0xe4>
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d002      	beq.n	8003004 <UART_SetConfig+0xbc>
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d00a      	beq.n	8003018 <UART_SetConfig+0xd0>
 8003002:	e013      	b.n	800302c <UART_SetConfig+0xe4>
 8003004:	231f      	movs	r3, #31
 8003006:	18fb      	adds	r3, r7, r3
 8003008:	2200      	movs	r2, #0
 800300a:	701a      	strb	r2, [r3, #0]
 800300c:	e021      	b.n	8003052 <UART_SetConfig+0x10a>
 800300e:	231f      	movs	r3, #31
 8003010:	18fb      	adds	r3, r7, r3
 8003012:	2202      	movs	r2, #2
 8003014:	701a      	strb	r2, [r3, #0]
 8003016:	e01c      	b.n	8003052 <UART_SetConfig+0x10a>
 8003018:	231f      	movs	r3, #31
 800301a:	18fb      	adds	r3, r7, r3
 800301c:	2204      	movs	r2, #4
 800301e:	701a      	strb	r2, [r3, #0]
 8003020:	e017      	b.n	8003052 <UART_SetConfig+0x10a>
 8003022:	231f      	movs	r3, #31
 8003024:	18fb      	adds	r3, r7, r3
 8003026:	2208      	movs	r2, #8
 8003028:	701a      	strb	r2, [r3, #0]
 800302a:	e012      	b.n	8003052 <UART_SetConfig+0x10a>
 800302c:	231f      	movs	r3, #31
 800302e:	18fb      	adds	r3, r7, r3
 8003030:	2210      	movs	r2, #16
 8003032:	701a      	strb	r2, [r3, #0]
 8003034:	e00d      	b.n	8003052 <UART_SetConfig+0x10a>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a7f      	ldr	r2, [pc, #508]	@ (8003238 <UART_SetConfig+0x2f0>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d104      	bne.n	800304a <UART_SetConfig+0x102>
 8003040:	231f      	movs	r3, #31
 8003042:	18fb      	adds	r3, r7, r3
 8003044:	2200      	movs	r2, #0
 8003046:	701a      	strb	r2, [r3, #0]
 8003048:	e003      	b.n	8003052 <UART_SetConfig+0x10a>
 800304a:	231f      	movs	r3, #31
 800304c:	18fb      	adds	r3, r7, r3
 800304e:	2210      	movs	r2, #16
 8003050:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69da      	ldr	r2, [r3, #28]
 8003056:	2380      	movs	r3, #128	@ 0x80
 8003058:	021b      	lsls	r3, r3, #8
 800305a:	429a      	cmp	r2, r3
 800305c:	d000      	beq.n	8003060 <UART_SetConfig+0x118>
 800305e:	e06f      	b.n	8003140 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8003060:	231f      	movs	r3, #31
 8003062:	18fb      	adds	r3, r7, r3
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	2b08      	cmp	r3, #8
 8003068:	d01f      	beq.n	80030aa <UART_SetConfig+0x162>
 800306a:	dc22      	bgt.n	80030b2 <UART_SetConfig+0x16a>
 800306c:	2b04      	cmp	r3, #4
 800306e:	d017      	beq.n	80030a0 <UART_SetConfig+0x158>
 8003070:	dc1f      	bgt.n	80030b2 <UART_SetConfig+0x16a>
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <UART_SetConfig+0x134>
 8003076:	2b02      	cmp	r3, #2
 8003078:	d005      	beq.n	8003086 <UART_SetConfig+0x13e>
 800307a:	e01a      	b.n	80030b2 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800307c:	f7ff fb74 	bl	8002768 <HAL_RCC_GetPCLK1Freq>
 8003080:	0003      	movs	r3, r0
 8003082:	61bb      	str	r3, [r7, #24]
        break;
 8003084:	e01c      	b.n	80030c0 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003086:	4b6b      	ldr	r3, [pc, #428]	@ (8003234 <UART_SetConfig+0x2ec>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	095b      	lsrs	r3, r3, #5
 800308c:	2207      	movs	r2, #7
 800308e:	4013      	ands	r3, r2
 8003090:	3301      	adds	r3, #1
 8003092:	0019      	movs	r1, r3
 8003094:	4869      	ldr	r0, [pc, #420]	@ (800323c <UART_SetConfig+0x2f4>)
 8003096:	f7fd f837 	bl	8000108 <__udivsi3>
 800309a:	0003      	movs	r3, r0
 800309c:	61bb      	str	r3, [r7, #24]
        break;
 800309e:	e00f      	b.n	80030c0 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030a0:	f7ff fb04 	bl	80026ac <HAL_RCC_GetSysClockFreq>
 80030a4:	0003      	movs	r3, r0
 80030a6:	61bb      	str	r3, [r7, #24]
        break;
 80030a8:	e00a      	b.n	80030c0 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030aa:	2380      	movs	r3, #128	@ 0x80
 80030ac:	021b      	lsls	r3, r3, #8
 80030ae:	61bb      	str	r3, [r7, #24]
        break;
 80030b0:	e006      	b.n	80030c0 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030b6:	231e      	movs	r3, #30
 80030b8:	18fb      	adds	r3, r7, r3
 80030ba:	2201      	movs	r2, #1
 80030bc:	701a      	strb	r2, [r3, #0]
        break;
 80030be:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d100      	bne.n	80030c8 <UART_SetConfig+0x180>
 80030c6:	e097      	b.n	80031f8 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030cc:	4b5c      	ldr	r3, [pc, #368]	@ (8003240 <UART_SetConfig+0x2f8>)
 80030ce:	0052      	lsls	r2, r2, #1
 80030d0:	5ad3      	ldrh	r3, [r2, r3]
 80030d2:	0019      	movs	r1, r3
 80030d4:	69b8      	ldr	r0, [r7, #24]
 80030d6:	f7fd f817 	bl	8000108 <__udivsi3>
 80030da:	0003      	movs	r3, r0
 80030dc:	005a      	lsls	r2, r3, #1
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	085b      	lsrs	r3, r3, #1
 80030e4:	18d2      	adds	r2, r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	0019      	movs	r1, r3
 80030ec:	0010      	movs	r0, r2
 80030ee:	f7fd f80b 	bl	8000108 <__udivsi3>
 80030f2:	0003      	movs	r3, r0
 80030f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	2b0f      	cmp	r3, #15
 80030fa:	d91c      	bls.n	8003136 <UART_SetConfig+0x1ee>
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	2380      	movs	r3, #128	@ 0x80
 8003100:	025b      	lsls	r3, r3, #9
 8003102:	429a      	cmp	r2, r3
 8003104:	d217      	bcs.n	8003136 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	b29a      	uxth	r2, r3
 800310a:	200e      	movs	r0, #14
 800310c:	183b      	adds	r3, r7, r0
 800310e:	210f      	movs	r1, #15
 8003110:	438a      	bics	r2, r1
 8003112:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	085b      	lsrs	r3, r3, #1
 8003118:	b29b      	uxth	r3, r3
 800311a:	2207      	movs	r2, #7
 800311c:	4013      	ands	r3, r2
 800311e:	b299      	uxth	r1, r3
 8003120:	183b      	adds	r3, r7, r0
 8003122:	183a      	adds	r2, r7, r0
 8003124:	8812      	ldrh	r2, [r2, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	183a      	adds	r2, r7, r0
 8003130:	8812      	ldrh	r2, [r2, #0]
 8003132:	60da      	str	r2, [r3, #12]
 8003134:	e060      	b.n	80031f8 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8003136:	231e      	movs	r3, #30
 8003138:	18fb      	adds	r3, r7, r3
 800313a:	2201      	movs	r2, #1
 800313c:	701a      	strb	r2, [r3, #0]
 800313e:	e05b      	b.n	80031f8 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003140:	231f      	movs	r3, #31
 8003142:	18fb      	adds	r3, r7, r3
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b08      	cmp	r3, #8
 8003148:	d01f      	beq.n	800318a <UART_SetConfig+0x242>
 800314a:	dc22      	bgt.n	8003192 <UART_SetConfig+0x24a>
 800314c:	2b04      	cmp	r3, #4
 800314e:	d017      	beq.n	8003180 <UART_SetConfig+0x238>
 8003150:	dc1f      	bgt.n	8003192 <UART_SetConfig+0x24a>
 8003152:	2b00      	cmp	r3, #0
 8003154:	d002      	beq.n	800315c <UART_SetConfig+0x214>
 8003156:	2b02      	cmp	r3, #2
 8003158:	d005      	beq.n	8003166 <UART_SetConfig+0x21e>
 800315a:	e01a      	b.n	8003192 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800315c:	f7ff fb04 	bl	8002768 <HAL_RCC_GetPCLK1Freq>
 8003160:	0003      	movs	r3, r0
 8003162:	61bb      	str	r3, [r7, #24]
        break;
 8003164:	e01c      	b.n	80031a0 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003166:	4b33      	ldr	r3, [pc, #204]	@ (8003234 <UART_SetConfig+0x2ec>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	095b      	lsrs	r3, r3, #5
 800316c:	2207      	movs	r2, #7
 800316e:	4013      	ands	r3, r2
 8003170:	3301      	adds	r3, #1
 8003172:	0019      	movs	r1, r3
 8003174:	4831      	ldr	r0, [pc, #196]	@ (800323c <UART_SetConfig+0x2f4>)
 8003176:	f7fc ffc7 	bl	8000108 <__udivsi3>
 800317a:	0003      	movs	r3, r0
 800317c:	61bb      	str	r3, [r7, #24]
        break;
 800317e:	e00f      	b.n	80031a0 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003180:	f7ff fa94 	bl	80026ac <HAL_RCC_GetSysClockFreq>
 8003184:	0003      	movs	r3, r0
 8003186:	61bb      	str	r3, [r7, #24]
        break;
 8003188:	e00a      	b.n	80031a0 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800318a:	2380      	movs	r3, #128	@ 0x80
 800318c:	021b      	lsls	r3, r3, #8
 800318e:	61bb      	str	r3, [r7, #24]
        break;
 8003190:	e006      	b.n	80031a0 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8003192:	2300      	movs	r3, #0
 8003194:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003196:	231e      	movs	r3, #30
 8003198:	18fb      	adds	r3, r7, r3
 800319a:	2201      	movs	r2, #1
 800319c:	701a      	strb	r2, [r3, #0]
        break;
 800319e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d028      	beq.n	80031f8 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031aa:	4b25      	ldr	r3, [pc, #148]	@ (8003240 <UART_SetConfig+0x2f8>)
 80031ac:	0052      	lsls	r2, r2, #1
 80031ae:	5ad3      	ldrh	r3, [r2, r3]
 80031b0:	0019      	movs	r1, r3
 80031b2:	69b8      	ldr	r0, [r7, #24]
 80031b4:	f7fc ffa8 	bl	8000108 <__udivsi3>
 80031b8:	0003      	movs	r3, r0
 80031ba:	001a      	movs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	085b      	lsrs	r3, r3, #1
 80031c2:	18d2      	adds	r2, r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	0019      	movs	r1, r3
 80031ca:	0010      	movs	r0, r2
 80031cc:	f7fc ff9c 	bl	8000108 <__udivsi3>
 80031d0:	0003      	movs	r3, r0
 80031d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	2b0f      	cmp	r3, #15
 80031d8:	d90a      	bls.n	80031f0 <UART_SetConfig+0x2a8>
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	2380      	movs	r3, #128	@ 0x80
 80031de:	025b      	lsls	r3, r3, #9
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d205      	bcs.n	80031f0 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	60da      	str	r2, [r3, #12]
 80031ee:	e003      	b.n	80031f8 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80031f0:	231e      	movs	r3, #30
 80031f2:	18fb      	adds	r3, r7, r3
 80031f4:	2201      	movs	r2, #1
 80031f6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	226a      	movs	r2, #106	@ 0x6a
 80031fc:	2101      	movs	r1, #1
 80031fe:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2268      	movs	r2, #104	@ 0x68
 8003204:	2101      	movs	r1, #1
 8003206:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003214:	231e      	movs	r3, #30
 8003216:	18fb      	adds	r3, r7, r3
 8003218:	781b      	ldrb	r3, [r3, #0]
}
 800321a:	0018      	movs	r0, r3
 800321c:	46bd      	mov	sp, r7
 800321e:	b008      	add	sp, #32
 8003220:	bd80      	pop	{r7, pc}
 8003222:	46c0      	nop			@ (mov r8, r8)
 8003224:	cfff69f3 	.word	0xcfff69f3
 8003228:	ffffcfff 	.word	0xffffcfff
 800322c:	11fff4ff 	.word	0x11fff4ff
 8003230:	40013800 	.word	0x40013800
 8003234:	40021000 	.word	0x40021000
 8003238:	40004400 	.word	0x40004400
 800323c:	02dc6c00 	.word	0x02dc6c00
 8003240:	0800664c 	.word	0x0800664c

08003244 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003250:	2208      	movs	r2, #8
 8003252:	4013      	ands	r3, r2
 8003254:	d00b      	beq.n	800326e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	4a4a      	ldr	r2, [pc, #296]	@ (8003388 <UART_AdvFeatureConfig+0x144>)
 800325e:	4013      	ands	r3, r2
 8003260:	0019      	movs	r1, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003272:	2201      	movs	r2, #1
 8003274:	4013      	ands	r3, r2
 8003276:	d00b      	beq.n	8003290 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	4a43      	ldr	r2, [pc, #268]	@ (800338c <UART_AdvFeatureConfig+0x148>)
 8003280:	4013      	ands	r3, r2
 8003282:	0019      	movs	r1, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003294:	2202      	movs	r2, #2
 8003296:	4013      	ands	r3, r2
 8003298:	d00b      	beq.n	80032b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	4a3b      	ldr	r2, [pc, #236]	@ (8003390 <UART_AdvFeatureConfig+0x14c>)
 80032a2:	4013      	ands	r3, r2
 80032a4:	0019      	movs	r1, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b6:	2204      	movs	r2, #4
 80032b8:	4013      	ands	r3, r2
 80032ba:	d00b      	beq.n	80032d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	4a34      	ldr	r2, [pc, #208]	@ (8003394 <UART_AdvFeatureConfig+0x150>)
 80032c4:	4013      	ands	r3, r2
 80032c6:	0019      	movs	r1, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d8:	2210      	movs	r2, #16
 80032da:	4013      	ands	r3, r2
 80032dc:	d00b      	beq.n	80032f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	4a2c      	ldr	r2, [pc, #176]	@ (8003398 <UART_AdvFeatureConfig+0x154>)
 80032e6:	4013      	ands	r3, r2
 80032e8:	0019      	movs	r1, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032fa:	2220      	movs	r2, #32
 80032fc:	4013      	ands	r3, r2
 80032fe:	d00b      	beq.n	8003318 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	4a25      	ldr	r2, [pc, #148]	@ (800339c <UART_AdvFeatureConfig+0x158>)
 8003308:	4013      	ands	r3, r2
 800330a:	0019      	movs	r1, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800331c:	2240      	movs	r2, #64	@ 0x40
 800331e:	4013      	ands	r3, r2
 8003320:	d01d      	beq.n	800335e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	4a1d      	ldr	r2, [pc, #116]	@ (80033a0 <UART_AdvFeatureConfig+0x15c>)
 800332a:	4013      	ands	r3, r2
 800332c:	0019      	movs	r1, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800333e:	2380      	movs	r3, #128	@ 0x80
 8003340:	035b      	lsls	r3, r3, #13
 8003342:	429a      	cmp	r2, r3
 8003344:	d10b      	bne.n	800335e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	4a15      	ldr	r2, [pc, #84]	@ (80033a4 <UART_AdvFeatureConfig+0x160>)
 800334e:	4013      	ands	r3, r2
 8003350:	0019      	movs	r1, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003362:	2280      	movs	r2, #128	@ 0x80
 8003364:	4013      	ands	r3, r2
 8003366:	d00b      	beq.n	8003380 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	4a0e      	ldr	r2, [pc, #56]	@ (80033a8 <UART_AdvFeatureConfig+0x164>)
 8003370:	4013      	ands	r3, r2
 8003372:	0019      	movs	r1, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	605a      	str	r2, [r3, #4]
  }
}
 8003380:	46c0      	nop			@ (mov r8, r8)
 8003382:	46bd      	mov	sp, r7
 8003384:	b002      	add	sp, #8
 8003386:	bd80      	pop	{r7, pc}
 8003388:	ffff7fff 	.word	0xffff7fff
 800338c:	fffdffff 	.word	0xfffdffff
 8003390:	fffeffff 	.word	0xfffeffff
 8003394:	fffbffff 	.word	0xfffbffff
 8003398:	ffffefff 	.word	0xffffefff
 800339c:	ffffdfff 	.word	0xffffdfff
 80033a0:	ffefffff 	.word	0xffefffff
 80033a4:	ff9fffff 	.word	0xff9fffff
 80033a8:	fff7ffff 	.word	0xfff7ffff

080033ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b092      	sub	sp, #72	@ 0x48
 80033b0:	af02      	add	r7, sp, #8
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2290      	movs	r2, #144	@ 0x90
 80033b8:	2100      	movs	r1, #0
 80033ba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033bc:	f7fd fca0 	bl	8000d00 <HAL_GetTick>
 80033c0:	0003      	movs	r3, r0
 80033c2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2208      	movs	r2, #8
 80033cc:	4013      	ands	r3, r2
 80033ce:	2b08      	cmp	r3, #8
 80033d0:	d12d      	bne.n	800342e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033d4:	2280      	movs	r2, #128	@ 0x80
 80033d6:	0391      	lsls	r1, r2, #14
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	4a47      	ldr	r2, [pc, #284]	@ (80034f8 <UART_CheckIdleState+0x14c>)
 80033dc:	9200      	str	r2, [sp, #0]
 80033de:	2200      	movs	r2, #0
 80033e0:	f000 f88e 	bl	8003500 <UART_WaitOnFlagUntilTimeout>
 80033e4:	1e03      	subs	r3, r0, #0
 80033e6:	d022      	beq.n	800342e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80033e8:	f3ef 8310 	mrs	r3, PRIMASK
 80033ec:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80033ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80033f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80033f2:	2301      	movs	r3, #1
 80033f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033f8:	f383 8810 	msr	PRIMASK, r3
}
 80033fc:	46c0      	nop			@ (mov r8, r8)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2180      	movs	r1, #128	@ 0x80
 800340a:	438a      	bics	r2, r1
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003410:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003414:	f383 8810 	msr	PRIMASK, r3
}
 8003418:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2288      	movs	r2, #136	@ 0x88
 800341e:	2120      	movs	r1, #32
 8003420:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2284      	movs	r2, #132	@ 0x84
 8003426:	2100      	movs	r1, #0
 8003428:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e060      	b.n	80034f0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2204      	movs	r2, #4
 8003436:	4013      	ands	r3, r2
 8003438:	2b04      	cmp	r3, #4
 800343a:	d146      	bne.n	80034ca <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800343c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800343e:	2280      	movs	r2, #128	@ 0x80
 8003440:	03d1      	lsls	r1, r2, #15
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	4a2c      	ldr	r2, [pc, #176]	@ (80034f8 <UART_CheckIdleState+0x14c>)
 8003446:	9200      	str	r2, [sp, #0]
 8003448:	2200      	movs	r2, #0
 800344a:	f000 f859 	bl	8003500 <UART_WaitOnFlagUntilTimeout>
 800344e:	1e03      	subs	r3, r0, #0
 8003450:	d03b      	beq.n	80034ca <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003452:	f3ef 8310 	mrs	r3, PRIMASK
 8003456:	60fb      	str	r3, [r7, #12]
  return(result);
 8003458:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800345a:	637b      	str	r3, [r7, #52]	@ 0x34
 800345c:	2301      	movs	r3, #1
 800345e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	f383 8810 	msr	PRIMASK, r3
}
 8003466:	46c0      	nop			@ (mov r8, r8)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4922      	ldr	r1, [pc, #136]	@ (80034fc <UART_CheckIdleState+0x150>)
 8003474:	400a      	ands	r2, r1
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800347a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f383 8810 	msr	PRIMASK, r3
}
 8003482:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003484:	f3ef 8310 	mrs	r3, PRIMASK
 8003488:	61bb      	str	r3, [r7, #24]
  return(result);
 800348a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800348c:	633b      	str	r3, [r7, #48]	@ 0x30
 800348e:	2301      	movs	r3, #1
 8003490:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	f383 8810 	msr	PRIMASK, r3
}
 8003498:	46c0      	nop			@ (mov r8, r8)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2101      	movs	r1, #1
 80034a6:	438a      	bics	r2, r1
 80034a8:	609a      	str	r2, [r3, #8]
 80034aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	f383 8810 	msr	PRIMASK, r3
}
 80034b4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	228c      	movs	r2, #140	@ 0x8c
 80034ba:	2120      	movs	r1, #32
 80034bc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2284      	movs	r2, #132	@ 0x84
 80034c2:	2100      	movs	r1, #0
 80034c4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e012      	b.n	80034f0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2288      	movs	r2, #136	@ 0x88
 80034ce:	2120      	movs	r1, #32
 80034d0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	228c      	movs	r2, #140	@ 0x8c
 80034d6:	2120      	movs	r1, #32
 80034d8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2284      	movs	r2, #132	@ 0x84
 80034ea:	2100      	movs	r1, #0
 80034ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	0018      	movs	r0, r3
 80034f2:	46bd      	mov	sp, r7
 80034f4:	b010      	add	sp, #64	@ 0x40
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	01ffffff 	.word	0x01ffffff
 80034fc:	fffffedf 	.word	0xfffffedf

08003500 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	603b      	str	r3, [r7, #0]
 800350c:	1dfb      	adds	r3, r7, #7
 800350e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003510:	e051      	b.n	80035b6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	3301      	adds	r3, #1
 8003516:	d04e      	beq.n	80035b6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003518:	f7fd fbf2 	bl	8000d00 <HAL_GetTick>
 800351c:	0002      	movs	r2, r0
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	429a      	cmp	r2, r3
 8003526:	d302      	bcc.n	800352e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e051      	b.n	80035d6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2204      	movs	r2, #4
 800353a:	4013      	ands	r3, r2
 800353c:	d03b      	beq.n	80035b6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2b80      	cmp	r3, #128	@ 0x80
 8003542:	d038      	beq.n	80035b6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2b40      	cmp	r3, #64	@ 0x40
 8003548:	d035      	beq.n	80035b6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	69db      	ldr	r3, [r3, #28]
 8003550:	2208      	movs	r2, #8
 8003552:	4013      	ands	r3, r2
 8003554:	2b08      	cmp	r3, #8
 8003556:	d111      	bne.n	800357c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2208      	movs	r2, #8
 800355e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	0018      	movs	r0, r3
 8003564:	f000 f83c 	bl	80035e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2290      	movs	r2, #144	@ 0x90
 800356c:	2108      	movs	r1, #8
 800356e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2284      	movs	r2, #132	@ 0x84
 8003574:	2100      	movs	r1, #0
 8003576:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e02c      	b.n	80035d6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	69da      	ldr	r2, [r3, #28]
 8003582:	2380      	movs	r3, #128	@ 0x80
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	401a      	ands	r2, r3
 8003588:	2380      	movs	r3, #128	@ 0x80
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	429a      	cmp	r2, r3
 800358e:	d112      	bne.n	80035b6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2280      	movs	r2, #128	@ 0x80
 8003596:	0112      	lsls	r2, r2, #4
 8003598:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	0018      	movs	r0, r3
 800359e:	f000 f81f 	bl	80035e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2290      	movs	r2, #144	@ 0x90
 80035a6:	2120      	movs	r1, #32
 80035a8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2284      	movs	r2, #132	@ 0x84
 80035ae:	2100      	movs	r1, #0
 80035b0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e00f      	b.n	80035d6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	4013      	ands	r3, r2
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	425a      	negs	r2, r3
 80035c6:	4153      	adcs	r3, r2
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	001a      	movs	r2, r3
 80035cc:	1dfb      	adds	r3, r7, #7
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d09e      	beq.n	8003512 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	0018      	movs	r0, r3
 80035d8:	46bd      	mov	sp, r7
 80035da:	b004      	add	sp, #16
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b08e      	sub	sp, #56	@ 0x38
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80035e8:	f3ef 8310 	mrs	r3, PRIMASK
 80035ec:	617b      	str	r3, [r7, #20]
  return(result);
 80035ee:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80035f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80035f2:	2301      	movs	r3, #1
 80035f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	f383 8810 	msr	PRIMASK, r3
}
 80035fc:	46c0      	nop			@ (mov r8, r8)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4926      	ldr	r1, [pc, #152]	@ (80036a4 <UART_EndRxTransfer+0xc4>)
 800360a:	400a      	ands	r2, r1
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003610:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	f383 8810 	msr	PRIMASK, r3
}
 8003618:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800361a:	f3ef 8310 	mrs	r3, PRIMASK
 800361e:	623b      	str	r3, [r7, #32]
  return(result);
 8003620:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003622:	633b      	str	r3, [r7, #48]	@ 0x30
 8003624:	2301      	movs	r3, #1
 8003626:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362a:	f383 8810 	msr	PRIMASK, r3
}
 800362e:	46c0      	nop			@ (mov r8, r8)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689a      	ldr	r2, [r3, #8]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	491b      	ldr	r1, [pc, #108]	@ (80036a8 <UART_EndRxTransfer+0xc8>)
 800363c:	400a      	ands	r2, r1
 800363e:	609a      	str	r2, [r3, #8]
 8003640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003642:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003646:	f383 8810 	msr	PRIMASK, r3
}
 800364a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003650:	2b01      	cmp	r3, #1
 8003652:	d118      	bne.n	8003686 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003654:	f3ef 8310 	mrs	r3, PRIMASK
 8003658:	60bb      	str	r3, [r7, #8]
  return(result);
 800365a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800365c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800365e:	2301      	movs	r3, #1
 8003660:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f383 8810 	msr	PRIMASK, r3
}
 8003668:	46c0      	nop			@ (mov r8, r8)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2110      	movs	r1, #16
 8003676:	438a      	bics	r2, r1
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800367c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	f383 8810 	msr	PRIMASK, r3
}
 8003684:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	228c      	movs	r2, #140	@ 0x8c
 800368a:	2120      	movs	r1, #32
 800368c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800369a:	46c0      	nop			@ (mov r8, r8)
 800369c:	46bd      	mov	sp, r7
 800369e:	b00e      	add	sp, #56	@ 0x38
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	46c0      	nop			@ (mov r8, r8)
 80036a4:	fffffedf 	.word	0xfffffedf
 80036a8:	effffffe 	.word	0xeffffffe

080036ac <__NVIC_SetPriority>:
{
 80036ac:	b590      	push	{r4, r7, lr}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	0002      	movs	r2, r0
 80036b4:	6039      	str	r1, [r7, #0]
 80036b6:	1dfb      	adds	r3, r7, #7
 80036b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80036ba:	1dfb      	adds	r3, r7, #7
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	2b7f      	cmp	r3, #127	@ 0x7f
 80036c0:	d828      	bhi.n	8003714 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036c2:	4a2f      	ldr	r2, [pc, #188]	@ (8003780 <__NVIC_SetPriority+0xd4>)
 80036c4:	1dfb      	adds	r3, r7, #7
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	b25b      	sxtb	r3, r3
 80036ca:	089b      	lsrs	r3, r3, #2
 80036cc:	33c0      	adds	r3, #192	@ 0xc0
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	589b      	ldr	r3, [r3, r2]
 80036d2:	1dfa      	adds	r2, r7, #7
 80036d4:	7812      	ldrb	r2, [r2, #0]
 80036d6:	0011      	movs	r1, r2
 80036d8:	2203      	movs	r2, #3
 80036da:	400a      	ands	r2, r1
 80036dc:	00d2      	lsls	r2, r2, #3
 80036de:	21ff      	movs	r1, #255	@ 0xff
 80036e0:	4091      	lsls	r1, r2
 80036e2:	000a      	movs	r2, r1
 80036e4:	43d2      	mvns	r2, r2
 80036e6:	401a      	ands	r2, r3
 80036e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	019b      	lsls	r3, r3, #6
 80036ee:	22ff      	movs	r2, #255	@ 0xff
 80036f0:	401a      	ands	r2, r3
 80036f2:	1dfb      	adds	r3, r7, #7
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	0018      	movs	r0, r3
 80036f8:	2303      	movs	r3, #3
 80036fa:	4003      	ands	r3, r0
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003700:	481f      	ldr	r0, [pc, #124]	@ (8003780 <__NVIC_SetPriority+0xd4>)
 8003702:	1dfb      	adds	r3, r7, #7
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	b25b      	sxtb	r3, r3
 8003708:	089b      	lsrs	r3, r3, #2
 800370a:	430a      	orrs	r2, r1
 800370c:	33c0      	adds	r3, #192	@ 0xc0
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	501a      	str	r2, [r3, r0]
}
 8003712:	e031      	b.n	8003778 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003714:	4a1b      	ldr	r2, [pc, #108]	@ (8003784 <__NVIC_SetPriority+0xd8>)
 8003716:	1dfb      	adds	r3, r7, #7
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	0019      	movs	r1, r3
 800371c:	230f      	movs	r3, #15
 800371e:	400b      	ands	r3, r1
 8003720:	3b08      	subs	r3, #8
 8003722:	089b      	lsrs	r3, r3, #2
 8003724:	3306      	adds	r3, #6
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	18d3      	adds	r3, r2, r3
 800372a:	3304      	adds	r3, #4
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	1dfa      	adds	r2, r7, #7
 8003730:	7812      	ldrb	r2, [r2, #0]
 8003732:	0011      	movs	r1, r2
 8003734:	2203      	movs	r2, #3
 8003736:	400a      	ands	r2, r1
 8003738:	00d2      	lsls	r2, r2, #3
 800373a:	21ff      	movs	r1, #255	@ 0xff
 800373c:	4091      	lsls	r1, r2
 800373e:	000a      	movs	r2, r1
 8003740:	43d2      	mvns	r2, r2
 8003742:	401a      	ands	r2, r3
 8003744:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	019b      	lsls	r3, r3, #6
 800374a:	22ff      	movs	r2, #255	@ 0xff
 800374c:	401a      	ands	r2, r3
 800374e:	1dfb      	adds	r3, r7, #7
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	0018      	movs	r0, r3
 8003754:	2303      	movs	r3, #3
 8003756:	4003      	ands	r3, r0
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800375c:	4809      	ldr	r0, [pc, #36]	@ (8003784 <__NVIC_SetPriority+0xd8>)
 800375e:	1dfb      	adds	r3, r7, #7
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	001c      	movs	r4, r3
 8003764:	230f      	movs	r3, #15
 8003766:	4023      	ands	r3, r4
 8003768:	3b08      	subs	r3, #8
 800376a:	089b      	lsrs	r3, r3, #2
 800376c:	430a      	orrs	r2, r1
 800376e:	3306      	adds	r3, #6
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	18c3      	adds	r3, r0, r3
 8003774:	3304      	adds	r3, #4
 8003776:	601a      	str	r2, [r3, #0]
}
 8003778:	46c0      	nop			@ (mov r8, r8)
 800377a:	46bd      	mov	sp, r7
 800377c:	b003      	add	sp, #12
 800377e:	bd90      	pop	{r4, r7, pc}
 8003780:	e000e100 	.word	0xe000e100
 8003784:	e000ed00 	.word	0xe000ed00

08003788 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 800378c:	4b05      	ldr	r3, [pc, #20]	@ (80037a4 <SysTick_Handler+0x1c>)
 800378e:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003790:	f001 fed6 	bl	8005540 <xTaskGetSchedulerState>
 8003794:	0003      	movs	r3, r0
 8003796:	2b01      	cmp	r3, #1
 8003798:	d001      	beq.n	800379e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800379a:	f002 fcb5 	bl	8006108 <xPortSysTickHandler>
  }
}
 800379e:	46c0      	nop			@ (mov r8, r8)
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	e000e010 	.word	0xe000e010

080037a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 80037ac:	2305      	movs	r3, #5
 80037ae:	425b      	negs	r3, r3
 80037b0:	2100      	movs	r1, #0
 80037b2:	0018      	movs	r0, r3
 80037b4:	f7ff ff7a 	bl	80036ac <__NVIC_SetPriority>
#endif
}
 80037b8:	46c0      	nop			@ (mov r8, r8)
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 80037be:	b580      	push	{r7, lr}
 80037c0:	b084      	sub	sp, #16
 80037c2:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037c8:	f3ef 8305 	mrs	r3, IPSR
 80037cc:	607b      	str	r3, [r7, #4]
  return(result);
 80037ce:	687b      	ldr	r3, [r7, #4]

  if (IS_IRQ_MODE()) {
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d002      	beq.n	80037da <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 80037d4:	2301      	movs	r3, #1
 80037d6:	60fb      	str	r3, [r7, #12]
 80037d8:	e00e      	b.n	80037f8 <IRQ_Context+0x3a>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 80037da:	f001 feb1 	bl	8005540 <xTaskGetSchedulerState>
 80037de:	0003      	movs	r3, r0
 80037e0:	60bb      	str	r3, [r7, #8]

    if (state != taskSCHEDULER_NOT_STARTED) {
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d007      	beq.n	80037f8 <IRQ_Context+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80037e8:	f3ef 8310 	mrs	r3, PRIMASK
 80037ec:	603b      	str	r3, [r7, #0]
  return(result);
 80037ee:	683b      	ldr	r3, [r7, #0]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <IRQ_Context+0x3a>
        /* Interrupts are masked */
        irq = 1U;
 80037f4:	2301      	movs	r3, #1
 80037f6:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 80037f8:	68fb      	ldr	r3, [r7, #12]
}
 80037fa:	0018      	movs	r0, r3
 80037fc:	46bd      	mov	sp, r7
 80037fe:	b004      	add	sp, #16
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800380a:	f7ff ffd8 	bl	80037be <IRQ_Context>
 800380e:	1e03      	subs	r3, r0, #0
 8003810:	d003      	beq.n	800381a <osKernelInitialize+0x16>
    stat = osErrorISR;
 8003812:	2306      	movs	r3, #6
 8003814:	425b      	negs	r3, r3
 8003816:	607b      	str	r3, [r7, #4]
 8003818:	e013      	b.n	8003842 <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 800381a:	f001 fe91 	bl	8005540 <xTaskGetSchedulerState>
 800381e:	0003      	movs	r3, r0
 8003820:	603b      	str	r3, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d109      	bne.n	800383c <osKernelInitialize+0x38>
 8003828:	4b08      	ldr	r3, [pc, #32]	@ (800384c <osKernelInitialize+0x48>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d105      	bne.n	800383c <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003830:	4b06      	ldr	r3, [pc, #24]	@ (800384c <osKernelInitialize+0x48>)
 8003832:	2201      	movs	r2, #1
 8003834:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003836:	2300      	movs	r3, #0
 8003838:	607b      	str	r3, [r7, #4]
 800383a:	e002      	b.n	8003842 <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 800383c:	2301      	movs	r3, #1
 800383e:	425b      	negs	r3, r3
 8003840:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8003842:	687b      	ldr	r3, [r7, #4]
}
 8003844:	0018      	movs	r0, r3
 8003846:	46bd      	mov	sp, r7
 8003848:	b002      	add	sp, #8
 800384a:	bd80      	pop	{r7, pc}
 800384c:	200001b8 	.word	0x200001b8

08003850 <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8003856:	f7ff ffb2 	bl	80037be <IRQ_Context>
 800385a:	1e03      	subs	r3, r0, #0
 800385c:	d003      	beq.n	8003866 <osKernelStart+0x16>
    stat = osErrorISR;
 800385e:	2306      	movs	r3, #6
 8003860:	425b      	negs	r3, r3
 8003862:	607b      	str	r3, [r7, #4]
 8003864:	e017      	b.n	8003896 <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 8003866:	f001 fe6b 	bl	8005540 <xTaskGetSchedulerState>
 800386a:	0003      	movs	r3, r0
 800386c:	603b      	str	r3, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d10d      	bne.n	8003890 <osKernelStart+0x40>
 8003874:	4b0a      	ldr	r3, [pc, #40]	@ (80038a0 <osKernelStart+0x50>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d109      	bne.n	8003890 <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800387c:	f7ff ff94 	bl	80037a8 <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 8003880:	4b07      	ldr	r3, [pc, #28]	@ (80038a0 <osKernelStart+0x50>)
 8003882:	2202      	movs	r2, #2
 8003884:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003886:	f001 f92b 	bl	8004ae0 <vTaskStartScheduler>
      stat = osOK;
 800388a:	2300      	movs	r3, #0
 800388c:	607b      	str	r3, [r7, #4]
 800388e:	e002      	b.n	8003896 <osKernelStart+0x46>
    } else {
      stat = osError;
 8003890:	2301      	movs	r3, #1
 8003892:	425b      	negs	r3, r3
 8003894:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8003896:	687b      	ldr	r3, [r7, #4]
}
 8003898:	0018      	movs	r0, r3
 800389a:	46bd      	mov	sp, r7
 800389c:	b002      	add	sp, #8
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	200001b8 	.word	0x200001b8

080038a4 <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80038a4:	b5b0      	push	{r4, r5, r7, lr}
 80038a6:	b08e      	sub	sp, #56	@ 0x38
 80038a8:	af04      	add	r7, sp, #16
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80038b0:	2300      	movs	r3, #0
 80038b2:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 80038b4:	f7ff ff83 	bl	80037be <IRQ_Context>
 80038b8:	1e03      	subs	r3, r0, #0
 80038ba:	d000      	beq.n	80038be <osThreadNew+0x1a>
 80038bc:	e081      	b.n	80039c2 <osThreadNew+0x11e>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d100      	bne.n	80038c6 <osThreadNew+0x22>
 80038c4:	e07d      	b.n	80039c2 <osThreadNew+0x11e>
    stack = configMINIMAL_STACK_SIZE;
 80038c6:	2380      	movs	r3, #128	@ 0x80
 80038c8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80038ca:	2318      	movs	r3, #24
 80038cc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80038ce:	2300      	movs	r3, #0
 80038d0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80038d2:	2301      	movs	r3, #1
 80038d4:	425b      	negs	r3, r3
 80038d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d044      	beq.n	8003968 <osThreadNew+0xc4>
      if (attr->name != NULL) {
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <osThreadNew+0x48>
        name = attr->name;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d002      	beq.n	80038fa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d007      	beq.n	8003910 <osThreadNew+0x6c>
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	2b38      	cmp	r3, #56	@ 0x38
 8003904:	d804      	bhi.n	8003910 <osThreadNew+0x6c>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	4013      	ands	r3, r2
 800390e:	d001      	beq.n	8003914 <osThreadNew+0x70>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 8003910:	2300      	movs	r3, #0
 8003912:	e057      	b.n	80039c4 <osThreadNew+0x120>
      }

      if (attr->stack_size > 0U) {
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <osThreadNew+0x80>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	089b      	lsrs	r3, r3, #2
 8003922:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00e      	beq.n	800394a <osThreadNew+0xa6>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	2b5b      	cmp	r3, #91	@ 0x5b
 8003932:	d90a      	bls.n	800394a <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003938:	2b00      	cmp	r3, #0
 800393a:	d006      	beq.n	800394a <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d002      	beq.n	800394a <osThreadNew+0xa6>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 8003944:	2301      	movs	r3, #1
 8003946:	61bb      	str	r3, [r7, #24]
 8003948:	e010      	b.n	800396c <osThreadNew+0xc8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10c      	bne.n	800396c <osThreadNew+0xc8>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d108      	bne.n	800396c <osThreadNew+0xc8>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d104      	bne.n	800396c <osThreadNew+0xc8>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 8003962:	2300      	movs	r3, #0
 8003964:	61bb      	str	r3, [r7, #24]
 8003966:	e001      	b.n	800396c <osThreadNew+0xc8>
        }
      }
    }
    else {
      mem = 0;
 8003968:	2300      	movs	r3, #0
 800396a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d112      	bne.n	8003998 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800397a:	68bd      	ldr	r5, [r7, #8]
 800397c:	6a3c      	ldr	r4, [r7, #32]
 800397e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	9302      	str	r3, [sp, #8]
 8003984:	9201      	str	r2, [sp, #4]
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	002b      	movs	r3, r5
 800398c:	0022      	movs	r2, r4
 800398e:	f000 fed2 	bl	8004736 <xTaskCreateStatic>
 8003992:	0003      	movs	r3, r0
 8003994:	617b      	str	r3, [r7, #20]
 8003996:	e014      	b.n	80039c2 <osThreadNew+0x11e>
      #endif
    }
    else {
      if (mem == 0) {
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d111      	bne.n	80039c2 <osThreadNew+0x11e>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68bc      	ldr	r4, [r7, #8]
 80039a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	2314      	movs	r3, #20
 80039aa:	18fb      	adds	r3, r7, r3
 80039ac:	9301      	str	r3, [sp, #4]
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	0023      	movs	r3, r4
 80039b4:	f000 ff0c 	bl	80047d0 <xTaskCreate>
 80039b8:	0003      	movs	r3, r0
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d001      	beq.n	80039c2 <osThreadNew+0x11e>
            hTask = NULL;
 80039be:	2300      	movs	r3, #0
 80039c0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 80039c2:	697b      	ldr	r3, [r7, #20]
}
 80039c4:	0018      	movs	r0, r3
 80039c6:	46bd      	mov	sp, r7
 80039c8:	b00a      	add	sp, #40	@ 0x28
 80039ca:	bdb0      	pop	{r4, r5, r7, pc}

080039cc <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 80039d4:	f7ff fef3 	bl	80037be <IRQ_Context>
 80039d8:	1e03      	subs	r3, r0, #0
 80039da:	d003      	beq.n	80039e4 <osDelay+0x18>
    stat = osErrorISR;
 80039dc:	2306      	movs	r3, #6
 80039de:	425b      	negs	r3, r3
 80039e0:	60fb      	str	r3, [r7, #12]
 80039e2:	e008      	b.n	80039f6 <osDelay+0x2a>
  }
  else {
    stat = osOK;
 80039e4:	2300      	movs	r3, #0
 80039e6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <osDelay+0x2a>
      vTaskDelay(ticks);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	0018      	movs	r0, r3
 80039f2:	f001 f84f 	bl	8004a94 <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 80039f6:	68fb      	ldr	r3, [r7, #12]
}
 80039f8:	0018      	movs	r0, r3
 80039fa:	46bd      	mov	sp, r7
 80039fc:	b004      	add	sp, #16
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <osMutexAcquire>:
}

/*
  Acquire a Mutex or timeout if it is locked.
*/
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	4393      	bics	r3, r2
 8003a10:	613b      	str	r3, [r7, #16]

  /* Extract recursive mutex flag */
  rmtx = (uint32_t)mutex_id & 1U;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	4013      	ands	r3, r2
 8003a18:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	617b      	str	r3, [r7, #20]

  if (IRQ_Context() != 0U) {
 8003a1e:	f7ff fece 	bl	80037be <IRQ_Context>
 8003a22:	1e03      	subs	r3, r0, #0
 8003a24:	d003      	beq.n	8003a2e <osMutexAcquire+0x2e>
    stat = osErrorISR;
 8003a26:	2306      	movs	r3, #6
 8003a28:	425b      	negs	r3, r3
 8003a2a:	617b      	str	r3, [r7, #20]
 8003a2c:	e030      	b.n	8003a90 <osMutexAcquire+0x90>
  }
  else if (hMutex == NULL) {
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d103      	bne.n	8003a3c <osMutexAcquire+0x3c>
    stat = osErrorParameter;
 8003a34:	2304      	movs	r3, #4
 8003a36:	425b      	negs	r3, r3
 8003a38:	617b      	str	r3, [r7, #20]
 8003a3a:	e029      	b.n	8003a90 <osMutexAcquire+0x90>
  }
  else {
    if (rmtx != 0U) {
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d013      	beq.n	8003a6a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	0011      	movs	r1, r2
 8003a48:	0018      	movs	r0, r3
 8003a4a:	f000 fa3f 	bl	8003ecc <xQueueTakeMutexRecursive>
 8003a4e:	0003      	movs	r3, r0
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d01d      	beq.n	8003a90 <osMutexAcquire+0x90>
        if (timeout != 0U) {
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	425b      	negs	r3, r3
 8003a5e:	617b      	str	r3, [r7, #20]
 8003a60:	e016      	b.n	8003a90 <osMutexAcquire+0x90>
        } else {
          stat = osErrorResource;
 8003a62:	2303      	movs	r3, #3
 8003a64:	425b      	negs	r3, r3
 8003a66:	617b      	str	r3, [r7, #20]
 8003a68:	e012      	b.n	8003a90 <osMutexAcquire+0x90>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	0011      	movs	r1, r2
 8003a70:	0018      	movs	r0, r3
 8003a72:	f000 fbdc 	bl	800422e <xQueueSemaphoreTake>
 8003a76:	0003      	movs	r3, r0
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d009      	beq.n	8003a90 <osMutexAcquire+0x90>
        if (timeout != 0U) {
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <osMutexAcquire+0x8a>
          stat = osErrorTimeout;
 8003a82:	2302      	movs	r3, #2
 8003a84:	425b      	negs	r3, r3
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	e002      	b.n	8003a90 <osMutexAcquire+0x90>
        } else {
          stat = osErrorResource;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	425b      	negs	r3, r3
 8003a8e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return execution status */
  return (stat);
 8003a90:	697b      	ldr	r3, [r7, #20]
}
 8003a92:	0018      	movs	r0, r3
 8003a94:	46bd      	mov	sp, r7
 8003a96:	b006      	add	sp, #24
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <osMutexRelease>:

/*
  Release a Mutex that was acquired by osMutexAcquire.
*/
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b086      	sub	sp, #24
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	4393      	bics	r3, r2
 8003aa8:	613b      	str	r3, [r7, #16]

  /* Extract recursive mutex flag */
  rmtx = (uint32_t)mutex_id & 1U;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	4013      	ands	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	617b      	str	r3, [r7, #20]

  if (IRQ_Context() != 0U) {
 8003ab6:	f7ff fe82 	bl	80037be <IRQ_Context>
 8003aba:	1e03      	subs	r3, r0, #0
 8003abc:	d003      	beq.n	8003ac6 <osMutexRelease+0x2c>
    stat = osErrorISR;
 8003abe:	2306      	movs	r3, #6
 8003ac0:	425b      	negs	r3, r3
 8003ac2:	617b      	str	r3, [r7, #20]
 8003ac4:	e020      	b.n	8003b08 <osMutexRelease+0x6e>
  }
  else if (hMutex == NULL) {
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d103      	bne.n	8003ad4 <osMutexRelease+0x3a>
    stat = osErrorParameter;
 8003acc:	2304      	movs	r3, #4
 8003ace:	425b      	negs	r3, r3
 8003ad0:	617b      	str	r3, [r7, #20]
 8003ad2:	e019      	b.n	8003b08 <osMutexRelease+0x6e>
  }
  else {
    if (rmtx != 0U) {
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00a      	beq.n	8003af0 <osMutexRelease+0x56>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	0018      	movs	r0, r3
 8003ade:	f000 f9c9 	bl	8003e74 <xQueueGiveMutexRecursive>
 8003ae2:	0003      	movs	r3, r0
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d00f      	beq.n	8003b08 <osMutexRelease+0x6e>
        stat = osErrorResource;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	425b      	negs	r3, r3
 8003aec:	617b      	str	r3, [r7, #20]
 8003aee:	e00b      	b.n	8003b08 <osMutexRelease+0x6e>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8003af0:	6938      	ldr	r0, [r7, #16]
 8003af2:	2300      	movs	r3, #0
 8003af4:	2200      	movs	r2, #0
 8003af6:	2100      	movs	r1, #0
 8003af8:	f000 fa19 	bl	8003f2e <xQueueGenericSend>
 8003afc:	0003      	movs	r3, r0
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d002      	beq.n	8003b08 <osMutexRelease+0x6e>
        stat = osErrorResource;
 8003b02:	2303      	movs	r3, #3
 8003b04:	425b      	negs	r3, r3
 8003b06:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return execution status */
  return (stat);
 8003b08:	697b      	ldr	r3, [r7, #20]
}
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	b006      	add	sp, #24
 8003b10:	bd80      	pop	{r7, pc}
	...

08003b14 <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4a06      	ldr	r2, [pc, #24]	@ (8003b3c <vApplicationGetIdleTaskMemory+0x28>)
 8003b24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	4a05      	ldr	r2, [pc, #20]	@ (8003b40 <vApplicationGetIdleTaskMemory+0x2c>)
 8003b2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2280      	movs	r2, #128	@ 0x80
 8003b30:	601a      	str	r2, [r3, #0]
}
 8003b32:	46c0      	nop			@ (mov r8, r8)
 8003b34:	46bd      	mov	sp, r7
 8003b36:	b004      	add	sp, #16
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	46c0      	nop			@ (mov r8, r8)
 8003b3c:	200001bc 	.word	0x200001bc
 8003b40:	20000218 	.word	0x20000218

08003b44 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4a06      	ldr	r2, [pc, #24]	@ (8003b6c <vApplicationGetTimerTaskMemory+0x28>)
 8003b54:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	4a05      	ldr	r2, [pc, #20]	@ (8003b70 <vApplicationGetTimerTaskMemory+0x2c>)
 8003b5a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2280      	movs	r2, #128	@ 0x80
 8003b60:	601a      	str	r2, [r3, #0]
}
 8003b62:	46c0      	nop			@ (mov r8, r8)
 8003b64:	46bd      	mov	sp, r7
 8003b66:	b004      	add	sp, #16
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	46c0      	nop			@ (mov r8, r8)
 8003b6c:	20000418 	.word	0x20000418
 8003b70:	20000474 	.word	0x20000474

08003b74 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3308      	adds	r3, #8
 8003b80:	001a      	movs	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	4252      	negs	r2, r2
 8003b8c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	3308      	adds	r3, #8
 8003b92:	001a      	movs	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3308      	adds	r3, #8
 8003b9c:	001a      	movs	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ba8:	46c0      	nop			@ (mov r8, r8)
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b002      	add	sp, #8
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003bbe:	46c0      	nop			@ (mov r8, r8)
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	b002      	add	sp, #8
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b084      	sub	sp, #16
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
 8003bce:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	d103      	bne.n	8003be4 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	60fb      	str	r3, [r7, #12]
 8003be2:	e00c      	b.n	8003bfe <vListInsert+0x38>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	3308      	adds	r3, #8
 8003be8:	60fb      	str	r3, [r7, #12]
 8003bea:	e002      	b.n	8003bf2 <vListInsert+0x2c>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	60fb      	str	r3, [r7, #12]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d2f6      	bcs.n	8003bec <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	1c5a      	adds	r2, r3, #1
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	601a      	str	r2, [r3, #0]
}
 8003c2a:	46c0      	nop			@ (mov r8, r8)
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	b004      	add	sp, #16
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b084      	sub	sp, #16
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6892      	ldr	r2, [r2, #8]
 8003c48:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6852      	ldr	r2, [r2, #4]
 8003c52:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d103      	bne.n	8003c66 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689a      	ldr	r2, [r3, #8]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	1e5a      	subs	r2, r3, #1
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
}
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	b004      	add	sp, #16
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003c82:	b5b0      	push	{r4, r5, r7, lr}
 8003c84:	b084      	sub	sp, #16
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
 8003c8a:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d102      	bne.n	8003ca0 <xQueueGenericReset+0x1e>
 8003c9a:	b672      	cpsid	i
 8003c9c:	46c0      	nop			@ (mov r8, r8)
 8003c9e:	e7fd      	b.n	8003c9c <xQueueGenericReset+0x1a>

    if( ( pxQueue != NULL ) &&
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d100      	bne.n	8003ca8 <xQueueGenericReset+0x26>
 8003ca6:	e06a      	b.n	8003d7e <xQueueGenericReset+0xfc>
        ( pxQueue->uxLength >= 1U ) &&
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d066      	beq.n	8003d7e <xQueueGenericReset+0xfc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cb8:	2400      	movs	r4, #0
 8003cba:	0c15      	lsrs	r5, r2, #16
 8003cbc:	0c19      	lsrs	r1, r3, #16
 8003cbe:	b2a8      	uxth	r0, r5
 8003cc0:	2800      	cmp	r0, #0
 8003cc2:	d104      	bne.n	8003cce <xQueueGenericReset+0x4c>
 8003cc4:	b288      	uxth	r0, r1
 8003cc6:	2800      	cmp	r0, #0
 8003cc8:	d013      	beq.n	8003cf2 <xQueueGenericReset+0x70>
 8003cca:	1c10      	adds	r0, r2, #0
 8003ccc:	e004      	b.n	8003cd8 <xQueueGenericReset+0x56>
 8003cce:	b289      	uxth	r1, r1
 8003cd0:	2900      	cmp	r1, #0
 8003cd2:	d10d      	bne.n	8003cf0 <xQueueGenericReset+0x6e>
 8003cd4:	1c29      	adds	r1, r5, #0
 8003cd6:	1c18      	adds	r0, r3, #0
 8003cd8:	b292      	uxth	r2, r2
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	435a      	muls	r2, r3
 8003cde:	b283      	uxth	r3, r0
 8003ce0:	b289      	uxth	r1, r1
 8003ce2:	434b      	muls	r3, r1
 8003ce4:	0c12      	lsrs	r2, r2, #16
 8003ce6:	189b      	adds	r3, r3, r2
 8003ce8:	141b      	asrs	r3, r3, #16
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d000      	beq.n	8003cf2 <xQueueGenericReset+0x70>
 8003cf0:	2401      	movs	r4, #1
 8003cf2:	1e23      	subs	r3, r4, #0
        ( pxQueue->uxLength >= 1U ) &&
 8003cf4:	d143      	bne.n	8003d7e <xQueueGenericReset+0xfc>
    {
        taskENTER_CRITICAL();
 8003cf6:	f002 f9ab 	bl	8006050 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d06:	434b      	muls	r3, r1
 8003d08:	18d2      	adds	r2, r2, r3
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	2200      	movs	r2, #0
 8003d12:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d24:	1e59      	subs	r1, r3, #1
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2a:	434b      	muls	r3, r1
 8003d2c:	18d2      	adds	r2, r2, r3
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2244      	movs	r2, #68	@ 0x44
 8003d36:	21ff      	movs	r1, #255	@ 0xff
 8003d38:	5499      	strb	r1, [r3, r2]
            pxQueue->cTxLock = queueUNLOCKED;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2245      	movs	r2, #69	@ 0x45
 8003d3e:	21ff      	movs	r1, #255	@ 0xff
 8003d40:	5499      	strb	r1, [r3, r2]

            if( xNewQueue == pdFALSE )
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10d      	bne.n	8003d64 <xQueueGenericReset+0xe2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d013      	beq.n	8003d78 <xQueueGenericReset+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	3310      	adds	r3, #16
 8003d54:	0018      	movs	r0, r3
 8003d56:	f001 f9df 	bl	8005118 <xTaskRemoveFromEventList>
 8003d5a:	1e03      	subs	r3, r0, #0
 8003d5c:	d00c      	beq.n	8003d78 <xQueueGenericReset+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003d5e:	f002 f967 	bl	8006030 <vPortYield>
 8003d62:	e009      	b.n	8003d78 <xQueueGenericReset+0xf6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	3310      	adds	r3, #16
 8003d68:	0018      	movs	r0, r3
 8003d6a:	f7ff ff03 	bl	8003b74 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	3324      	adds	r3, #36	@ 0x24
 8003d72:	0018      	movs	r0, r3
 8003d74:	f7ff fefe 	bl	8003b74 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8003d78:	f002 f97c 	bl	8006074 <vPortExitCritical>
 8003d7c:	e001      	b.n	8003d82 <xQueueGenericReset+0x100>
    }
    else
    {
        xReturn = pdFAIL;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d102      	bne.n	8003d8e <xQueueGenericReset+0x10c>
 8003d88:	b672      	cpsid	i
 8003d8a:	46c0      	nop			@ (mov r8, r8)
 8003d8c:	e7fd      	b.n	8003d8a <xQueueGenericReset+0x108>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
}
 8003d90:	0018      	movs	r0, r3
 8003d92:	46bd      	mov	sp, r7
 8003d94:	b004      	add	sp, #16
 8003d96:	bdb0      	pop	{r4, r5, r7, pc}

08003d98 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 8003d98:	b590      	push	{r4, r7, lr}
 8003d9a:	b089      	sub	sp, #36	@ 0x24
 8003d9c:	af02      	add	r7, sp, #8
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
 8003da4:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 8003da6:	2300      	movs	r3, #0
 8003da8:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d102      	bne.n	8003db6 <xQueueGenericCreateStatic+0x1e>
 8003db0:	b672      	cpsid	i
 8003db2:	46c0      	nop			@ (mov r8, r8)
 8003db4:	e7fd      	b.n	8003db2 <xQueueGenericCreateStatic+0x1a>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d029      	beq.n	8003e10 <xQueueGenericCreateStatic+0x78>
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d026      	beq.n	8003e10 <xQueueGenericCreateStatic+0x78>
            ( pxStaticQueue != NULL ) &&
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d002      	beq.n	8003dce <xQueueGenericCreateStatic+0x36>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d020      	beq.n	8003e10 <xQueueGenericCreateStatic+0x78>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d102      	bne.n	8003dda <xQueueGenericCreateStatic+0x42>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d11a      	bne.n	8003e10 <xQueueGenericCreateStatic+0x78>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 8003dda:	2350      	movs	r3, #80	@ 0x50
 8003ddc:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	2b50      	cmp	r3, #80	@ 0x50
 8003de2:	d002      	beq.n	8003dea <xQueueGenericCreateStatic+0x52>
 8003de4:	b672      	cpsid	i
 8003de6:	46c0      	nop			@ (mov r8, r8)
 8003de8:	e7fd      	b.n	8003de6 <xQueueGenericCreateStatic+0x4e>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 8003dea:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	2246      	movs	r2, #70	@ 0x46
 8003df4:	2101      	movs	r1, #1
 8003df6:	5499      	strb	r1, [r3, r2]
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003df8:	2328      	movs	r3, #40	@ 0x28
 8003dfa:	18fb      	adds	r3, r7, r3
 8003dfc:	781c      	ldrb	r4, [r3, #0]
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	68b9      	ldr	r1, [r7, #8]
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	0023      	movs	r3, r4
 8003e0a:	f000 f80c 	bl	8003e26 <prvInitialiseNewQueue>
 8003e0e:	e005      	b.n	8003e1c <xQueueGenericCreateStatic+0x84>
        }
        else
        {
            configASSERT( pxNewQueue );
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d102      	bne.n	8003e1c <xQueueGenericCreateStatic+0x84>
 8003e16:	b672      	cpsid	i
 8003e18:	46c0      	nop			@ (mov r8, r8)
 8003e1a:	e7fd      	b.n	8003e18 <xQueueGenericCreateStatic+0x80>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003e1c:	697b      	ldr	r3, [r7, #20]
    }
 8003e1e:	0018      	movs	r0, r3
 8003e20:	46bd      	mov	sp, r7
 8003e22:	b007      	add	sp, #28
 8003e24:	bd90      	pop	{r4, r7, pc}

08003e26 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b084      	sub	sp, #16
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	60f8      	str	r0, [r7, #12]
 8003e2e:	60b9      	str	r1, [r7, #8]
 8003e30:	607a      	str	r2, [r7, #4]
 8003e32:	001a      	movs	r2, r3
 8003e34:	1cfb      	adds	r3, r7, #3
 8003e36:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d103      	bne.n	8003e46 <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	e002      	b.n	8003e4c <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	f7ff ff10 	bl	8003c82 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	1cfa      	adds	r2, r7, #3
 8003e66:	214c      	movs	r1, #76	@ 0x4c
 8003e68:	7812      	ldrb	r2, [r2, #0]
 8003e6a:	545a      	strb	r2, [r3, r1]
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003e6c:	46c0      	nop			@ (mov r8, r8)
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	b004      	add	sp, #16
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
    {
 8003e74:	b590      	push	{r4, r7, lr}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	60bb      	str	r3, [r7, #8]

        configASSERT( pxMutex );
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d102      	bne.n	8003e8c <xQueueGiveMutexRecursive+0x18>
 8003e86:	b672      	cpsid	i
 8003e88:	46c0      	nop			@ (mov r8, r8)
 8003e8a:	e7fd      	b.n	8003e88 <xQueueGiveMutexRecursive+0x14>
         * change outside of this task.  If this task does not hold the mutex then
         * pxMutexHolder can never coincidentally equal the tasks handle, and as
         * this is the only condition we are interested in it does not matter if
         * pxMutexHolder is accessed simultaneously by another task.  Therefore no
         * mutual exclusion is required to test the pxMutexHolder variable. */
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	689c      	ldr	r4, [r3, #8]
 8003e90:	f001 fb48 	bl	8005524 <xTaskGetCurrentTaskHandle>
 8003e94:	0003      	movs	r3, r0
 8003e96:	429c      	cmp	r4, r3
 8003e98:	d111      	bne.n	8003ebe <xQueueGiveMutexRecursive+0x4a>
            /* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
             * the task handle, therefore no underflow check is required.  Also,
             * uxRecursiveCallCount is only modified by the mutex holder, and as
             * there can only be one, no mutual exclusion is required to modify the
             * uxRecursiveCallCount member. */
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	1e5a      	subs	r2, r3, #1
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	60da      	str	r2, [r3, #12]

            /* Has the recursive call count unwound to 0? */
            if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d105      	bne.n	8003eb8 <xQueueGiveMutexRecursive+0x44>
            {
                /* Return the mutex.  This will automatically unblock any other
                 * task that might be waiting to access the mutex. */
                ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8003eac:	68b8      	ldr	r0, [r7, #8]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	f000 f83b 	bl	8003f2e <xQueueGenericSend>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            xReturn = pdPASS;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	e001      	b.n	8003ec2 <xQueueGiveMutexRecursive+0x4e>
        }
        else
        {
            /* The mutex cannot be given because the calling task is not the
             * holder. */
            xReturn = pdFAIL;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60fb      	str	r3, [r7, #12]

            traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
        }

        return xReturn;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
    }
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	b005      	add	sp, #20
 8003eca:	bd90      	pop	{r4, r7, pc}

08003ecc <xQueueTakeMutexRecursive>:

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex,
                                         TickType_t xTicksToWait )
    {
 8003ecc:	b590      	push	{r4, r7, lr}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	60bb      	str	r3, [r7, #8]

        configASSERT( pxMutex );
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d102      	bne.n	8003ee6 <xQueueTakeMutexRecursive+0x1a>
 8003ee0:	b672      	cpsid	i
 8003ee2:	46c0      	nop			@ (mov r8, r8)
 8003ee4:	e7fd      	b.n	8003ee2 <xQueueTakeMutexRecursive+0x16>
        /* Comments regarding mutual exclusion as per those within
         * xQueueGiveMutexRecursive(). */

        traceTAKE_MUTEX_RECURSIVE( pxMutex );

        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	689c      	ldr	r4, [r3, #8]
 8003eea:	f001 fb1b 	bl	8005524 <xTaskGetCurrentTaskHandle>
 8003eee:	0003      	movs	r3, r0
 8003ef0:	429c      	cmp	r4, r3
 8003ef2:	d107      	bne.n	8003f04 <xQueueTakeMutexRecursive+0x38>
        {
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	60da      	str	r2, [r3, #12]
            xReturn = pdPASS;
 8003efe:	2301      	movs	r3, #1
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	e00f      	b.n	8003f24 <xQueueTakeMutexRecursive+0x58>
        }
        else
        {
            xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	0011      	movs	r1, r2
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	f000 f98f 	bl	800422e <xQueueSemaphoreTake>
 8003f10:	0003      	movs	r3, r0
 8003f12:	60fb      	str	r3, [r7, #12]

            /* pdPASS will only be returned if the mutex was successfully
             * obtained.  The calling task may have entered the Blocked state
             * before reaching here. */
            if( xReturn != pdFAIL )
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d004      	beq.n	8003f24 <xQueueTakeMutexRecursive+0x58>
            {
                ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	1c5a      	adds	r2, r3, #1
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	60da      	str	r2, [r3, #12]
            {
                traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
            }
        }

        return xReturn;
 8003f24:	68fb      	ldr	r3, [r7, #12]
    }
 8003f26:	0018      	movs	r0, r3
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	b005      	add	sp, #20
 8003f2c:	bd90      	pop	{r4, r7, pc}

08003f2e <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b08a      	sub	sp, #40	@ 0x28
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	60f8      	str	r0, [r7, #12]
 8003f36:	60b9      	str	r1, [r7, #8]
 8003f38:	607a      	str	r2, [r7, #4]
 8003f3a:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 8003f44:	6a3b      	ldr	r3, [r7, #32]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d102      	bne.n	8003f50 <xQueueGenericSend+0x22>
 8003f4a:	b672      	cpsid	i
 8003f4c:	46c0      	nop			@ (mov r8, r8)
 8003f4e:	e7fd      	b.n	8003f4c <xQueueGenericSend+0x1e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d103      	bne.n	8003f5e <xQueueGenericSend+0x30>
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <xQueueGenericSend+0x34>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e000      	b.n	8003f64 <xQueueGenericSend+0x36>
 8003f62:	2300      	movs	r3, #0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d102      	bne.n	8003f6e <xQueueGenericSend+0x40>
 8003f68:	b672      	cpsid	i
 8003f6a:	46c0      	nop			@ (mov r8, r8)
 8003f6c:	e7fd      	b.n	8003f6a <xQueueGenericSend+0x3c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d103      	bne.n	8003f7c <xQueueGenericSend+0x4e>
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d101      	bne.n	8003f80 <xQueueGenericSend+0x52>
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e000      	b.n	8003f82 <xQueueGenericSend+0x54>
 8003f80:	2300      	movs	r3, #0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d102      	bne.n	8003f8c <xQueueGenericSend+0x5e>
 8003f86:	b672      	cpsid	i
 8003f88:	46c0      	nop			@ (mov r8, r8)
 8003f8a:	e7fd      	b.n	8003f88 <xQueueGenericSend+0x5a>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f8c:	f001 fad8 	bl	8005540 <xTaskGetSchedulerState>
 8003f90:	1e03      	subs	r3, r0, #0
 8003f92:	d102      	bne.n	8003f9a <xQueueGenericSend+0x6c>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <xQueueGenericSend+0x70>
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e000      	b.n	8003fa0 <xQueueGenericSend+0x72>
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d102      	bne.n	8003faa <xQueueGenericSend+0x7c>
 8003fa4:	b672      	cpsid	i
 8003fa6:	46c0      	nop			@ (mov r8, r8)
 8003fa8:	e7fd      	b.n	8003fa6 <xQueueGenericSend+0x78>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003faa:	f002 f851 	bl	8006050 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fae:	6a3b      	ldr	r3, [r7, #32]
 8003fb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d302      	bcc.n	8003fc0 <xQueueGenericSend+0x92>
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d11e      	bne.n	8003ffe <xQueueGenericSend+0xd0>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	68b9      	ldr	r1, [r7, #8]
 8003fc4:	6a3b      	ldr	r3, [r7, #32]
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	f000 fa1f 	bl	800440a <prvCopyDataToQueue>
 8003fcc:	0003      	movs	r3, r0
 8003fce:	61fb      	str	r3, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fd0:	6a3b      	ldr	r3, [r7, #32]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d009      	beq.n	8003fec <xQueueGenericSend+0xbe>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fd8:	6a3b      	ldr	r3, [r7, #32]
 8003fda:	3324      	adds	r3, #36	@ 0x24
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f001 f89b 	bl	8005118 <xTaskRemoveFromEventList>
 8003fe2:	1e03      	subs	r3, r0, #0
 8003fe4:	d007      	beq.n	8003ff6 <xQueueGenericSend+0xc8>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003fe6:	f002 f823 	bl	8006030 <vPortYield>
 8003fea:	e004      	b.n	8003ff6 <xQueueGenericSend+0xc8>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <xQueueGenericSend+0xc8>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8003ff2:	f002 f81d 	bl	8006030 <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003ff6:	f002 f83d 	bl	8006074 <vPortExitCritical>
                return pdPASS;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e05b      	b.n	80040b6 <xQueueGenericSend+0x188>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d103      	bne.n	800400c <xQueueGenericSend+0xde>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004004:	f002 f836 	bl	8006074 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8004008:	2300      	movs	r3, #0
 800400a:	e054      	b.n	80040b6 <xQueueGenericSend+0x188>
                }
                else if( xEntryTimeSet == pdFALSE )
 800400c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400e:	2b00      	cmp	r3, #0
 8004010:	d106      	bne.n	8004020 <xQueueGenericSend+0xf2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004012:	2314      	movs	r3, #20
 8004014:	18fb      	adds	r3, r7, r3
 8004016:	0018      	movs	r0, r3
 8004018:	f001 f94a 	bl	80052b0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800401c:	2301      	movs	r3, #1
 800401e:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004020:	f002 f828 	bl	8006074 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004024:	f000 fdb6 	bl	8004b94 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004028:	f002 f812 	bl	8006050 <vPortEnterCritical>
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	2244      	movs	r2, #68	@ 0x44
 8004030:	5c9b      	ldrb	r3, [r3, r2]
 8004032:	b25b      	sxtb	r3, r3
 8004034:	3301      	adds	r3, #1
 8004036:	d103      	bne.n	8004040 <xQueueGenericSend+0x112>
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	2244      	movs	r2, #68	@ 0x44
 800403c:	2100      	movs	r1, #0
 800403e:	5499      	strb	r1, [r3, r2]
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	2245      	movs	r2, #69	@ 0x45
 8004044:	5c9b      	ldrb	r3, [r3, r2]
 8004046:	b25b      	sxtb	r3, r3
 8004048:	3301      	adds	r3, #1
 800404a:	d103      	bne.n	8004054 <xQueueGenericSend+0x126>
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	2245      	movs	r2, #69	@ 0x45
 8004050:	2100      	movs	r1, #0
 8004052:	5499      	strb	r1, [r3, r2]
 8004054:	f002 f80e 	bl	8006074 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004058:	1d3a      	adds	r2, r7, #4
 800405a:	2314      	movs	r3, #20
 800405c:	18fb      	adds	r3, r7, r3
 800405e:	0011      	movs	r1, r2
 8004060:	0018      	movs	r0, r3
 8004062:	f001 f939 	bl	80052d8 <xTaskCheckForTimeOut>
 8004066:	1e03      	subs	r3, r0, #0
 8004068:	d11e      	bne.n	80040a8 <xQueueGenericSend+0x17a>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800406a:	6a3b      	ldr	r3, [r7, #32]
 800406c:	0018      	movs	r0, r3
 800406e:	f000 fad1 	bl	8004614 <prvIsQueueFull>
 8004072:	1e03      	subs	r3, r0, #0
 8004074:	d011      	beq.n	800409a <xQueueGenericSend+0x16c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	3310      	adds	r3, #16
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	0011      	movs	r1, r2
 800407e:	0018      	movs	r0, r3
 8004080:	f000 ffea 	bl	8005058 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	0018      	movs	r0, r3
 8004088:	f000 fa50 	bl	800452c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800408c:	f000 fd8e 	bl	8004bac <xTaskResumeAll>
 8004090:	1e03      	subs	r3, r0, #0
 8004092:	d18a      	bne.n	8003faa <xQueueGenericSend+0x7c>
                {
                    portYIELD_WITHIN_API();
 8004094:	f001 ffcc 	bl	8006030 <vPortYield>
 8004098:	e787      	b.n	8003faa <xQueueGenericSend+0x7c>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	0018      	movs	r0, r3
 800409e:	f000 fa45 	bl	800452c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80040a2:	f000 fd83 	bl	8004bac <xTaskResumeAll>
 80040a6:	e780      	b.n	8003faa <xQueueGenericSend+0x7c>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	0018      	movs	r0, r3
 80040ac:	f000 fa3e 	bl	800452c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80040b0:	f000 fd7c 	bl	8004bac <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80040b4:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80040b6:	0018      	movs	r0, r3
 80040b8:	46bd      	mov	sp, r7
 80040ba:	b00a      	add	sp, #40	@ 0x28
 80040bc:	bd80      	pop	{r7, pc}

080040be <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b08a      	sub	sp, #40	@ 0x28
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	60f8      	str	r0, [r7, #12]
 80040c6:	60b9      	str	r1, [r7, #8]
 80040c8:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80040ca:	2300      	movs	r3, #0
 80040cc:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80040d2:	6a3b      	ldr	r3, [r7, #32]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d102      	bne.n	80040de <xQueueReceive+0x20>
 80040d8:	b672      	cpsid	i
 80040da:	46c0      	nop			@ (mov r8, r8)
 80040dc:	e7fd      	b.n	80040da <xQueueReceive+0x1c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d103      	bne.n	80040ec <xQueueReceive+0x2e>
 80040e4:	6a3b      	ldr	r3, [r7, #32]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <xQueueReceive+0x32>
 80040ec:	2301      	movs	r3, #1
 80040ee:	e000      	b.n	80040f2 <xQueueReceive+0x34>
 80040f0:	2300      	movs	r3, #0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d102      	bne.n	80040fc <xQueueReceive+0x3e>
 80040f6:	b672      	cpsid	i
 80040f8:	46c0      	nop			@ (mov r8, r8)
 80040fa:	e7fd      	b.n	80040f8 <xQueueReceive+0x3a>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040fc:	f001 fa20 	bl	8005540 <xTaskGetSchedulerState>
 8004100:	1e03      	subs	r3, r0, #0
 8004102:	d102      	bne.n	800410a <xQueueReceive+0x4c>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <xQueueReceive+0x50>
 800410a:	2301      	movs	r3, #1
 800410c:	e000      	b.n	8004110 <xQueueReceive+0x52>
 800410e:	2300      	movs	r3, #0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d102      	bne.n	800411a <xQueueReceive+0x5c>
 8004114:	b672      	cpsid	i
 8004116:	46c0      	nop			@ (mov r8, r8)
 8004118:	e7fd      	b.n	8004116 <xQueueReceive+0x58>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800411a:	f001 ff99 	bl	8006050 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004122:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d01a      	beq.n	8004160 <xQueueReceive+0xa2>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	6a3b      	ldr	r3, [r7, #32]
 800412e:	0011      	movs	r1, r2
 8004130:	0018      	movs	r0, r3
 8004132:	f000 f9d5 	bl	80044e0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	1e5a      	subs	r2, r3, #1
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800413e:	6a3b      	ldr	r3, [r7, #32]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d008      	beq.n	8004158 <xQueueReceive+0x9a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	3310      	adds	r3, #16
 800414a:	0018      	movs	r0, r3
 800414c:	f000 ffe4 	bl	8005118 <xTaskRemoveFromEventList>
 8004150:	1e03      	subs	r3, r0, #0
 8004152:	d001      	beq.n	8004158 <xQueueReceive+0x9a>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004154:	f001 ff6c 	bl	8006030 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004158:	f001 ff8c 	bl	8006074 <vPortExitCritical>
                return pdPASS;
 800415c:	2301      	movs	r3, #1
 800415e:	e062      	b.n	8004226 <xQueueReceive+0x168>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d103      	bne.n	800416e <xQueueReceive+0xb0>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004166:	f001 ff85 	bl	8006074 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800416a:	2300      	movs	r3, #0
 800416c:	e05b      	b.n	8004226 <xQueueReceive+0x168>
                }
                else if( xEntryTimeSet == pdFALSE )
 800416e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004170:	2b00      	cmp	r3, #0
 8004172:	d106      	bne.n	8004182 <xQueueReceive+0xc4>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004174:	2314      	movs	r3, #20
 8004176:	18fb      	adds	r3, r7, r3
 8004178:	0018      	movs	r0, r3
 800417a:	f001 f899 	bl	80052b0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800417e:	2301      	movs	r3, #1
 8004180:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004182:	f001 ff77 	bl	8006074 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004186:	f000 fd05 	bl	8004b94 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800418a:	f001 ff61 	bl	8006050 <vPortEnterCritical>
 800418e:	6a3b      	ldr	r3, [r7, #32]
 8004190:	2244      	movs	r2, #68	@ 0x44
 8004192:	5c9b      	ldrb	r3, [r3, r2]
 8004194:	b25b      	sxtb	r3, r3
 8004196:	3301      	adds	r3, #1
 8004198:	d103      	bne.n	80041a2 <xQueueReceive+0xe4>
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	2244      	movs	r2, #68	@ 0x44
 800419e:	2100      	movs	r1, #0
 80041a0:	5499      	strb	r1, [r3, r2]
 80041a2:	6a3b      	ldr	r3, [r7, #32]
 80041a4:	2245      	movs	r2, #69	@ 0x45
 80041a6:	5c9b      	ldrb	r3, [r3, r2]
 80041a8:	b25b      	sxtb	r3, r3
 80041aa:	3301      	adds	r3, #1
 80041ac:	d103      	bne.n	80041b6 <xQueueReceive+0xf8>
 80041ae:	6a3b      	ldr	r3, [r7, #32]
 80041b0:	2245      	movs	r2, #69	@ 0x45
 80041b2:	2100      	movs	r1, #0
 80041b4:	5499      	strb	r1, [r3, r2]
 80041b6:	f001 ff5d 	bl	8006074 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041ba:	1d3a      	adds	r2, r7, #4
 80041bc:	2314      	movs	r3, #20
 80041be:	18fb      	adds	r3, r7, r3
 80041c0:	0011      	movs	r1, r2
 80041c2:	0018      	movs	r0, r3
 80041c4:	f001 f888 	bl	80052d8 <xTaskCheckForTimeOut>
 80041c8:	1e03      	subs	r3, r0, #0
 80041ca:	d11e      	bne.n	800420a <xQueueReceive+0x14c>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041cc:	6a3b      	ldr	r3, [r7, #32]
 80041ce:	0018      	movs	r0, r3
 80041d0:	f000 fa0a 	bl	80045e8 <prvIsQueueEmpty>
 80041d4:	1e03      	subs	r3, r0, #0
 80041d6:	d011      	beq.n	80041fc <xQueueReceive+0x13e>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80041d8:	6a3b      	ldr	r3, [r7, #32]
 80041da:	3324      	adds	r3, #36	@ 0x24
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	0011      	movs	r1, r2
 80041e0:	0018      	movs	r0, r3
 80041e2:	f000 ff39 	bl	8005058 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	0018      	movs	r0, r3
 80041ea:	f000 f99f 	bl	800452c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80041ee:	f000 fcdd 	bl	8004bac <xTaskResumeAll>
 80041f2:	1e03      	subs	r3, r0, #0
 80041f4:	d191      	bne.n	800411a <xQueueReceive+0x5c>
                {
                    portYIELD_WITHIN_API();
 80041f6:	f001 ff1b 	bl	8006030 <vPortYield>
 80041fa:	e78e      	b.n	800411a <xQueueReceive+0x5c>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80041fc:	6a3b      	ldr	r3, [r7, #32]
 80041fe:	0018      	movs	r0, r3
 8004200:	f000 f994 	bl	800452c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004204:	f000 fcd2 	bl	8004bac <xTaskResumeAll>
 8004208:	e787      	b.n	800411a <xQueueReceive+0x5c>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	0018      	movs	r0, r3
 800420e:	f000 f98d 	bl	800452c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004212:	f000 fccb 	bl	8004bac <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004216:	6a3b      	ldr	r3, [r7, #32]
 8004218:	0018      	movs	r0, r3
 800421a:	f000 f9e5 	bl	80045e8 <prvIsQueueEmpty>
 800421e:	1e03      	subs	r3, r0, #0
 8004220:	d100      	bne.n	8004224 <xQueueReceive+0x166>
 8004222:	e77a      	b.n	800411a <xQueueReceive+0x5c>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004224:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004226:	0018      	movs	r0, r3
 8004228:	46bd      	mov	sp, r7
 800422a:	b00a      	add	sp, #40	@ 0x28
 800422c:	bd80      	pop	{r7, pc}

0800422e <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b08a      	sub	sp, #40	@ 0x28
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
 8004236:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004238:	2300      	movs	r3, #0
 800423a:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8004240:	2300      	movs	r3, #0
 8004242:	623b      	str	r3, [r7, #32]
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d102      	bne.n	8004250 <xQueueSemaphoreTake+0x22>
 800424a:	b672      	cpsid	i
 800424c:	46c0      	nop			@ (mov r8, r8)
 800424e:	e7fd      	b.n	800424c <xQueueSemaphoreTake+0x1e>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004254:	2b00      	cmp	r3, #0
 8004256:	d002      	beq.n	800425e <xQueueSemaphoreTake+0x30>
 8004258:	b672      	cpsid	i
 800425a:	46c0      	nop			@ (mov r8, r8)
 800425c:	e7fd      	b.n	800425a <xQueueSemaphoreTake+0x2c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800425e:	f001 f96f 	bl	8005540 <xTaskGetSchedulerState>
 8004262:	1e03      	subs	r3, r0, #0
 8004264:	d102      	bne.n	800426c <xQueueSemaphoreTake+0x3e>
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <xQueueSemaphoreTake+0x42>
 800426c:	2301      	movs	r3, #1
 800426e:	e000      	b.n	8004272 <xQueueSemaphoreTake+0x44>
 8004270:	2300      	movs	r3, #0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d102      	bne.n	800427c <xQueueSemaphoreTake+0x4e>
 8004276:	b672      	cpsid	i
 8004278:	46c0      	nop			@ (mov r8, r8)
 800427a:	e7fd      	b.n	8004278 <xQueueSemaphoreTake+0x4a>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800427c:	f001 fee8 	bl	8006050 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004284:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d01d      	beq.n	80042c8 <xQueueSemaphoreTake+0x9a>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	1e5a      	subs	r2, r3, #1
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d104      	bne.n	80042a6 <xQueueSemaphoreTake+0x78>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800429c:	f001 fb18 	bl	80058d0 <pvTaskIncrementMutexHeldCount>
 80042a0:	0002      	movs	r2, r0
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d008      	beq.n	80042c0 <xQueueSemaphoreTake+0x92>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	3310      	adds	r3, #16
 80042b2:	0018      	movs	r0, r3
 80042b4:	f000 ff30 	bl	8005118 <xTaskRemoveFromEventList>
 80042b8:	1e03      	subs	r3, r0, #0
 80042ba:	d001      	beq.n	80042c0 <xQueueSemaphoreTake+0x92>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80042bc:	f001 feb8 	bl	8006030 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80042c0:	f001 fed8 	bl	8006074 <vPortExitCritical>
                return pdPASS;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e086      	b.n	80043d6 <xQueueSemaphoreTake+0x1a8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d103      	bne.n	80042d6 <xQueueSemaphoreTake+0xa8>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80042ce:	f001 fed1 	bl	8006074 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80042d2:	2300      	movs	r3, #0
 80042d4:	e07f      	b.n	80043d6 <xQueueSemaphoreTake+0x1a8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80042d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d106      	bne.n	80042ea <xQueueSemaphoreTake+0xbc>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80042dc:	230c      	movs	r3, #12
 80042de:	18fb      	adds	r3, r7, r3
 80042e0:	0018      	movs	r0, r3
 80042e2:	f000 ffe5 	bl	80052b0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80042e6:	2301      	movs	r3, #1
 80042e8:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80042ea:	f001 fec3 	bl	8006074 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80042ee:	f000 fc51 	bl	8004b94 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80042f2:	f001 fead 	bl	8006050 <vPortEnterCritical>
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	2244      	movs	r2, #68	@ 0x44
 80042fa:	5c9b      	ldrb	r3, [r3, r2]
 80042fc:	b25b      	sxtb	r3, r3
 80042fe:	3301      	adds	r3, #1
 8004300:	d103      	bne.n	800430a <xQueueSemaphoreTake+0xdc>
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	2244      	movs	r2, #68	@ 0x44
 8004306:	2100      	movs	r1, #0
 8004308:	5499      	strb	r1, [r3, r2]
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	2245      	movs	r2, #69	@ 0x45
 800430e:	5c9b      	ldrb	r3, [r3, r2]
 8004310:	b25b      	sxtb	r3, r3
 8004312:	3301      	adds	r3, #1
 8004314:	d103      	bne.n	800431e <xQueueSemaphoreTake+0xf0>
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	2245      	movs	r2, #69	@ 0x45
 800431a:	2100      	movs	r1, #0
 800431c:	5499      	strb	r1, [r3, r2]
 800431e:	f001 fea9 	bl	8006074 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004322:	003a      	movs	r2, r7
 8004324:	230c      	movs	r3, #12
 8004326:	18fb      	adds	r3, r7, r3
 8004328:	0011      	movs	r1, r2
 800432a:	0018      	movs	r0, r3
 800432c:	f000 ffd4 	bl	80052d8 <xTaskCheckForTimeOut>
 8004330:	1e03      	subs	r3, r0, #0
 8004332:	d12e      	bne.n	8004392 <xQueueSemaphoreTake+0x164>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	0018      	movs	r0, r3
 8004338:	f000 f956 	bl	80045e8 <prvIsQueueEmpty>
 800433c:	1e03      	subs	r3, r0, #0
 800433e:	d021      	beq.n	8004384 <xQueueSemaphoreTake+0x156>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10a      	bne.n	800435e <xQueueSemaphoreTake+0x130>
                    {
                        taskENTER_CRITICAL();
 8004348:	f001 fe82 	bl	8006050 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	0018      	movs	r0, r3
 8004352:	f001 f911 	bl	8005578 <xTaskPriorityInherit>
 8004356:	0003      	movs	r3, r0
 8004358:	623b      	str	r3, [r7, #32]
                        }
                        taskEXIT_CRITICAL();
 800435a:	f001 fe8b 	bl	8006074 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	3324      	adds	r3, #36	@ 0x24
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	0011      	movs	r1, r2
 8004366:	0018      	movs	r0, r3
 8004368:	f000 fe76 	bl	8005058 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	0018      	movs	r0, r3
 8004370:	f000 f8dc 	bl	800452c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004374:	f000 fc1a 	bl	8004bac <xTaskResumeAll>
 8004378:	1e03      	subs	r3, r0, #0
 800437a:	d000      	beq.n	800437e <xQueueSemaphoreTake+0x150>
 800437c:	e77e      	b.n	800427c <xQueueSemaphoreTake+0x4e>
                {
                    portYIELD_WITHIN_API();
 800437e:	f001 fe57 	bl	8006030 <vPortYield>
 8004382:	e77b      	b.n	800427c <xQueueSemaphoreTake+0x4e>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	0018      	movs	r0, r3
 8004388:	f000 f8d0 	bl	800452c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800438c:	f000 fc0e 	bl	8004bac <xTaskResumeAll>
 8004390:	e774      	b.n	800427c <xQueueSemaphoreTake+0x4e>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	0018      	movs	r0, r3
 8004396:	f000 f8c9 	bl	800452c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800439a:	f000 fc07 	bl	8004bac <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	0018      	movs	r0, r3
 80043a2:	f000 f921 	bl	80045e8 <prvIsQueueEmpty>
 80043a6:	1e03      	subs	r3, r0, #0
 80043a8:	d100      	bne.n	80043ac <xQueueSemaphoreTake+0x17e>
 80043aa:	e767      	b.n	800427c <xQueueSemaphoreTake+0x4e>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d010      	beq.n	80043d4 <xQueueSemaphoreTake+0x1a6>
                    {
                        taskENTER_CRITICAL();
 80043b2:	f001 fe4d 	bl	8006050 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	0018      	movs	r0, r3
 80043ba:	f000 f810 	bl	80043de <prvGetDisinheritPriorityAfterTimeout>
 80043be:	0003      	movs	r3, r0
 80043c0:	617b      	str	r3, [r7, #20]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	0011      	movs	r1, r2
 80043ca:	0018      	movs	r0, r3
 80043cc:	f001 f9e8 	bl	80057a0 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 80043d0:	f001 fe50 	bl	8006074 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80043d4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80043d6:	0018      	movs	r0, r3
 80043d8:	46bd      	mov	sp, r7
 80043da:	b00a      	add	sp, #40	@ 0x28
 80043dc:	bd80      	pop	{r7, pc}

080043de <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80043de:	b580      	push	{r7, lr}
 80043e0:	b084      	sub	sp, #16
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d006      	beq.n	80043fc <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2238      	movs	r2, #56	@ 0x38
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	60fb      	str	r3, [r7, #12]
 80043fa:	e001      	b.n	8004400 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80043fc:	2300      	movs	r3, #0
 80043fe:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8004400:	68fb      	ldr	r3, [r7, #12]
    }
 8004402:	0018      	movs	r0, r3
 8004404:	46bd      	mov	sp, r7
 8004406:	b004      	add	sp, #16
 8004408:	bd80      	pop	{r7, pc}

0800440a <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b086      	sub	sp, #24
 800440e:	af00      	add	r7, sp, #0
 8004410:	60f8      	str	r0, [r7, #12]
 8004412:	60b9      	str	r1, [r7, #8]
 8004414:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8004416:	2300      	movs	r3, #0
 8004418:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800441e:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10e      	bne.n	8004446 <prvCopyDataToQueue+0x3c>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d14e      	bne.n	80044ce <prvCopyDataToQueue+0xc4>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	0018      	movs	r0, r3
 8004436:	f001 f92f 	bl	8005698 <xTaskPriorityDisinherit>
 800443a:	0003      	movs	r3, r0
 800443c:	617b      	str	r3, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	609a      	str	r2, [r3, #8]
 8004444:	e043      	b.n	80044ce <prvCopyDataToQueue+0xc4>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d119      	bne.n	8004480 <prvCopyDataToQueue+0x76>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6858      	ldr	r0, [r3, #4]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	0019      	movs	r1, r3
 8004458:	f002 f870 	bl	800653c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004464:	18d2      	adds	r2, r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	429a      	cmp	r2, r3
 8004474:	d32b      	bcc.n	80044ce <prvCopyDataToQueue+0xc4>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	605a      	str	r2, [r3, #4]
 800447e:	e026      	b.n	80044ce <prvCopyDataToQueue+0xc4>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	68d8      	ldr	r0, [r3, #12]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	0019      	movs	r1, r3
 800448c:	f002 f856 	bl	800653c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	68da      	ldr	r2, [r3, #12]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004498:	425b      	negs	r3, r3
 800449a:	18d2      	adds	r2, r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	68da      	ldr	r2, [r3, #12]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d207      	bcs.n	80044bc <prvCopyDataToQueue+0xb2>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b4:	425b      	negs	r3, r3
 80044b6:	18d2      	adds	r2, r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d105      	bne.n	80044ce <prvCopyDataToQueue+0xc4>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d002      	beq.n	80044ce <prvCopyDataToQueue+0xc4>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	3b01      	subs	r3, #1
 80044cc:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1c5a      	adds	r2, r3, #1
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80044d6:	697b      	ldr	r3, [r7, #20]
}
 80044d8:	0018      	movs	r0, r3
 80044da:	46bd      	mov	sp, r7
 80044dc:	b006      	add	sp, #24
 80044de:	bd80      	pop	{r7, pc}

080044e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d018      	beq.n	8004524 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68da      	ldr	r2, [r3, #12]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fa:	18d2      	adds	r2, r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68da      	ldr	r2, [r3, #12]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	429a      	cmp	r2, r3
 800450a:	d303      	bcc.n	8004514 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68d9      	ldr	r1, [r3, #12]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	0018      	movs	r0, r3
 8004520:	f002 f80c 	bl	800653c <memcpy>
    }
}
 8004524:	46c0      	nop			@ (mov r8, r8)
 8004526:	46bd      	mov	sp, r7
 8004528:	b002      	add	sp, #8
 800452a:	bd80      	pop	{r7, pc}

0800452c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004534:	f001 fd8c 	bl	8006050 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004538:	230f      	movs	r3, #15
 800453a:	18fb      	adds	r3, r7, r3
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	2145      	movs	r1, #69	@ 0x45
 8004540:	5c52      	ldrb	r2, [r2, r1]
 8004542:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004544:	e013      	b.n	800456e <prvUnlockQueue+0x42>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454a:	2b00      	cmp	r3, #0
 800454c:	d016      	beq.n	800457c <prvUnlockQueue+0x50>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	3324      	adds	r3, #36	@ 0x24
 8004552:	0018      	movs	r0, r3
 8004554:	f000 fde0 	bl	8005118 <xTaskRemoveFromEventList>
 8004558:	1e03      	subs	r3, r0, #0
 800455a:	d001      	beq.n	8004560 <prvUnlockQueue+0x34>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800455c:	f000 ff12 	bl	8005384 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004560:	210f      	movs	r1, #15
 8004562:	187b      	adds	r3, r7, r1
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	3b01      	subs	r3, #1
 8004568:	b2da      	uxtb	r2, r3
 800456a:	187b      	adds	r3, r7, r1
 800456c:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800456e:	230f      	movs	r3, #15
 8004570:	18fb      	adds	r3, r7, r3
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	b25b      	sxtb	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	dce5      	bgt.n	8004546 <prvUnlockQueue+0x1a>
 800457a:	e000      	b.n	800457e <prvUnlockQueue+0x52>
                    break;
 800457c:	46c0      	nop			@ (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2245      	movs	r2, #69	@ 0x45
 8004582:	21ff      	movs	r1, #255	@ 0xff
 8004584:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8004586:	f001 fd75 	bl	8006074 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800458a:	f001 fd61 	bl	8006050 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800458e:	230e      	movs	r3, #14
 8004590:	18fb      	adds	r3, r7, r3
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	2144      	movs	r1, #68	@ 0x44
 8004596:	5c52      	ldrb	r2, [r2, r1]
 8004598:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800459a:	e013      	b.n	80045c4 <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d016      	beq.n	80045d2 <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	3310      	adds	r3, #16
 80045a8:	0018      	movs	r0, r3
 80045aa:	f000 fdb5 	bl	8005118 <xTaskRemoveFromEventList>
 80045ae:	1e03      	subs	r3, r0, #0
 80045b0:	d001      	beq.n	80045b6 <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 80045b2:	f000 fee7 	bl	8005384 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80045b6:	210e      	movs	r1, #14
 80045b8:	187b      	adds	r3, r7, r1
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	3b01      	subs	r3, #1
 80045be:	b2da      	uxtb	r2, r3
 80045c0:	187b      	adds	r3, r7, r1
 80045c2:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80045c4:	230e      	movs	r3, #14
 80045c6:	18fb      	adds	r3, r7, r3
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	b25b      	sxtb	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	dce5      	bgt.n	800459c <prvUnlockQueue+0x70>
 80045d0:	e000      	b.n	80045d4 <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 80045d2:	46c0      	nop			@ (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2244      	movs	r2, #68	@ 0x44
 80045d8:	21ff      	movs	r1, #255	@ 0xff
 80045da:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 80045dc:	f001 fd4a 	bl	8006074 <vPortExitCritical>
}
 80045e0:	46c0      	nop			@ (mov r8, r8)
 80045e2:	46bd      	mov	sp, r7
 80045e4:	b004      	add	sp, #16
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80045f0:	f001 fd2e 	bl	8006050 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d102      	bne.n	8004602 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80045fc:	2301      	movs	r3, #1
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	e001      	b.n	8004606 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8004602:	2300      	movs	r3, #0
 8004604:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004606:	f001 fd35 	bl	8006074 <vPortExitCritical>

    return xReturn;
 800460a:	68fb      	ldr	r3, [r7, #12]
}
 800460c:	0018      	movs	r0, r3
 800460e:	46bd      	mov	sp, r7
 8004610:	b004      	add	sp, #16
 8004612:	bd80      	pop	{r7, pc}

08004614 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800461c:	f001 fd18 	bl	8006050 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004628:	429a      	cmp	r2, r3
 800462a:	d102      	bne.n	8004632 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800462c:	2301      	movs	r3, #1
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	e001      	b.n	8004636 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8004632:	2300      	movs	r3, #0
 8004634:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004636:	f001 fd1d 	bl	8006074 <vPortExitCritical>

    return xReturn;
 800463a:	68fb      	ldr	r3, [r7, #12]
}
 800463c:	0018      	movs	r0, r3
 800463e:	46bd      	mov	sp, r7
 8004640:	b004      	add	sp, #16
 8004642:	bd80      	pop	{r7, pc}

08004644 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800464e:	2300      	movs	r3, #0
 8004650:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d102      	bne.n	800465e <vQueueAddToRegistry+0x1a>
 8004658:	b672      	cpsid	i
 800465a:	46c0      	nop			@ (mov r8, r8)
 800465c:	e7fd      	b.n	800465a <vQueueAddToRegistry+0x16>

        if( pcQueueName != NULL )
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d025      	beq.n	80046b0 <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004664:	2300      	movs	r3, #0
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	e01f      	b.n	80046aa <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800466a:	4a18      	ldr	r2, [pc, #96]	@ (80046cc <vQueueAddToRegistry+0x88>)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	18d3      	adds	r3, r2, r3
 8004672:	3304      	adds	r3, #4
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	429a      	cmp	r2, r3
 800467a:	d105      	bne.n	8004688 <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	00da      	lsls	r2, r3, #3
 8004680:	4b12      	ldr	r3, [pc, #72]	@ (80046cc <vQueueAddToRegistry+0x88>)
 8004682:	18d3      	adds	r3, r2, r3
 8004684:	60bb      	str	r3, [r7, #8]
                    break;
 8004686:	e013      	b.n	80046b0 <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10a      	bne.n	80046a4 <vQueueAddToRegistry+0x60>
 800468e:	4b0f      	ldr	r3, [pc, #60]	@ (80046cc <vQueueAddToRegistry+0x88>)
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	00d2      	lsls	r2, r2, #3
 8004694:	58d3      	ldr	r3, [r2, r3]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d104      	bne.n	80046a4 <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	00da      	lsls	r2, r3, #3
 800469e:	4b0b      	ldr	r3, [pc, #44]	@ (80046cc <vQueueAddToRegistry+0x88>)
 80046a0:	18d3      	adds	r3, r2, r3
 80046a2:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	3301      	adds	r3, #1
 80046a8:	60fb      	str	r3, [r7, #12]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2b07      	cmp	r3, #7
 80046ae:	d9dc      	bls.n	800466a <vQueueAddToRegistry+0x26>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d005      	beq.n	80046c2 <vQueueAddToRegistry+0x7e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80046c2:	46c0      	nop			@ (mov r8, r8)
 80046c4:	46bd      	mov	sp, r7
 80046c6:	b004      	add	sp, #16
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	46c0      	nop			@ (mov r8, r8)
 80046cc:	20000674 	.word	0x20000674

080046d0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80046e0:	f001 fcb6 	bl	8006050 <vPortEnterCritical>
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	2244      	movs	r2, #68	@ 0x44
 80046e8:	5c9b      	ldrb	r3, [r3, r2]
 80046ea:	b25b      	sxtb	r3, r3
 80046ec:	3301      	adds	r3, #1
 80046ee:	d103      	bne.n	80046f8 <vQueueWaitForMessageRestricted+0x28>
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	2244      	movs	r2, #68	@ 0x44
 80046f4:	2100      	movs	r1, #0
 80046f6:	5499      	strb	r1, [r3, r2]
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	2245      	movs	r2, #69	@ 0x45
 80046fc:	5c9b      	ldrb	r3, [r3, r2]
 80046fe:	b25b      	sxtb	r3, r3
 8004700:	3301      	adds	r3, #1
 8004702:	d103      	bne.n	800470c <vQueueWaitForMessageRestricted+0x3c>
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	2245      	movs	r2, #69	@ 0x45
 8004708:	2100      	movs	r1, #0
 800470a:	5499      	strb	r1, [r3, r2]
 800470c:	f001 fcb2 	bl	8006074 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004714:	2b00      	cmp	r3, #0
 8004716:	d106      	bne.n	8004726 <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	3324      	adds	r3, #36	@ 0x24
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	68b9      	ldr	r1, [r7, #8]
 8004720:	0018      	movs	r0, r3
 8004722:	f000 fcb9 	bl	8005098 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	0018      	movs	r0, r3
 800472a:	f7ff feff 	bl	800452c <prvUnlockQueue>
    }
 800472e:	46c0      	nop			@ (mov r8, r8)
 8004730:	46bd      	mov	sp, r7
 8004732:	b006      	add	sp, #24
 8004734:	bd80      	pop	{r7, pc}

08004736 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8004736:	b590      	push	{r4, r7, lr}
 8004738:	b08d      	sub	sp, #52	@ 0x34
 800473a:	af04      	add	r7, sp, #16
 800473c:	60f8      	str	r0, [r7, #12]
 800473e:	60b9      	str	r1, [r7, #8]
 8004740:	607a      	str	r2, [r7, #4]
 8004742:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 8004744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004746:	2b00      	cmp	r3, #0
 8004748:	d102      	bne.n	8004750 <xTaskCreateStatic+0x1a>
 800474a:	b672      	cpsid	i
 800474c:	46c0      	nop			@ (mov r8, r8)
 800474e:	e7fd      	b.n	800474c <xTaskCreateStatic+0x16>
        configASSERT( pxTaskBuffer != NULL );
 8004750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004752:	2b00      	cmp	r3, #0
 8004754:	d102      	bne.n	800475c <xTaskCreateStatic+0x26>
 8004756:	b672      	cpsid	i
 8004758:	46c0      	nop			@ (mov r8, r8)
 800475a:	e7fd      	b.n	8004758 <xTaskCreateStatic+0x22>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 800475c:	235c      	movs	r3, #92	@ 0x5c
 800475e:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	2b5c      	cmp	r3, #92	@ 0x5c
 8004764:	d002      	beq.n	800476c <xTaskCreateStatic+0x36>
 8004766:	b672      	cpsid	i
 8004768:	46c0      	nop			@ (mov r8, r8)
 800476a:	e7fd      	b.n	8004768 <xTaskCreateStatic+0x32>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800476c:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800476e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004770:	2b00      	cmp	r3, #0
 8004772:	d026      	beq.n	80047c2 <xTaskCreateStatic+0x8c>
 8004774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004776:	2b00      	cmp	r3, #0
 8004778:	d023      	beq.n	80047c2 <xTaskCreateStatic+0x8c>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800477a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800477c:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	225c      	movs	r2, #92	@ 0x5c
 8004782:	2100      	movs	r1, #0
 8004784:	0018      	movs	r0, r3
 8004786:	f001 fead 	bl	80064e4 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800478e:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	2259      	movs	r2, #89	@ 0x59
 8004794:	2102      	movs	r1, #2
 8004796:	5499      	strb	r1, [r3, r2]
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004798:	683c      	ldr	r4, [r7, #0]
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	68b9      	ldr	r1, [r7, #8]
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	2300      	movs	r3, #0
 80047a2:	9303      	str	r3, [sp, #12]
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	9302      	str	r3, [sp, #8]
 80047a8:	2318      	movs	r3, #24
 80047aa:	18fb      	adds	r3, r7, r3
 80047ac:	9301      	str	r3, [sp, #4]
 80047ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	0023      	movs	r3, r4
 80047b4:	f000 f85e 	bl	8004874 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	0018      	movs	r0, r3
 80047bc:	f000 f8dc 	bl	8004978 <prvAddNewTaskToReadyList>
 80047c0:	e001      	b.n	80047c6 <xTaskCreateStatic+0x90>
        }
        else
        {
            xReturn = NULL;
 80047c2:	2300      	movs	r3, #0
 80047c4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80047c6:	69bb      	ldr	r3, [r7, #24]
    }
 80047c8:	0018      	movs	r0, r3
 80047ca:	46bd      	mov	sp, r7
 80047cc:	b009      	add	sp, #36	@ 0x24
 80047ce:	bd90      	pop	{r4, r7, pc}

080047d0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80047d0:	b590      	push	{r4, r7, lr}
 80047d2:	b08d      	sub	sp, #52	@ 0x34
 80047d4:	af04      	add	r7, sp, #16
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	603b      	str	r3, [r7, #0]
 80047dc:	1dbb      	adds	r3, r7, #6
 80047de:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80047e0:	1dbb      	adds	r3, r7, #6
 80047e2:	881b      	ldrh	r3, [r3, #0]
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	0018      	movs	r0, r3
 80047e8:	f001 fcca 	bl	8006180 <pvPortMalloc>
 80047ec:	0003      	movs	r3, r0
 80047ee:	617b      	str	r3, [r7, #20]

            if( pxStack != NULL )
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d016      	beq.n	8004824 <xTaskCreate+0x54>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80047f6:	205c      	movs	r0, #92	@ 0x5c
 80047f8:	f001 fcc2 	bl	8006180 <pvPortMalloc>
 80047fc:	0003      	movs	r3, r0
 80047fe:	61fb      	str	r3, [r7, #28]

                if( pxNewTCB != NULL )
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d009      	beq.n	800481a <xTaskCreate+0x4a>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	225c      	movs	r2, #92	@ 0x5c
 800480a:	2100      	movs	r1, #0
 800480c:	0018      	movs	r0, r3
 800480e:	f001 fe69 	bl	80064e4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	631a      	str	r2, [r3, #48]	@ 0x30
 8004818:	e006      	b.n	8004828 <xTaskCreate+0x58>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	0018      	movs	r0, r3
 800481e:	f001 fd67 	bl	80062f0 <vPortFree>
 8004822:	e001      	b.n	8004828 <xTaskCreate+0x58>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8004824:	2300      	movs	r3, #0
 8004826:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d01a      	beq.n	8004864 <xTaskCreate+0x94>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	2259      	movs	r2, #89	@ 0x59
 8004832:	2100      	movs	r1, #0
 8004834:	5499      	strb	r1, [r3, r2]
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004836:	1dbb      	adds	r3, r7, #6
 8004838:	881a      	ldrh	r2, [r3, #0]
 800483a:	683c      	ldr	r4, [r7, #0]
 800483c:	68b9      	ldr	r1, [r7, #8]
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	2300      	movs	r3, #0
 8004842:	9303      	str	r3, [sp, #12]
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	9302      	str	r3, [sp, #8]
 8004848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800484a:	9301      	str	r3, [sp, #4]
 800484c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	0023      	movs	r3, r4
 8004852:	f000 f80f 	bl	8004874 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	0018      	movs	r0, r3
 800485a:	f000 f88d 	bl	8004978 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800485e:	2301      	movs	r3, #1
 8004860:	61bb      	str	r3, [r7, #24]
 8004862:	e002      	b.n	800486a <xTaskCreate+0x9a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004864:	2301      	movs	r3, #1
 8004866:	425b      	negs	r3, r3
 8004868:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800486a:	69bb      	ldr	r3, [r7, #24]
    }
 800486c:	0018      	movs	r0, r3
 800486e:	46bd      	mov	sp, r7
 8004870:	b009      	add	sp, #36	@ 0x24
 8004872:	bd90      	pop	{r4, r7, pc}

08004874 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
 8004880:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004884:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	001a      	movs	r2, r3
 800488c:	21a5      	movs	r1, #165	@ 0xa5
 800488e:	f001 fe29 	bl	80064e4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004894:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4936      	ldr	r1, [pc, #216]	@ (8004974 <prvInitialiseNewTask+0x100>)
 800489a:	468c      	mov	ip, r1
 800489c:	4463      	add	r3, ip
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	18d3      	adds	r3, r2, r3
 80048a2:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	2207      	movs	r2, #7
 80048a8:	4393      	bics	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	2207      	movs	r2, #7
 80048b0:	4013      	ands	r3, r2
 80048b2:	d002      	beq.n	80048ba <prvInitialiseNewTask+0x46>
 80048b4:	b672      	cpsid	i
 80048b6:	46c0      	nop			@ (mov r8, r8)
 80048b8:	e7fd      	b.n	80048b6 <prvInitialiseNewTask+0x42>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d01f      	beq.n	8004900 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048c0:	2300      	movs	r3, #0
 80048c2:	617b      	str	r3, [r7, #20]
 80048c4:	e013      	b.n	80048ee <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	18d3      	adds	r3, r2, r3
 80048cc:	7818      	ldrb	r0, [r3, #0]
 80048ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048d0:	2134      	movs	r1, #52	@ 0x34
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	18d3      	adds	r3, r2, r3
 80048d6:	185b      	adds	r3, r3, r1
 80048d8:	1c02      	adds	r2, r0, #0
 80048da:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	18d3      	adds	r3, r2, r3
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d006      	beq.n	80048f6 <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	3301      	adds	r3, #1
 80048ec:	617b      	str	r3, [r7, #20]
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	2b0f      	cmp	r3, #15
 80048f2:	d9e8      	bls.n	80048c6 <prvInitialiseNewTask+0x52>
 80048f4:	e000      	b.n	80048f8 <prvInitialiseNewTask+0x84>
            {
                break;
 80048f6:	46c0      	nop			@ (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80048f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048fa:	2243      	movs	r2, #67	@ 0x43
 80048fc:	2100      	movs	r1, #0
 80048fe:	5499      	strb	r1, [r3, r2]
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	2b37      	cmp	r3, #55	@ 0x37
 8004904:	d902      	bls.n	800490c <prvInitialiseNewTask+0x98>
 8004906:	b672      	cpsid	i
 8004908:	46c0      	nop			@ (mov r8, r8)
 800490a:	e7fd      	b.n	8004908 <prvInitialiseNewTask+0x94>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800490c:	6a3b      	ldr	r3, [r7, #32]
 800490e:	2b37      	cmp	r3, #55	@ 0x37
 8004910:	d901      	bls.n	8004916 <prvInitialiseNewTask+0xa2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004912:	2337      	movs	r3, #55	@ 0x37
 8004914:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004918:	6a3a      	ldr	r2, [r7, #32]
 800491a:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800491c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800491e:	6a3a      	ldr	r2, [r7, #32]
 8004920:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004924:	3304      	adds	r3, #4
 8004926:	0018      	movs	r0, r3
 8004928:	f7ff f942 	bl	8003bb0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800492c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800492e:	3318      	adds	r3, #24
 8004930:	0018      	movs	r0, r3
 8004932:	f7ff f93d 	bl	8003bb0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004938:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800493a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800493c:	6a3b      	ldr	r3, [r7, #32]
 800493e:	2238      	movs	r2, #56	@ 0x38
 8004940:	1ad2      	subs	r2, r2, r3
 8004942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004944:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004948:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800494a:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	68f9      	ldr	r1, [r7, #12]
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	0018      	movs	r0, r3
 8004954:	f001 fae2 	bl	8005f1c <pxPortInitialiseStack>
 8004958:	0002      	movs	r2, r0
 800495a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800495c:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800495e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004960:	2b00      	cmp	r3, #0
 8004962:	d002      	beq.n	800496a <prvInitialiseNewTask+0xf6>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004966:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004968:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800496a:	46c0      	nop			@ (mov r8, r8)
 800496c:	46bd      	mov	sp, r7
 800496e:	b006      	add	sp, #24
 8004970:	bd80      	pop	{r7, pc}
 8004972:	46c0      	nop			@ (mov r8, r8)
 8004974:	3fffffff 	.word	0x3fffffff

08004978 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004980:	f001 fb66 	bl	8006050 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004984:	4b3d      	ldr	r3, [pc, #244]	@ (8004a7c <prvAddNewTaskToReadyList+0x104>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	1c5a      	adds	r2, r3, #1
 800498a:	4b3c      	ldr	r3, [pc, #240]	@ (8004a7c <prvAddNewTaskToReadyList+0x104>)
 800498c:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 800498e:	4b3c      	ldr	r3, [pc, #240]	@ (8004a80 <prvAddNewTaskToReadyList+0x108>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d109      	bne.n	80049aa <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004996:	4b3a      	ldr	r3, [pc, #232]	@ (8004a80 <prvAddNewTaskToReadyList+0x108>)
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800499c:	4b37      	ldr	r3, [pc, #220]	@ (8004a7c <prvAddNewTaskToReadyList+0x104>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d110      	bne.n	80049c6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80049a4:	f000 fd08 	bl	80053b8 <prvInitialiseTaskLists>
 80049a8:	e00d      	b.n	80049c6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80049aa:	4b36      	ldr	r3, [pc, #216]	@ (8004a84 <prvAddNewTaskToReadyList+0x10c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d109      	bne.n	80049c6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80049b2:	4b33      	ldr	r3, [pc, #204]	@ (8004a80 <prvAddNewTaskToReadyList+0x108>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049bc:	429a      	cmp	r2, r3
 80049be:	d802      	bhi.n	80049c6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80049c0:	4b2f      	ldr	r3, [pc, #188]	@ (8004a80 <prvAddNewTaskToReadyList+0x108>)
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80049c6:	4b30      	ldr	r3, [pc, #192]	@ (8004a88 <prvAddNewTaskToReadyList+0x110>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	1c5a      	adds	r2, r3, #1
 80049cc:	4b2e      	ldr	r3, [pc, #184]	@ (8004a88 <prvAddNewTaskToReadyList+0x110>)
 80049ce:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80049d0:	4b2d      	ldr	r3, [pc, #180]	@ (8004a88 <prvAddNewTaskToReadyList+0x110>)
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049dc:	4b2b      	ldr	r3, [pc, #172]	@ (8004a8c <prvAddNewTaskToReadyList+0x114>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d903      	bls.n	80049ec <prvAddNewTaskToReadyList+0x74>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049e8:	4b28      	ldr	r3, [pc, #160]	@ (8004a8c <prvAddNewTaskToReadyList+0x114>)
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049f0:	4927      	ldr	r1, [pc, #156]	@ (8004a90 <prvAddNewTaskToReadyList+0x118>)
 80049f2:	0013      	movs	r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	189b      	adds	r3, r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	18cb      	adds	r3, r1, r3
 80049fc:	3304      	adds	r3, #4
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	60fb      	str	r3, [r7, #12]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	609a      	str	r2, [r3, #8]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	60da      	str	r2, [r3, #12]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	3204      	adds	r2, #4
 8004a18:	605a      	str	r2, [r3, #4]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	1d1a      	adds	r2, r3, #4
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	609a      	str	r2, [r3, #8]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a26:	0013      	movs	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	189b      	adds	r3, r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4a18      	ldr	r2, [pc, #96]	@ (8004a90 <prvAddNewTaskToReadyList+0x118>)
 8004a30:	189a      	adds	r2, r3, r2
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	615a      	str	r2, [r3, #20]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a3a:	4915      	ldr	r1, [pc, #84]	@ (8004a90 <prvAddNewTaskToReadyList+0x118>)
 8004a3c:	0013      	movs	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	189b      	adds	r3, r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	585b      	ldr	r3, [r3, r1]
 8004a46:	1c58      	adds	r0, r3, #1
 8004a48:	4911      	ldr	r1, [pc, #68]	@ (8004a90 <prvAddNewTaskToReadyList+0x118>)
 8004a4a:	0013      	movs	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	189b      	adds	r3, r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	5058      	str	r0, [r3, r1]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004a54:	f001 fb0e 	bl	8006074 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004a58:	4b0a      	ldr	r3, [pc, #40]	@ (8004a84 <prvAddNewTaskToReadyList+0x10c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d008      	beq.n	8004a72 <prvAddNewTaskToReadyList+0xfa>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a60:	4b07      	ldr	r3, [pc, #28]	@ (8004a80 <prvAddNewTaskToReadyList+0x108>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d201      	bcs.n	8004a72 <prvAddNewTaskToReadyList+0xfa>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004a6e:	f001 fadf 	bl	8006030 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004a72:	46c0      	nop			@ (mov r8, r8)
 8004a74:	46bd      	mov	sp, r7
 8004a76:	b004      	add	sp, #16
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	46c0      	nop			@ (mov r8, r8)
 8004a7c:	20000b88 	.word	0x20000b88
 8004a80:	200006b4 	.word	0x200006b4
 8004a84:	20000b94 	.word	0x20000b94
 8004a88:	20000ba4 	.word	0x20000ba4
 8004a8c:	20000b90 	.word	0x20000b90
 8004a90:	200006b8 	.word	0x200006b8

08004a94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d011      	beq.n	8004aca <vTaskDelay+0x36>
        {
            configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
 8004aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8004adc <vTaskDelay+0x48>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <vTaskDelay+0x20>
 8004aae:	b672      	cpsid	i
 8004ab0:	46c0      	nop			@ (mov r8, r8)
 8004ab2:	e7fd      	b.n	8004ab0 <vTaskDelay+0x1c>
            vTaskSuspendAll();
 8004ab4:	f000 f86e 	bl	8004b94 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2100      	movs	r1, #0
 8004abc:	0018      	movs	r0, r3
 8004abe:	f000 ff19 	bl	80058f4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8004ac2:	f000 f873 	bl	8004bac <xTaskResumeAll>
 8004ac6:	0003      	movs	r3, r0
 8004ac8:	60fb      	str	r3, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <vTaskDelay+0x40>
        {
            portYIELD_WITHIN_API();
 8004ad0:	f001 faae 	bl	8006030 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004ad4:	46c0      	nop			@ (mov r8, r8)
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	b004      	add	sp, #16
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	20000bb0 	.word	0x20000bb0

08004ae0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ae0:	b590      	push	{r4, r7, lr}
 8004ae2:	b089      	sub	sp, #36	@ 0x24
 8004ae4:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 8004aea:	2300      	movs	r3, #0
 8004aec:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004aee:	003a      	movs	r2, r7
 8004af0:	1d39      	adds	r1, r7, #4
 8004af2:	2308      	movs	r3, #8
 8004af4:	18fb      	adds	r3, r7, r3
 8004af6:	0018      	movs	r0, r3
 8004af8:	f7ff f80c 	bl	8003b14 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8004afc:	683c      	ldr	r4, [r7, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	491d      	ldr	r1, [pc, #116]	@ (8004b78 <vTaskStartScheduler+0x98>)
 8004b04:	481d      	ldr	r0, [pc, #116]	@ (8004b7c <vTaskStartScheduler+0x9c>)
 8004b06:	9202      	str	r2, [sp, #8]
 8004b08:	9301      	str	r3, [sp, #4]
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	2300      	movs	r3, #0
 8004b10:	0022      	movs	r2, r4
 8004b12:	f7ff fe10 	bl	8004736 <xTaskCreateStatic>
 8004b16:	0002      	movs	r2, r0
 8004b18:	4b19      	ldr	r3, [pc, #100]	@ (8004b80 <vTaskStartScheduler+0xa0>)
 8004b1a:	601a      	str	r2, [r3, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 8004b1c:	4b18      	ldr	r3, [pc, #96]	@ (8004b80 <vTaskStartScheduler+0xa0>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d002      	beq.n	8004b2a <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 8004b24:	2301      	movs	r3, #1
 8004b26:	60fb      	str	r3, [r7, #12]
 8004b28:	e001      	b.n	8004b2e <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d103      	bne.n	8004b3c <vTaskStartScheduler+0x5c>
        {
            xReturn = xTimerCreateTimerTask();
 8004b34:	f000 ff4c 	bl	80059d0 <xTimerCreateTimerTask>
 8004b38:	0003      	movs	r3, r0
 8004b3a:	60fb      	str	r3, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d10d      	bne.n	8004b5e <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8004b42:	b672      	cpsid	i
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8004b44:	4b0f      	ldr	r3, [pc, #60]	@ (8004b84 <vTaskStartScheduler+0xa4>)
 8004b46:	2201      	movs	r2, #1
 8004b48:	4252      	negs	r2, r2
 8004b4a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8004b88 <vTaskStartScheduler+0xa8>)
 8004b4e:	2201      	movs	r2, #1
 8004b50:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004b52:	4b0e      	ldr	r3, [pc, #56]	@ (8004b8c <vTaskStartScheduler+0xac>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8004b58:	f001 fa46 	bl	8005fe8 <xPortStartScheduler>
 8004b5c:	e005      	b.n	8004b6a <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	3301      	adds	r3, #1
 8004b62:	d102      	bne.n	8004b6a <vTaskStartScheduler+0x8a>
 8004b64:	b672      	cpsid	i
 8004b66:	46c0      	nop			@ (mov r8, r8)
 8004b68:	e7fd      	b.n	8004b66 <vTaskStartScheduler+0x86>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004b6a:	4b09      	ldr	r3, [pc, #36]	@ (8004b90 <vTaskStartScheduler+0xb0>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
}
 8004b6e:	46c0      	nop			@ (mov r8, r8)
 8004b70:	46bd      	mov	sp, r7
 8004b72:	b005      	add	sp, #20
 8004b74:	bd90      	pop	{r4, r7, pc}
 8004b76:	46c0      	nop			@ (mov r8, r8)
 8004b78:	08006584 	.word	0x08006584
 8004b7c:	08005399 	.word	0x08005399
 8004b80:	20000bac 	.word	0x20000bac
 8004b84:	20000ba8 	.word	0x20000ba8
 8004b88:	20000b94 	.word	0x20000b94
 8004b8c:	20000b8c 	.word	0x20000b8c
 8004b90:	08006664 	.word	0x08006664

08004b94 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004b98:	4b03      	ldr	r3, [pc, #12]	@ (8004ba8 <vTaskSuspendAll+0x14>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	1c5a      	adds	r2, r3, #1
 8004b9e:	4b02      	ldr	r3, [pc, #8]	@ (8004ba8 <vTaskSuspendAll+0x14>)
 8004ba0:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004ba2:	46c0      	nop			@ (mov r8, r8)
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	20000bb0 	.word	0x20000bb0

08004bac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8004bba:	4b69      	ldr	r3, [pc, #420]	@ (8004d60 <xTaskResumeAll+0x1b4>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d102      	bne.n	8004bc8 <xTaskResumeAll+0x1c>
 8004bc2:	b672      	cpsid	i
 8004bc4:	46c0      	nop			@ (mov r8, r8)
 8004bc6:	e7fd      	b.n	8004bc4 <xTaskResumeAll+0x18>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004bc8:	f001 fa42 	bl	8006050 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004bcc:	4b64      	ldr	r3, [pc, #400]	@ (8004d60 <xTaskResumeAll+0x1b4>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	1e5a      	subs	r2, r3, #1
 8004bd2:	4b63      	ldr	r3, [pc, #396]	@ (8004d60 <xTaskResumeAll+0x1b4>)
 8004bd4:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004bd6:	4b62      	ldr	r3, [pc, #392]	@ (8004d60 <xTaskResumeAll+0x1b4>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d000      	beq.n	8004be0 <xTaskResumeAll+0x34>
 8004bde:	e0b7      	b.n	8004d50 <xTaskResumeAll+0x1a4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004be0:	4b60      	ldr	r3, [pc, #384]	@ (8004d64 <xTaskResumeAll+0x1b8>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d100      	bne.n	8004bea <xTaskResumeAll+0x3e>
 8004be8:	e0b2      	b.n	8004d50 <xTaskResumeAll+0x1a4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004bea:	e089      	b.n	8004d00 <xTaskResumeAll+0x154>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bec:	4b5e      	ldr	r3, [pc, #376]	@ (8004d68 <xTaskResumeAll+0x1bc>)
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf8:	60bb      	str	r3, [r7, #8]
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	69db      	ldr	r3, [r3, #28]
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	6a12      	ldr	r2, [r2, #32]
 8004c02:	609a      	str	r2, [r3, #8]
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	69d2      	ldr	r2, [r2, #28]
 8004c0c:	605a      	str	r2, [r3, #4]
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	3318      	adds	r3, #24
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d103      	bne.n	8004c22 <xTaskResumeAll+0x76>
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	6a1a      	ldr	r2, [r3, #32]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	605a      	str	r2, [r3, #4]
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	2200      	movs	r2, #0
 8004c26:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	1e5a      	subs	r2, r3, #1
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	607b      	str	r3, [r7, #4]
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	68d2      	ldr	r2, [r2, #12]
 8004c40:	609a      	str	r2, [r3, #8]
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	6892      	ldr	r2, [r2, #8]
 8004c4a:	605a      	str	r2, [r3, #4]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685a      	ldr	r2, [r3, #4]
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	3304      	adds	r3, #4
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d103      	bne.n	8004c60 <xTaskResumeAll+0xb4>
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	68da      	ldr	r2, [r3, #12]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	605a      	str	r2, [r3, #4]
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	2200      	movs	r2, #0
 8004c64:	615a      	str	r2, [r3, #20]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	1e5a      	subs	r2, r3, #1
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c74:	4b3d      	ldr	r3, [pc, #244]	@ (8004d6c <xTaskResumeAll+0x1c0>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d903      	bls.n	8004c84 <xTaskResumeAll+0xd8>
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c80:	4b3a      	ldr	r3, [pc, #232]	@ (8004d6c <xTaskResumeAll+0x1c0>)
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c88:	4939      	ldr	r1, [pc, #228]	@ (8004d70 <xTaskResumeAll+0x1c4>)
 8004c8a:	0013      	movs	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	189b      	adds	r3, r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	18cb      	adds	r3, r1, r3
 8004c94:	3304      	adds	r3, #4
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	603b      	str	r3, [r7, #0]
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	683a      	ldr	r2, [r7, #0]
 8004c9e:	609a      	str	r2, [r3, #8]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	689a      	ldr	r2, [r3, #8]
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	60da      	str	r2, [r3, #12]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	3204      	adds	r2, #4
 8004cb0:	605a      	str	r2, [r3, #4]
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	1d1a      	adds	r2, r3, #4
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	609a      	str	r2, [r3, #8]
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cbe:	0013      	movs	r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	189b      	adds	r3, r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4a2a      	ldr	r2, [pc, #168]	@ (8004d70 <xTaskResumeAll+0x1c4>)
 8004cc8:	189a      	adds	r2, r3, r2
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	615a      	str	r2, [r3, #20]
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cd2:	4927      	ldr	r1, [pc, #156]	@ (8004d70 <xTaskResumeAll+0x1c4>)
 8004cd4:	0013      	movs	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	189b      	adds	r3, r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	585b      	ldr	r3, [r3, r1]
 8004cde:	1c58      	adds	r0, r3, #1
 8004ce0:	4923      	ldr	r1, [pc, #140]	@ (8004d70 <xTaskResumeAll+0x1c4>)
 8004ce2:	0013      	movs	r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	189b      	adds	r3, r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	5058      	str	r0, [r3, r1]

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cf0:	4b20      	ldr	r3, [pc, #128]	@ (8004d74 <xTaskResumeAll+0x1c8>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d902      	bls.n	8004d00 <xTaskResumeAll+0x154>
                    {
                        xYieldPending = pdTRUE;
 8004cfa:	4b1f      	ldr	r3, [pc, #124]	@ (8004d78 <xTaskResumeAll+0x1cc>)
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d00:	4b19      	ldr	r3, [pc, #100]	@ (8004d68 <xTaskResumeAll+0x1bc>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d000      	beq.n	8004d0a <xTaskResumeAll+0x15e>
 8004d08:	e770      	b.n	8004bec <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d001      	beq.n	8004d14 <xTaskResumeAll+0x168>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004d10:	f000 fbee 	bl	80054f0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004d14:	4b19      	ldr	r3, [pc, #100]	@ (8004d7c <xTaskResumeAll+0x1d0>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00f      	beq.n	8004d40 <xTaskResumeAll+0x194>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004d20:	f000 f83c 	bl	8004d9c <xTaskIncrementTick>
 8004d24:	1e03      	subs	r3, r0, #0
 8004d26:	d002      	beq.n	8004d2e <xTaskResumeAll+0x182>
                            {
                                xYieldPending = pdTRUE;
 8004d28:	4b13      	ldr	r3, [pc, #76]	@ (8004d78 <xTaskResumeAll+0x1cc>)
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	3b01      	subs	r3, #1
 8004d32:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1f2      	bne.n	8004d20 <xTaskResumeAll+0x174>

                        xPendedTicks = 0;
 8004d3a:	4b10      	ldr	r3, [pc, #64]	@ (8004d7c <xTaskResumeAll+0x1d0>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004d40:	4b0d      	ldr	r3, [pc, #52]	@ (8004d78 <xTaskResumeAll+0x1cc>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d003      	beq.n	8004d50 <xTaskResumeAll+0x1a4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004d4c:	f001 f970 	bl	8006030 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004d50:	f001 f990 	bl	8006074 <vPortExitCritical>

    return xAlreadyYielded;
 8004d54:	693b      	ldr	r3, [r7, #16]
}
 8004d56:	0018      	movs	r0, r3
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	b006      	add	sp, #24
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	46c0      	nop			@ (mov r8, r8)
 8004d60:	20000bb0 	.word	0x20000bb0
 8004d64:	20000b88 	.word	0x20000b88
 8004d68:	20000b48 	.word	0x20000b48
 8004d6c:	20000b90 	.word	0x20000b90
 8004d70:	200006b8 	.word	0x200006b8
 8004d74:	200006b4 	.word	0x200006b4
 8004d78:	20000b9c 	.word	0x20000b9c
 8004d7c:	20000b98 	.word	0x20000b98

08004d80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004d86:	4b04      	ldr	r3, [pc, #16]	@ (8004d98 <xTaskGetTickCount+0x18>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004d8c:	687b      	ldr	r3, [r7, #4]
}
 8004d8e:	0018      	movs	r0, r3
 8004d90:	46bd      	mov	sp, r7
 8004d92:	b002      	add	sp, #8
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	46c0      	nop			@ (mov r8, r8)
 8004d98:	20000b8c 	.word	0x20000b8c

08004d9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b088      	sub	sp, #32
 8004da0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004da2:	2300      	movs	r3, #0
 8004da4:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004da6:	4b78      	ldr	r3, [pc, #480]	@ (8004f88 <xTaskIncrementTick+0x1ec>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d000      	beq.n	8004db0 <xTaskIncrementTick+0x14>
 8004dae:	e0e1      	b.n	8004f74 <xTaskIncrementTick+0x1d8>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004db0:	4b76      	ldr	r3, [pc, #472]	@ (8004f8c <xTaskIncrementTick+0x1f0>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	3301      	adds	r3, #1
 8004db6:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004db8:	4b74      	ldr	r3, [pc, #464]	@ (8004f8c <xTaskIncrementTick+0x1f0>)
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d118      	bne.n	8004df6 <xTaskIncrementTick+0x5a>
        {
            taskSWITCH_DELAYED_LISTS();
 8004dc4:	4b72      	ldr	r3, [pc, #456]	@ (8004f90 <xTaskIncrementTick+0x1f4>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <xTaskIncrementTick+0x38>
 8004dce:	b672      	cpsid	i
 8004dd0:	46c0      	nop			@ (mov r8, r8)
 8004dd2:	e7fd      	b.n	8004dd0 <xTaskIncrementTick+0x34>
 8004dd4:	4b6e      	ldr	r3, [pc, #440]	@ (8004f90 <xTaskIncrementTick+0x1f4>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	617b      	str	r3, [r7, #20]
 8004dda:	4b6e      	ldr	r3, [pc, #440]	@ (8004f94 <xTaskIncrementTick+0x1f8>)
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	4b6c      	ldr	r3, [pc, #432]	@ (8004f90 <xTaskIncrementTick+0x1f4>)
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	4b6c      	ldr	r3, [pc, #432]	@ (8004f94 <xTaskIncrementTick+0x1f8>)
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	4b6b      	ldr	r3, [pc, #428]	@ (8004f98 <xTaskIncrementTick+0x1fc>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	1c5a      	adds	r2, r3, #1
 8004dee:	4b6a      	ldr	r3, [pc, #424]	@ (8004f98 <xTaskIncrementTick+0x1fc>)
 8004df0:	601a      	str	r2, [r3, #0]
 8004df2:	f000 fb7d 	bl	80054f0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004df6:	4b69      	ldr	r3, [pc, #420]	@ (8004f9c <xTaskIncrementTick+0x200>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d200      	bcs.n	8004e02 <xTaskIncrementTick+0x66>
 8004e00:	e0a4      	b.n	8004f4c <xTaskIncrementTick+0x1b0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e02:	4b63      	ldr	r3, [pc, #396]	@ (8004f90 <xTaskIncrementTick+0x1f4>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d104      	bne.n	8004e16 <xTaskIncrementTick+0x7a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e0c:	4b63      	ldr	r3, [pc, #396]	@ (8004f9c <xTaskIncrementTick+0x200>)
 8004e0e:	2201      	movs	r2, #1
 8004e10:	4252      	negs	r2, r2
 8004e12:	601a      	str	r2, [r3, #0]
                    break;
 8004e14:	e09a      	b.n	8004f4c <xTaskIncrementTick+0x1b0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e16:	4b5e      	ldr	r3, [pc, #376]	@ (8004f90 <xTaskIncrementTick+0x1f4>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8004e26:	69ba      	ldr	r2, [r7, #24]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d203      	bcs.n	8004e36 <xTaskIncrementTick+0x9a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004e2e:	4b5b      	ldr	r3, [pc, #364]	@ (8004f9c <xTaskIncrementTick+0x200>)
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8004e34:	e08a      	b.n	8004f4c <xTaskIncrementTick+0x1b0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	60bb      	str	r3, [r7, #8]
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	68d2      	ldr	r2, [r2, #12]
 8004e44:	609a      	str	r2, [r3, #8]
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	6892      	ldr	r2, [r2, #8]
 8004e4e:	605a      	str	r2, [r3, #4]
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	3304      	adds	r3, #4
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d103      	bne.n	8004e64 <xTaskIncrementTick+0xc8>
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	605a      	str	r2, [r3, #4]
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	2200      	movs	r2, #0
 8004e68:	615a      	str	r2, [r3, #20]
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	1e5a      	subs	r2, r3, #1
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d01e      	beq.n	8004eba <xTaskIncrementTick+0x11e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e80:	607b      	str	r3, [r7, #4]
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	6a12      	ldr	r2, [r2, #32]
 8004e8a:	609a      	str	r2, [r3, #8]
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	69d2      	ldr	r2, [r2, #28]
 8004e94:	605a      	str	r2, [r3, #4]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685a      	ldr	r2, [r3, #4]
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	3318      	adds	r3, #24
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d103      	bne.n	8004eaa <xTaskIncrementTick+0x10e>
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	6a1a      	ldr	r2, [r3, #32]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	605a      	str	r2, [r3, #4]
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	2200      	movs	r2, #0
 8004eae:	629a      	str	r2, [r3, #40]	@ 0x28
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	1e5a      	subs	r2, r3, #1
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ebe:	4b38      	ldr	r3, [pc, #224]	@ (8004fa0 <xTaskIncrementTick+0x204>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d903      	bls.n	8004ece <xTaskIncrementTick+0x132>
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eca:	4b35      	ldr	r3, [pc, #212]	@ (8004fa0 <xTaskIncrementTick+0x204>)
 8004ecc:	601a      	str	r2, [r3, #0]
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ed2:	4934      	ldr	r1, [pc, #208]	@ (8004fa4 <xTaskIncrementTick+0x208>)
 8004ed4:	0013      	movs	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	189b      	adds	r3, r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	18cb      	adds	r3, r1, r3
 8004ede:	3304      	adds	r3, #4
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	603b      	str	r3, [r7, #0]
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	683a      	ldr	r2, [r7, #0]
 8004ee8:	609a      	str	r2, [r3, #8]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	689a      	ldr	r2, [r3, #8]
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	60da      	str	r2, [r3, #12]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	3204      	adds	r2, #4
 8004efa:	605a      	str	r2, [r3, #4]
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	1d1a      	adds	r2, r3, #4
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	609a      	str	r2, [r3, #8]
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f08:	0013      	movs	r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	189b      	adds	r3, r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4a24      	ldr	r2, [pc, #144]	@ (8004fa4 <xTaskIncrementTick+0x208>)
 8004f12:	189a      	adds	r2, r3, r2
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	615a      	str	r2, [r3, #20]
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f1c:	4921      	ldr	r1, [pc, #132]	@ (8004fa4 <xTaskIncrementTick+0x208>)
 8004f1e:	0013      	movs	r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	189b      	adds	r3, r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	585b      	ldr	r3, [r3, r1]
 8004f28:	1c58      	adds	r0, r3, #1
 8004f2a:	491e      	ldr	r1, [pc, #120]	@ (8004fa4 <xTaskIncrementTick+0x208>)
 8004f2c:	0013      	movs	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	189b      	adds	r3, r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	5058      	str	r0, [r3, r1]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f3a:	4b1b      	ldr	r3, [pc, #108]	@ (8004fa8 <xTaskIncrementTick+0x20c>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d800      	bhi.n	8004f46 <xTaskIncrementTick+0x1aa>
 8004f44:	e75d      	b.n	8004e02 <xTaskIncrementTick+0x66>
                        {
                            xSwitchRequired = pdTRUE;
 8004f46:	2301      	movs	r3, #1
 8004f48:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f4a:	e75a      	b.n	8004e02 <xTaskIncrementTick+0x66>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f4c:	4b16      	ldr	r3, [pc, #88]	@ (8004fa8 <xTaskIncrementTick+0x20c>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f52:	4914      	ldr	r1, [pc, #80]	@ (8004fa4 <xTaskIncrementTick+0x208>)
 8004f54:	0013      	movs	r3, r2
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	189b      	adds	r3, r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	585b      	ldr	r3, [r3, r1]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d901      	bls.n	8004f66 <xTaskIncrementTick+0x1ca>
            {
                xSwitchRequired = pdTRUE;
 8004f62:	2301      	movs	r3, #1
 8004f64:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8004f66:	4b11      	ldr	r3, [pc, #68]	@ (8004fac <xTaskIncrementTick+0x210>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d007      	beq.n	8004f7e <xTaskIncrementTick+0x1e2>
            {
                xSwitchRequired = pdTRUE;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	61fb      	str	r3, [r7, #28]
 8004f72:	e004      	b.n	8004f7e <xTaskIncrementTick+0x1e2>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004f74:	4b0e      	ldr	r3, [pc, #56]	@ (8004fb0 <xTaskIncrementTick+0x214>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	1c5a      	adds	r2, r3, #1
 8004f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004fb0 <xTaskIncrementTick+0x214>)
 8004f7c:	601a      	str	r2, [r3, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8004f7e:	69fb      	ldr	r3, [r7, #28]
}
 8004f80:	0018      	movs	r0, r3
 8004f82:	46bd      	mov	sp, r7
 8004f84:	b008      	add	sp, #32
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	20000bb0 	.word	0x20000bb0
 8004f8c:	20000b8c 	.word	0x20000b8c
 8004f90:	20000b40 	.word	0x20000b40
 8004f94:	20000b44 	.word	0x20000b44
 8004f98:	20000ba0 	.word	0x20000ba0
 8004f9c:	20000ba8 	.word	0x20000ba8
 8004fa0:	20000b90 	.word	0x20000b90
 8004fa4:	200006b8 	.word	0x200006b8
 8004fa8:	200006b4 	.word	0x200006b4
 8004fac:	20000b9c 	.word	0x20000b9c
 8004fb0:	20000b98 	.word	0x20000b98

08004fb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8004fba:	4b22      	ldr	r3, [pc, #136]	@ (8005044 <vTaskSwitchContext+0x90>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004fc2:	4b21      	ldr	r3, [pc, #132]	@ (8005048 <vTaskSwitchContext+0x94>)
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8004fc8:	e037      	b.n	800503a <vTaskSwitchContext+0x86>
        xYieldPending = pdFALSE;
 8004fca:	4b1f      	ldr	r3, [pc, #124]	@ (8005048 <vTaskSwitchContext+0x94>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fd0:	4b1e      	ldr	r3, [pc, #120]	@ (800504c <vTaskSwitchContext+0x98>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	607b      	str	r3, [r7, #4]
 8004fd6:	e008      	b.n	8004fea <vTaskSwitchContext+0x36>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d102      	bne.n	8004fe4 <vTaskSwitchContext+0x30>
 8004fde:	b672      	cpsid	i
 8004fe0:	46c0      	nop			@ (mov r8, r8)
 8004fe2:	e7fd      	b.n	8004fe0 <vTaskSwitchContext+0x2c>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	607b      	str	r3, [r7, #4]
 8004fea:	4919      	ldr	r1, [pc, #100]	@ (8005050 <vTaskSwitchContext+0x9c>)
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	0013      	movs	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	189b      	adds	r3, r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	585b      	ldr	r3, [r3, r1]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d0ed      	beq.n	8004fd8 <vTaskSwitchContext+0x24>
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	0013      	movs	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	189b      	adds	r3, r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	4a12      	ldr	r2, [pc, #72]	@ (8005050 <vTaskSwitchContext+0x9c>)
 8005008:	189b      	adds	r3, r3, r2
 800500a:	603b      	str	r3, [r7, #0]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	605a      	str	r2, [r3, #4]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	3308      	adds	r3, #8
 800501e:	429a      	cmp	r2, r3
 8005020:	d103      	bne.n	800502a <vTaskSwitchContext+0x76>
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	68da      	ldr	r2, [r3, #12]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	605a      	str	r2, [r3, #4]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	68da      	ldr	r2, [r3, #12]
 8005030:	4b08      	ldr	r3, [pc, #32]	@ (8005054 <vTaskSwitchContext+0xa0>)
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	4b05      	ldr	r3, [pc, #20]	@ (800504c <vTaskSwitchContext+0x98>)
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	601a      	str	r2, [r3, #0]
}
 800503a:	46c0      	nop			@ (mov r8, r8)
 800503c:	46bd      	mov	sp, r7
 800503e:	b002      	add	sp, #8
 8005040:	bd80      	pop	{r7, pc}
 8005042:	46c0      	nop			@ (mov r8, r8)
 8005044:	20000bb0 	.word	0x20000bb0
 8005048:	20000b9c 	.word	0x20000b9c
 800504c:	20000b90 	.word	0x20000b90
 8005050:	200006b8 	.word	0x200006b8
 8005054:	200006b4 	.word	0x200006b4

08005058 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d102      	bne.n	800506e <vTaskPlaceOnEventList+0x16>
 8005068:	b672      	cpsid	i
 800506a:	46c0      	nop			@ (mov r8, r8)
 800506c:	e7fd      	b.n	800506a <vTaskPlaceOnEventList+0x12>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800506e:	4b09      	ldr	r3, [pc, #36]	@ (8005094 <vTaskPlaceOnEventList+0x3c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	3318      	adds	r3, #24
 8005074:	001a      	movs	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	0011      	movs	r1, r2
 800507a:	0018      	movs	r0, r3
 800507c:	f7fe fda3 	bl	8003bc6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	2101      	movs	r1, #1
 8005084:	0018      	movs	r0, r3
 8005086:	f000 fc35 	bl	80058f4 <prvAddCurrentTaskToDelayedList>
}
 800508a:	46c0      	nop			@ (mov r8, r8)
 800508c:	46bd      	mov	sp, r7
 800508e:	b002      	add	sp, #8
 8005090:	bd80      	pop	{r7, pc}
 8005092:	46c0      	nop			@ (mov r8, r8)
 8005094:	200006b4 	.word	0x200006b4

08005098 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d102      	bne.n	80050b0 <vTaskPlaceOnEventListRestricted+0x18>
 80050aa:	b672      	cpsid	i
 80050ac:	46c0      	nop			@ (mov r8, r8)
 80050ae:	e7fd      	b.n	80050ac <vTaskPlaceOnEventListRestricted+0x14>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	617b      	str	r3, [r7, #20]
 80050b6:	4b17      	ldr	r3, [pc, #92]	@ (8005114 <vTaskPlaceOnEventListRestricted+0x7c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	61da      	str	r2, [r3, #28]
 80050be:	4b15      	ldr	r3, [pc, #84]	@ (8005114 <vTaskPlaceOnEventListRestricted+0x7c>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	6892      	ldr	r2, [r2, #8]
 80050c6:	621a      	str	r2, [r3, #32]
 80050c8:	4b12      	ldr	r3, [pc, #72]	@ (8005114 <vTaskPlaceOnEventListRestricted+0x7c>)
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	3218      	adds	r2, #24
 80050d2:	605a      	str	r2, [r3, #4]
 80050d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005114 <vTaskPlaceOnEventListRestricted+0x7c>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	3318      	adds	r3, #24
 80050da:	001a      	movs	r2, r3
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	609a      	str	r2, [r3, #8]
 80050e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005114 <vTaskPlaceOnEventListRestricted+0x7c>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	1c5a      	adds	r2, r3, #1
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d002      	beq.n	80050fe <vTaskPlaceOnEventListRestricted+0x66>
        {
            xTicksToWait = portMAX_DELAY;
 80050f8:	2301      	movs	r3, #1
 80050fa:	425b      	negs	r3, r3
 80050fc:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	0011      	movs	r1, r2
 8005104:	0018      	movs	r0, r3
 8005106:	f000 fbf5 	bl	80058f4 <prvAddCurrentTaskToDelayedList>
    }
 800510a:	46c0      	nop			@ (mov r8, r8)
 800510c:	46bd      	mov	sp, r7
 800510e:	b006      	add	sp, #24
 8005110:	bd80      	pop	{r7, pc}
 8005112:	46c0      	nop			@ (mov r8, r8)
 8005114:	200006b4 	.word	0x200006b4

08005118 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b088      	sub	sp, #32
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d102      	bne.n	8005134 <xTaskRemoveFromEventList+0x1c>
 800512e:	b672      	cpsid	i
 8005130:	46c0      	nop			@ (mov r8, r8)
 8005132:	e7fd      	b.n	8005130 <xTaskRemoveFromEventList+0x18>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005138:	617b      	str	r3, [r7, #20]
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	6a12      	ldr	r2, [r2, #32]
 8005142:	609a      	str	r2, [r3, #8]
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	69d2      	ldr	r2, [r2, #28]
 800514c:	605a      	str	r2, [r3, #4]
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	685a      	ldr	r2, [r3, #4]
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	3318      	adds	r3, #24
 8005156:	429a      	cmp	r2, r3
 8005158:	d103      	bne.n	8005162 <xTaskRemoveFromEventList+0x4a>
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	6a1a      	ldr	r2, [r3, #32]
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	605a      	str	r2, [r3, #4]
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	2200      	movs	r2, #0
 8005166:	629a      	str	r2, [r3, #40]	@ 0x28
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	1e5a      	subs	r2, r3, #1
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005172:	4b49      	ldr	r3, [pc, #292]	@ (8005298 <xTaskRemoveFromEventList+0x180>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d15d      	bne.n	8005236 <xTaskRemoveFromEventList+0x11e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	68d2      	ldr	r2, [r2, #12]
 8005188:	609a      	str	r2, [r3, #8]
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	6892      	ldr	r2, [r2, #8]
 8005192:	605a      	str	r2, [r3, #4]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	3304      	adds	r3, #4
 800519c:	429a      	cmp	r2, r3
 800519e:	d103      	bne.n	80051a8 <xTaskRemoveFromEventList+0x90>
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	68da      	ldr	r2, [r3, #12]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	605a      	str	r2, [r3, #4]
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	2200      	movs	r2, #0
 80051ac:	615a      	str	r2, [r3, #20]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	1e5a      	subs	r2, r3, #1
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051bc:	4b37      	ldr	r3, [pc, #220]	@ (800529c <xTaskRemoveFromEventList+0x184>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d903      	bls.n	80051cc <xTaskRemoveFromEventList+0xb4>
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051c8:	4b34      	ldr	r3, [pc, #208]	@ (800529c <xTaskRemoveFromEventList+0x184>)
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051d0:	4933      	ldr	r1, [pc, #204]	@ (80052a0 <xTaskRemoveFromEventList+0x188>)
 80051d2:	0013      	movs	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	189b      	adds	r3, r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	18cb      	adds	r3, r1, r3
 80051dc:	3304      	adds	r3, #4
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	60bb      	str	r3, [r7, #8]
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	609a      	str	r2, [r3, #8]
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	689a      	ldr	r2, [r3, #8]
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	60da      	str	r2, [r3, #12]
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	3204      	adds	r2, #4
 80051f8:	605a      	str	r2, [r3, #4]
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	1d1a      	adds	r2, r3, #4
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	609a      	str	r2, [r3, #8]
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005206:	0013      	movs	r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	189b      	adds	r3, r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	4a24      	ldr	r2, [pc, #144]	@ (80052a0 <xTaskRemoveFromEventList+0x188>)
 8005210:	189a      	adds	r2, r3, r2
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	615a      	str	r2, [r3, #20]
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800521a:	4921      	ldr	r1, [pc, #132]	@ (80052a0 <xTaskRemoveFromEventList+0x188>)
 800521c:	0013      	movs	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	189b      	adds	r3, r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	585b      	ldr	r3, [r3, r1]
 8005226:	1c58      	adds	r0, r3, #1
 8005228:	491d      	ldr	r1, [pc, #116]	@ (80052a0 <xTaskRemoveFromEventList+0x188>)
 800522a:	0013      	movs	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	189b      	adds	r3, r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	5058      	str	r0, [r3, r1]
 8005234:	e01b      	b.n	800526e <xTaskRemoveFromEventList+0x156>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005236:	4b1b      	ldr	r3, [pc, #108]	@ (80052a4 <xTaskRemoveFromEventList+0x18c>)
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	613b      	str	r3, [r7, #16]
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	61da      	str	r2, [r3, #28]
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	689a      	ldr	r2, [r3, #8]
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	621a      	str	r2, [r3, #32]
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	69ba      	ldr	r2, [r7, #24]
 8005250:	3218      	adds	r2, #24
 8005252:	605a      	str	r2, [r3, #4]
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	3318      	adds	r3, #24
 8005258:	001a      	movs	r2, r3
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	609a      	str	r2, [r3, #8]
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	4a10      	ldr	r2, [pc, #64]	@ (80052a4 <xTaskRemoveFromEventList+0x18c>)
 8005262:	629a      	str	r2, [r3, #40]	@ 0x28
 8005264:	4b0f      	ldr	r3, [pc, #60]	@ (80052a4 <xTaskRemoveFromEventList+0x18c>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	1c5a      	adds	r2, r3, #1
 800526a:	4b0e      	ldr	r3, [pc, #56]	@ (80052a4 <xTaskRemoveFromEventList+0x18c>)
 800526c:	601a      	str	r2, [r3, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005272:	4b0d      	ldr	r3, [pc, #52]	@ (80052a8 <xTaskRemoveFromEventList+0x190>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005278:	429a      	cmp	r2, r3
 800527a:	d905      	bls.n	8005288 <xTaskRemoveFromEventList+0x170>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800527c:	2301      	movs	r3, #1
 800527e:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005280:	4b0a      	ldr	r3, [pc, #40]	@ (80052ac <xTaskRemoveFromEventList+0x194>)
 8005282:	2201      	movs	r2, #1
 8005284:	601a      	str	r2, [r3, #0]
 8005286:	e001      	b.n	800528c <xTaskRemoveFromEventList+0x174>
    }
    else
    {
        xReturn = pdFALSE;
 8005288:	2300      	movs	r3, #0
 800528a:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800528c:	69fb      	ldr	r3, [r7, #28]
}
 800528e:	0018      	movs	r0, r3
 8005290:	46bd      	mov	sp, r7
 8005292:	b008      	add	sp, #32
 8005294:	bd80      	pop	{r7, pc}
 8005296:	46c0      	nop			@ (mov r8, r8)
 8005298:	20000bb0 	.word	0x20000bb0
 800529c:	20000b90 	.word	0x20000b90
 80052a0:	200006b8 	.word	0x200006b8
 80052a4:	20000b48 	.word	0x20000b48
 80052a8:	200006b4 	.word	0x200006b4
 80052ac:	20000b9c 	.word	0x20000b9c

080052b0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80052b8:	4b05      	ldr	r3, [pc, #20]	@ (80052d0 <vTaskInternalSetTimeOutState+0x20>)
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80052c0:	4b04      	ldr	r3, [pc, #16]	@ (80052d4 <vTaskInternalSetTimeOutState+0x24>)
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	605a      	str	r2, [r3, #4]
}
 80052c8:	46c0      	nop			@ (mov r8, r8)
 80052ca:	46bd      	mov	sp, r7
 80052cc:	b002      	add	sp, #8
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	20000ba0 	.word	0x20000ba0
 80052d4:	20000b8c 	.word	0x20000b8c

080052d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d102      	bne.n	80052ee <xTaskCheckForTimeOut+0x16>
 80052e8:	b672      	cpsid	i
 80052ea:	46c0      	nop			@ (mov r8, r8)
 80052ec:	e7fd      	b.n	80052ea <xTaskCheckForTimeOut+0x12>
    configASSERT( pxTicksToWait );
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d102      	bne.n	80052fa <xTaskCheckForTimeOut+0x22>
 80052f4:	b672      	cpsid	i
 80052f6:	46c0      	nop			@ (mov r8, r8)
 80052f8:	e7fd      	b.n	80052f6 <xTaskCheckForTimeOut+0x1e>

    taskENTER_CRITICAL();
 80052fa:	f000 fea9 	bl	8006050 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80052fe:	4b1f      	ldr	r3, [pc, #124]	@ (800537c <xTaskCheckForTimeOut+0xa4>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	3301      	adds	r3, #1
 8005314:	d102      	bne.n	800531c <xTaskCheckForTimeOut+0x44>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005316:	2300      	movs	r3, #0
 8005318:	617b      	str	r3, [r7, #20]
 800531a:	e027      	b.n	800536c <xTaskCheckForTimeOut+0x94>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	4b17      	ldr	r3, [pc, #92]	@ (8005380 <xTaskCheckForTimeOut+0xa8>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	429a      	cmp	r2, r3
 8005326:	d00a      	beq.n	800533e <xTaskCheckForTimeOut+0x66>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	429a      	cmp	r2, r3
 8005330:	d305      	bcc.n	800533e <xTaskCheckForTimeOut+0x66>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005332:	2301      	movs	r3, #1
 8005334:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2200      	movs	r2, #0
 800533a:	601a      	str	r2, [r3, #0]
 800533c:	e016      	b.n	800536c <xTaskCheckForTimeOut+0x94>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	429a      	cmp	r2, r3
 8005346:	d20c      	bcs.n	8005362 <xTaskCheckForTimeOut+0x8a>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	1ad2      	subs	r2, r2, r3
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	0018      	movs	r0, r3
 8005358:	f7ff ffaa 	bl	80052b0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800535c:	2300      	movs	r3, #0
 800535e:	617b      	str	r3, [r7, #20]
 8005360:	e004      	b.n	800536c <xTaskCheckForTimeOut+0x94>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2200      	movs	r2, #0
 8005366:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005368:	2301      	movs	r3, #1
 800536a:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800536c:	f000 fe82 	bl	8006074 <vPortExitCritical>

    return xReturn;
 8005370:	697b      	ldr	r3, [r7, #20]
}
 8005372:	0018      	movs	r0, r3
 8005374:	46bd      	mov	sp, r7
 8005376:	b006      	add	sp, #24
 8005378:	bd80      	pop	{r7, pc}
 800537a:	46c0      	nop			@ (mov r8, r8)
 800537c:	20000b8c 	.word	0x20000b8c
 8005380:	20000ba0 	.word	0x20000ba0

08005384 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005384:	b580      	push	{r7, lr}
 8005386:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005388:	4b02      	ldr	r3, [pc, #8]	@ (8005394 <vTaskMissedYield+0x10>)
 800538a:	2201      	movs	r2, #1
 800538c:	601a      	str	r2, [r3, #0]
}
 800538e:	46c0      	nop			@ (mov r8, r8)
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	20000b9c 	.word	0x20000b9c

08005398 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80053a0:	f000 f84e 	bl	8005440 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80053a4:	4b03      	ldr	r3, [pc, #12]	@ (80053b4 <prvIdleTask+0x1c>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d9f9      	bls.n	80053a0 <prvIdleTask+0x8>
            {
                taskYIELD();
 80053ac:	f000 fe40 	bl	8006030 <vPortYield>
        prvCheckTasksWaitingTermination();
 80053b0:	e7f6      	b.n	80053a0 <prvIdleTask+0x8>
 80053b2:	46c0      	nop			@ (mov r8, r8)
 80053b4:	200006b8 	.word	0x200006b8

080053b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053be:	2300      	movs	r3, #0
 80053c0:	607b      	str	r3, [r7, #4]
 80053c2:	e00c      	b.n	80053de <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	0013      	movs	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	189b      	adds	r3, r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4a14      	ldr	r2, [pc, #80]	@ (8005420 <prvInitialiseTaskLists+0x68>)
 80053d0:	189b      	adds	r3, r3, r2
 80053d2:	0018      	movs	r0, r3
 80053d4:	f7fe fbce 	bl	8003b74 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	3301      	adds	r3, #1
 80053dc:	607b      	str	r3, [r7, #4]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b37      	cmp	r3, #55	@ 0x37
 80053e2:	d9ef      	bls.n	80053c4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80053e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005424 <prvInitialiseTaskLists+0x6c>)
 80053e6:	0018      	movs	r0, r3
 80053e8:	f7fe fbc4 	bl	8003b74 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80053ec:	4b0e      	ldr	r3, [pc, #56]	@ (8005428 <prvInitialiseTaskLists+0x70>)
 80053ee:	0018      	movs	r0, r3
 80053f0:	f7fe fbc0 	bl	8003b74 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80053f4:	4b0d      	ldr	r3, [pc, #52]	@ (800542c <prvInitialiseTaskLists+0x74>)
 80053f6:	0018      	movs	r0, r3
 80053f8:	f7fe fbbc 	bl	8003b74 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80053fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005430 <prvInitialiseTaskLists+0x78>)
 80053fe:	0018      	movs	r0, r3
 8005400:	f7fe fbb8 	bl	8003b74 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8005404:	4b0b      	ldr	r3, [pc, #44]	@ (8005434 <prvInitialiseTaskLists+0x7c>)
 8005406:	0018      	movs	r0, r3
 8005408:	f7fe fbb4 	bl	8003b74 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800540c:	4b0a      	ldr	r3, [pc, #40]	@ (8005438 <prvInitialiseTaskLists+0x80>)
 800540e:	4a05      	ldr	r2, [pc, #20]	@ (8005424 <prvInitialiseTaskLists+0x6c>)
 8005410:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005412:	4b0a      	ldr	r3, [pc, #40]	@ (800543c <prvInitialiseTaskLists+0x84>)
 8005414:	4a04      	ldr	r2, [pc, #16]	@ (8005428 <prvInitialiseTaskLists+0x70>)
 8005416:	601a      	str	r2, [r3, #0]
}
 8005418:	46c0      	nop			@ (mov r8, r8)
 800541a:	46bd      	mov	sp, r7
 800541c:	b002      	add	sp, #8
 800541e:	bd80      	pop	{r7, pc}
 8005420:	200006b8 	.word	0x200006b8
 8005424:	20000b18 	.word	0x20000b18
 8005428:	20000b2c 	.word	0x20000b2c
 800542c:	20000b48 	.word	0x20000b48
 8005430:	20000b5c 	.word	0x20000b5c
 8005434:	20000b74 	.word	0x20000b74
 8005438:	20000b40 	.word	0x20000b40
 800543c:	20000b44 	.word	0x20000b44

08005440 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005446:	e01a      	b.n	800547e <prvCheckTasksWaitingTermination+0x3e>
        {
            taskENTER_CRITICAL();
 8005448:	f000 fe02 	bl	8006050 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800544c:	4b10      	ldr	r3, [pc, #64]	@ (8005490 <prvCheckTasksWaitingTermination+0x50>)
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	3304      	adds	r3, #4
 8005458:	0018      	movs	r0, r3
 800545a:	f7fe fbea 	bl	8003c32 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800545e:	4b0d      	ldr	r3, [pc, #52]	@ (8005494 <prvCheckTasksWaitingTermination+0x54>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	1e5a      	subs	r2, r3, #1
 8005464:	4b0b      	ldr	r3, [pc, #44]	@ (8005494 <prvCheckTasksWaitingTermination+0x54>)
 8005466:	601a      	str	r2, [r3, #0]
                --uxDeletedTasksWaitingCleanUp;
 8005468:	4b0b      	ldr	r3, [pc, #44]	@ (8005498 <prvCheckTasksWaitingTermination+0x58>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	1e5a      	subs	r2, r3, #1
 800546e:	4b0a      	ldr	r3, [pc, #40]	@ (8005498 <prvCheckTasksWaitingTermination+0x58>)
 8005470:	601a      	str	r2, [r3, #0]
            }
            taskEXIT_CRITICAL();
 8005472:	f000 fdff 	bl	8006074 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	0018      	movs	r0, r3
 800547a:	f000 f80f 	bl	800549c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800547e:	4b06      	ldr	r3, [pc, #24]	@ (8005498 <prvCheckTasksWaitingTermination+0x58>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1e0      	bne.n	8005448 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8005486:	46c0      	nop			@ (mov r8, r8)
 8005488:	46c0      	nop			@ (mov r8, r8)
 800548a:	46bd      	mov	sp, r7
 800548c:	b002      	add	sp, #8
 800548e:	bd80      	pop	{r7, pc}
 8005490:	20000b5c 	.word	0x20000b5c
 8005494:	20000b88 	.word	0x20000b88
 8005498:	20000b70 	.word	0x20000b70

0800549c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2259      	movs	r2, #89	@ 0x59
 80054a8:	5c9b      	ldrb	r3, [r3, r2]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d109      	bne.n	80054c2 <prvDeleteTCB+0x26>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b2:	0018      	movs	r0, r3
 80054b4:	f000 ff1c 	bl	80062f0 <vPortFree>
                vPortFree( pxTCB );
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	0018      	movs	r0, r3
 80054bc:	f000 ff18 	bl	80062f0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80054c0:	e011      	b.n	80054e6 <prvDeleteTCB+0x4a>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2259      	movs	r2, #89	@ 0x59
 80054c6:	5c9b      	ldrb	r3, [r3, r2]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d104      	bne.n	80054d6 <prvDeleteTCB+0x3a>
                vPortFree( pxTCB );
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	0018      	movs	r0, r3
 80054d0:	f000 ff0e 	bl	80062f0 <vPortFree>
    }
 80054d4:	e007      	b.n	80054e6 <prvDeleteTCB+0x4a>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2259      	movs	r2, #89	@ 0x59
 80054da:	5c9b      	ldrb	r3, [r3, r2]
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d002      	beq.n	80054e6 <prvDeleteTCB+0x4a>
 80054e0:	b672      	cpsid	i
 80054e2:	46c0      	nop			@ (mov r8, r8)
 80054e4:	e7fd      	b.n	80054e2 <prvDeleteTCB+0x46>
    }
 80054e6:	46c0      	nop			@ (mov r8, r8)
 80054e8:	46bd      	mov	sp, r7
 80054ea:	b002      	add	sp, #8
 80054ec:	bd80      	pop	{r7, pc}
	...

080054f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054f4:	4b09      	ldr	r3, [pc, #36]	@ (800551c <prvResetNextTaskUnblockTime+0x2c>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d104      	bne.n	8005508 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80054fe:	4b08      	ldr	r3, [pc, #32]	@ (8005520 <prvResetNextTaskUnblockTime+0x30>)
 8005500:	2201      	movs	r2, #1
 8005502:	4252      	negs	r2, r2
 8005504:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005506:	e005      	b.n	8005514 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005508:	4b04      	ldr	r3, [pc, #16]	@ (800551c <prvResetNextTaskUnblockTime+0x2c>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	4b03      	ldr	r3, [pc, #12]	@ (8005520 <prvResetNextTaskUnblockTime+0x30>)
 8005512:	601a      	str	r2, [r3, #0]
}
 8005514:	46c0      	nop			@ (mov r8, r8)
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	46c0      	nop			@ (mov r8, r8)
 800551c:	20000b40 	.word	0x20000b40
 8005520:	20000ba8 	.word	0x20000ba8

08005524 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 800552a:	4b04      	ldr	r3, [pc, #16]	@ (800553c <xTaskGetCurrentTaskHandle+0x18>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	607b      	str	r3, [r7, #4]

        return xReturn;
 8005530:	687b      	ldr	r3, [r7, #4]
    }
 8005532:	0018      	movs	r0, r3
 8005534:	46bd      	mov	sp, r7
 8005536:	b002      	add	sp, #8
 8005538:	bd80      	pop	{r7, pc}
 800553a:	46c0      	nop			@ (mov r8, r8)
 800553c:	200006b4 	.word	0x200006b4

08005540 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005546:	4b0a      	ldr	r3, [pc, #40]	@ (8005570 <xTaskGetSchedulerState+0x30>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d102      	bne.n	8005554 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800554e:	2301      	movs	r3, #1
 8005550:	607b      	str	r3, [r7, #4]
 8005552:	e008      	b.n	8005566 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005554:	4b07      	ldr	r3, [pc, #28]	@ (8005574 <xTaskGetSchedulerState+0x34>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d102      	bne.n	8005562 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800555c:	2302      	movs	r3, #2
 800555e:	607b      	str	r3, [r7, #4]
 8005560:	e001      	b.n	8005566 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005562:	2300      	movs	r3, #0
 8005564:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005566:	687b      	ldr	r3, [r7, #4]
    }
 8005568:	0018      	movs	r0, r3
 800556a:	46bd      	mov	sp, r7
 800556c:	b002      	add	sp, #8
 800556e:	bd80      	pop	{r7, pc}
 8005570:	20000b94 	.word	0x20000b94
 8005574:	20000bb0 	.word	0x20000bb0

08005578 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005584:	2300      	movs	r3, #0
 8005586:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d100      	bne.n	8005590 <xTaskPriorityInherit+0x18>
 800558e:	e077      	b.n	8005680 <xTaskPriorityInherit+0x108>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005594:	4b3d      	ldr	r3, [pc, #244]	@ (800568c <xTaskPriorityInherit+0x114>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800559a:	429a      	cmp	r2, r3
 800559c:	d267      	bcs.n	800566e <xTaskPriorityInherit+0xf6>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	db06      	blt.n	80055b4 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055a6:	4b39      	ldr	r3, [pc, #228]	@ (800568c <xTaskPriorityInherit+0x114>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ac:	2238      	movs	r2, #56	@ 0x38
 80055ae:	1ad2      	subs	r2, r2, r3
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	6959      	ldr	r1, [r3, #20]
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055bc:	0013      	movs	r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	189b      	adds	r3, r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4a32      	ldr	r2, [pc, #200]	@ (8005690 <xTaskPriorityInherit+0x118>)
 80055c6:	189b      	adds	r3, r3, r2
 80055c8:	4299      	cmp	r1, r3
 80055ca:	d148      	bne.n	800565e <xTaskPriorityInherit+0xe6>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	3304      	adds	r3, #4
 80055d0:	0018      	movs	r0, r3
 80055d2:	f7fe fb2e 	bl	8003c32 <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80055d6:	4b2d      	ldr	r3, [pc, #180]	@ (800568c <xTaskPriorityInherit+0x114>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055e4:	4b2b      	ldr	r3, [pc, #172]	@ (8005694 <xTaskPriorityInherit+0x11c>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d903      	bls.n	80055f4 <xTaskPriorityInherit+0x7c>
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055f0:	4b28      	ldr	r3, [pc, #160]	@ (8005694 <xTaskPriorityInherit+0x11c>)
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055f8:	4925      	ldr	r1, [pc, #148]	@ (8005690 <xTaskPriorityInherit+0x118>)
 80055fa:	0013      	movs	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	189b      	adds	r3, r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	18cb      	adds	r3, r1, r3
 8005604:	3304      	adds	r3, #4
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	60fb      	str	r3, [r7, #12]
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	609a      	str	r2, [r3, #8]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	689a      	ldr	r2, [r3, #8]
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	60da      	str	r2, [r3, #12]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	3204      	adds	r2, #4
 8005620:	605a      	str	r2, [r3, #4]
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	1d1a      	adds	r2, r3, #4
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	609a      	str	r2, [r3, #8]
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800562e:	0013      	movs	r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	189b      	adds	r3, r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	4a16      	ldr	r2, [pc, #88]	@ (8005690 <xTaskPriorityInherit+0x118>)
 8005638:	189a      	adds	r2, r3, r2
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	615a      	str	r2, [r3, #20]
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005642:	4913      	ldr	r1, [pc, #76]	@ (8005690 <xTaskPriorityInherit+0x118>)
 8005644:	0013      	movs	r3, r2
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	189b      	adds	r3, r3, r2
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	585b      	ldr	r3, [r3, r1]
 800564e:	1c58      	adds	r0, r3, #1
 8005650:	490f      	ldr	r1, [pc, #60]	@ (8005690 <xTaskPriorityInherit+0x118>)
 8005652:	0013      	movs	r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	189b      	adds	r3, r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	5058      	str	r0, [r3, r1]
 800565c:	e004      	b.n	8005668 <xTaskPriorityInherit+0xf0>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800565e:	4b0b      	ldr	r3, [pc, #44]	@ (800568c <xTaskPriorityInherit+0x114>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8005668:	2301      	movs	r3, #1
 800566a:	617b      	str	r3, [r7, #20]
 800566c:	e008      	b.n	8005680 <xTaskPriorityInherit+0x108>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005672:	4b06      	ldr	r3, [pc, #24]	@ (800568c <xTaskPriorityInherit+0x114>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005678:	429a      	cmp	r2, r3
 800567a:	d201      	bcs.n	8005680 <xTaskPriorityInherit+0x108>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800567c:	2301      	movs	r3, #1
 800567e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005680:	697b      	ldr	r3, [r7, #20]
    }
 8005682:	0018      	movs	r0, r3
 8005684:	46bd      	mov	sp, r7
 8005686:	b006      	add	sp, #24
 8005688:	bd80      	pop	{r7, pc}
 800568a:	46c0      	nop			@ (mov r8, r8)
 800568c:	200006b4 	.word	0x200006b4
 8005690:	200006b8 	.word	0x200006b8
 8005694:	20000b90 	.word	0x20000b90

08005698 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80056a4:	2300      	movs	r3, #0
 80056a6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d06c      	beq.n	8005788 <xTaskPriorityDisinherit+0xf0>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80056ae:	4b39      	ldr	r3, [pc, #228]	@ (8005794 <xTaskPriorityDisinherit+0xfc>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d002      	beq.n	80056be <xTaskPriorityDisinherit+0x26>
 80056b8:	b672      	cpsid	i
 80056ba:	46c0      	nop			@ (mov r8, r8)
 80056bc:	e7fd      	b.n	80056ba <xTaskPriorityDisinherit+0x22>
            configASSERT( pxTCB->uxMutexesHeld );
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d102      	bne.n	80056cc <xTaskPriorityDisinherit+0x34>
 80056c6:	b672      	cpsid	i
 80056c8:	46c0      	nop			@ (mov r8, r8)
 80056ca:	e7fd      	b.n	80056c8 <xTaskPriorityDisinherit+0x30>
            ( pxTCB->uxMutexesHeld )--;
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056d0:	1e5a      	subs	r2, r3, #1
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056de:	429a      	cmp	r2, r3
 80056e0:	d052      	beq.n	8005788 <xTaskPriorityDisinherit+0xf0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d14e      	bne.n	8005788 <xTaskPriorityDisinherit+0xf0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	3304      	adds	r3, #4
 80056ee:	0018      	movs	r0, r3
 80056f0:	f7fe fa9f 	bl	8003c32 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005700:	2238      	movs	r2, #56	@ 0x38
 8005702:	1ad2      	subs	r2, r2, r3
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800570c:	4b22      	ldr	r3, [pc, #136]	@ (8005798 <xTaskPriorityDisinherit+0x100>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	429a      	cmp	r2, r3
 8005712:	d903      	bls.n	800571c <xTaskPriorityDisinherit+0x84>
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005718:	4b1f      	ldr	r3, [pc, #124]	@ (8005798 <xTaskPriorityDisinherit+0x100>)
 800571a:	601a      	str	r2, [r3, #0]
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005720:	491e      	ldr	r1, [pc, #120]	@ (800579c <xTaskPriorityDisinherit+0x104>)
 8005722:	0013      	movs	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	189b      	adds	r3, r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	18cb      	adds	r3, r1, r3
 800572c:	3304      	adds	r3, #4
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	60fb      	str	r3, [r7, #12]
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	609a      	str	r2, [r3, #8]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	689a      	ldr	r2, [r3, #8]
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	60da      	str	r2, [r3, #12]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	3204      	adds	r2, #4
 8005748:	605a      	str	r2, [r3, #4]
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	1d1a      	adds	r2, r3, #4
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	609a      	str	r2, [r3, #8]
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005756:	0013      	movs	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	189b      	adds	r3, r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4a0f      	ldr	r2, [pc, #60]	@ (800579c <xTaskPriorityDisinherit+0x104>)
 8005760:	189a      	adds	r2, r3, r2
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	615a      	str	r2, [r3, #20]
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800576a:	490c      	ldr	r1, [pc, #48]	@ (800579c <xTaskPriorityDisinherit+0x104>)
 800576c:	0013      	movs	r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	189b      	adds	r3, r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	585b      	ldr	r3, [r3, r1]
 8005776:	1c58      	adds	r0, r3, #1
 8005778:	4908      	ldr	r1, [pc, #32]	@ (800579c <xTaskPriorityDisinherit+0x104>)
 800577a:	0013      	movs	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	189b      	adds	r3, r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	5058      	str	r0, [r3, r1]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005784:	2301      	movs	r3, #1
 8005786:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005788:	697b      	ldr	r3, [r7, #20]
    }
 800578a:	0018      	movs	r0, r3
 800578c:	46bd      	mov	sp, r7
 800578e:	b006      	add	sp, #24
 8005790:	bd80      	pop	{r7, pc}
 8005792:	46c0      	nop			@ (mov r8, r8)
 8005794:	200006b4 	.word	0x200006b4
 8005798:	20000b90 	.word	0x20000b90
 800579c:	200006b8 	.word	0x200006b8

080057a0 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b088      	sub	sp, #32
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80057ae:	2301      	movs	r3, #1
 80057b0:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d100      	bne.n	80057ba <vTaskPriorityDisinheritAfterTimeout+0x1a>
 80057b8:	e080      	b.n	80058bc <vTaskPriorityDisinheritAfterTimeout+0x11c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d102      	bne.n	80057c8 <vTaskPriorityDisinheritAfterTimeout+0x28>
 80057c2:	b672      	cpsid	i
 80057c4:	46c0      	nop			@ (mov r8, r8)
 80057c6:	e7fd      	b.n	80057c4 <vTaskPriorityDisinheritAfterTimeout+0x24>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d902      	bls.n	80057d8 <vTaskPriorityDisinheritAfterTimeout+0x38>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	61fb      	str	r3, [r7, #28]
 80057d6:	e002      	b.n	80057de <vTaskPriorityDisinheritAfterTimeout+0x3e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057dc:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e2:	69fa      	ldr	r2, [r7, #28]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d069      	beq.n	80058bc <vTaskPriorityDisinheritAfterTimeout+0x11c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d164      	bne.n	80058bc <vTaskPriorityDisinheritAfterTimeout+0x11c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80057f2:	4b34      	ldr	r3, [pc, #208]	@ (80058c4 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	69ba      	ldr	r2, [r7, #24]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d102      	bne.n	8005802 <vTaskPriorityDisinheritAfterTimeout+0x62>
 80057fc:	b672      	cpsid	i
 80057fe:	46c0      	nop			@ (mov r8, r8)
 8005800:	e7fd      	b.n	80057fe <vTaskPriorityDisinheritAfterTimeout+0x5e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005806:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	69fa      	ldr	r2, [r7, #28]
 800580c:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	2b00      	cmp	r3, #0
 8005814:	db04      	blt.n	8005820 <vTaskPriorityDisinheritAfterTimeout+0x80>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	2238      	movs	r2, #56	@ 0x38
 800581a:	1ad2      	subs	r2, r2, r3
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	6959      	ldr	r1, [r3, #20]
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	0013      	movs	r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	189b      	adds	r3, r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4a26      	ldr	r2, [pc, #152]	@ (80058c8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8005830:	189b      	adds	r3, r3, r2
 8005832:	4299      	cmp	r1, r3
 8005834:	d142      	bne.n	80058bc <vTaskPriorityDisinheritAfterTimeout+0x11c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	3304      	adds	r3, #4
 800583a:	0018      	movs	r0, r3
 800583c:	f7fe f9f9 	bl	8003c32 <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005844:	4b21      	ldr	r3, [pc, #132]	@ (80058cc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	429a      	cmp	r2, r3
 800584a:	d903      	bls.n	8005854 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005850:	4b1e      	ldr	r3, [pc, #120]	@ (80058cc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8005852:	601a      	str	r2, [r3, #0]
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005858:	491b      	ldr	r1, [pc, #108]	@ (80058c8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800585a:	0013      	movs	r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	189b      	adds	r3, r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	18cb      	adds	r3, r1, r3
 8005864:	3304      	adds	r3, #4
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	60fb      	str	r3, [r7, #12]
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	609a      	str	r2, [r3, #8]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	60da      	str	r2, [r3, #12]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	3204      	adds	r2, #4
 8005880:	605a      	str	r2, [r3, #4]
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	1d1a      	adds	r2, r3, #4
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	609a      	str	r2, [r3, #8]
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800588e:	0013      	movs	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	189b      	adds	r3, r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4a0c      	ldr	r2, [pc, #48]	@ (80058c8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8005898:	189a      	adds	r2, r3, r2
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	615a      	str	r2, [r3, #20]
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058a2:	4909      	ldr	r1, [pc, #36]	@ (80058c8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80058a4:	0013      	movs	r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	189b      	adds	r3, r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	585b      	ldr	r3, [r3, r1]
 80058ae:	1c58      	adds	r0, r3, #1
 80058b0:	4905      	ldr	r1, [pc, #20]	@ (80058c8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80058b2:	0013      	movs	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	189b      	adds	r3, r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	5058      	str	r0, [r3, r1]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80058bc:	46c0      	nop			@ (mov r8, r8)
 80058be:	46bd      	mov	sp, r7
 80058c0:	b008      	add	sp, #32
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	200006b4 	.word	0x200006b4
 80058c8:	200006b8 	.word	0x200006b8
 80058cc:	20000b90 	.word	0x20000b90

080058d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80058d0:	b580      	push	{r7, lr}
 80058d2:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 80058d4:	4b06      	ldr	r3, [pc, #24]	@ (80058f0 <pvTaskIncrementMutexHeldCount+0x20>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d004      	beq.n	80058e6 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 80058dc:	4b04      	ldr	r3, [pc, #16]	@ (80058f0 <pvTaskIncrementMutexHeldCount+0x20>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80058e2:	3201      	adds	r2, #1
 80058e4:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        return pxCurrentTCB;
 80058e6:	4b02      	ldr	r3, [pc, #8]	@ (80058f0 <pvTaskIncrementMutexHeldCount+0x20>)
 80058e8:	681b      	ldr	r3, [r3, #0]
    }
 80058ea:	0018      	movs	r0, r3
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	200006b4 	.word	0x200006b4

080058f4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80058fe:	4b2e      	ldr	r3, [pc, #184]	@ (80059b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005904:	4b2d      	ldr	r3, [pc, #180]	@ (80059bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	3304      	adds	r3, #4
 800590a:	0018      	movs	r0, r3
 800590c:	f7fe f991 	bl	8003c32 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	3301      	adds	r3, #1
 8005914:	d124      	bne.n	8005960 <prvAddCurrentTaskToDelayedList+0x6c>
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d021      	beq.n	8005960 <prvAddCurrentTaskToDelayedList+0x6c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800591c:	4b28      	ldr	r3, [pc, #160]	@ (80059c0 <prvAddCurrentTaskToDelayedList+0xcc>)
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	613b      	str	r3, [r7, #16]
 8005922:	4b26      	ldr	r3, [pc, #152]	@ (80059bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	609a      	str	r2, [r3, #8]
 800592a:	4b24      	ldr	r3, [pc, #144]	@ (80059bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	693a      	ldr	r2, [r7, #16]
 8005930:	6892      	ldr	r2, [r2, #8]
 8005932:	60da      	str	r2, [r3, #12]
 8005934:	4b21      	ldr	r3, [pc, #132]	@ (80059bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	3204      	adds	r2, #4
 800593e:	605a      	str	r2, [r3, #4]
 8005940:	4b1e      	ldr	r3, [pc, #120]	@ (80059bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	1d1a      	adds	r2, r3, #4
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	609a      	str	r2, [r3, #8]
 800594a:	4b1c      	ldr	r3, [pc, #112]	@ (80059bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a1c      	ldr	r2, [pc, #112]	@ (80059c0 <prvAddCurrentTaskToDelayedList+0xcc>)
 8005950:	615a      	str	r2, [r3, #20]
 8005952:	4b1b      	ldr	r3, [pc, #108]	@ (80059c0 <prvAddCurrentTaskToDelayedList+0xcc>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	1c5a      	adds	r2, r3, #1
 8005958:	4b19      	ldr	r3, [pc, #100]	@ (80059c0 <prvAddCurrentTaskToDelayedList+0xcc>)
 800595a:	601a      	str	r2, [r3, #0]
 800595c:	46c0      	nop			@ (mov r8, r8)

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800595e:	e026      	b.n	80059ae <prvAddCurrentTaskToDelayedList+0xba>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	18d3      	adds	r3, r2, r3
 8005966:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005968:	4b14      	ldr	r3, [pc, #80]	@ (80059bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	429a      	cmp	r2, r3
 8005976:	d209      	bcs.n	800598c <prvAddCurrentTaskToDelayedList+0x98>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005978:	4b12      	ldr	r3, [pc, #72]	@ (80059c4 <prvAddCurrentTaskToDelayedList+0xd0>)
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	4b0f      	ldr	r3, [pc, #60]	@ (80059bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	3304      	adds	r3, #4
 8005982:	0019      	movs	r1, r3
 8005984:	0010      	movs	r0, r2
 8005986:	f7fe f91e 	bl	8003bc6 <vListInsert>
}
 800598a:	e010      	b.n	80059ae <prvAddCurrentTaskToDelayedList+0xba>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800598c:	4b0e      	ldr	r3, [pc, #56]	@ (80059c8 <prvAddCurrentTaskToDelayedList+0xd4>)
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	4b0a      	ldr	r3, [pc, #40]	@ (80059bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	3304      	adds	r3, #4
 8005996:	0019      	movs	r1, r3
 8005998:	0010      	movs	r0, r2
 800599a:	f7fe f914 	bl	8003bc6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800599e:	4b0b      	ldr	r3, [pc, #44]	@ (80059cc <prvAddCurrentTaskToDelayedList+0xd8>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d202      	bcs.n	80059ae <prvAddCurrentTaskToDelayedList+0xba>
                    xNextTaskUnblockTime = xTimeToWake;
 80059a8:	4b08      	ldr	r3, [pc, #32]	@ (80059cc <prvAddCurrentTaskToDelayedList+0xd8>)
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	601a      	str	r2, [r3, #0]
}
 80059ae:	46c0      	nop			@ (mov r8, r8)
 80059b0:	46bd      	mov	sp, r7
 80059b2:	b006      	add	sp, #24
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	46c0      	nop			@ (mov r8, r8)
 80059b8:	20000b8c 	.word	0x20000b8c
 80059bc:	200006b4 	.word	0x200006b4
 80059c0:	20000b74 	.word	0x20000b74
 80059c4:	20000b44 	.word	0x20000b44
 80059c8:	20000b40 	.word	0x20000b40
 80059cc:	20000ba8 	.word	0x20000ba8

080059d0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80059d0:	b590      	push	{r4, r7, lr}
 80059d2:	b089      	sub	sp, #36	@ 0x24
 80059d4:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 80059d6:	2300      	movs	r3, #0
 80059d8:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80059da:	f000 fa5d 	bl	8005e98 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80059de:	4b18      	ldr	r3, [pc, #96]	@ (8005a40 <xTimerCreateTimerTask+0x70>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d020      	beq.n	8005a28 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 80059e6:	2300      	movs	r3, #0
 80059e8:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 80059ea:	2300      	movs	r3, #0
 80059ec:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80059ee:	003a      	movs	r2, r7
 80059f0:	1d39      	adds	r1, r7, #4
 80059f2:	2308      	movs	r3, #8
 80059f4:	18fb      	adds	r3, r7, r3
 80059f6:	0018      	movs	r0, r3
 80059f8:	f7fe f8a4 	bl	8003b44 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 80059fc:	683c      	ldr	r4, [r7, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	4910      	ldr	r1, [pc, #64]	@ (8005a44 <xTimerCreateTimerTask+0x74>)
 8005a04:	4810      	ldr	r0, [pc, #64]	@ (8005a48 <xTimerCreateTimerTask+0x78>)
 8005a06:	9202      	str	r2, [sp, #8]
 8005a08:	9301      	str	r3, [sp, #4]
 8005a0a:	2302      	movs	r3, #2
 8005a0c:	9300      	str	r3, [sp, #0]
 8005a0e:	2300      	movs	r3, #0
 8005a10:	0022      	movs	r2, r4
 8005a12:	f7fe fe90 	bl	8004736 <xTaskCreateStatic>
 8005a16:	0002      	movs	r2, r0
 8005a18:	4b0c      	ldr	r3, [pc, #48]	@ (8005a4c <xTimerCreateTimerTask+0x7c>)
 8005a1a:	601a      	str	r2, [r3, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 8005a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a4c <xTimerCreateTimerTask+0x7c>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d001      	beq.n	8005a28 <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 8005a24:	2301      	movs	r3, #1
 8005a26:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d102      	bne.n	8005a34 <xTimerCreateTimerTask+0x64>
 8005a2e:	b672      	cpsid	i
 8005a30:	46c0      	nop			@ (mov r8, r8)
 8005a32:	e7fd      	b.n	8005a30 <xTimerCreateTimerTask+0x60>
        return xReturn;
 8005a34:	68fb      	ldr	r3, [r7, #12]
    }
 8005a36:	0018      	movs	r0, r3
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	b005      	add	sp, #20
 8005a3c:	bd90      	pop	{r4, r7, pc}
 8005a3e:	46c0      	nop			@ (mov r8, r8)
 8005a40:	20000be4 	.word	0x20000be4
 8005a44:	0800658c 	.word	0x0800658c
 8005a48:	08005af9 	.word	0x08005af9
 8005a4c:	20000be8 	.word	0x20000be8

08005a50 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005a5c:	e009      	b.n	8005a72 <prvReloadTimer+0x22>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	18d3      	adds	r3, r2, r3
 8005a66:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6a1b      	ldr	r3, [r3, #32]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	0010      	movs	r0, r2
 8005a70:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	699a      	ldr	r2, [r3, #24]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	18d1      	adds	r1, r2, r3
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	68f8      	ldr	r0, [r7, #12]
 8005a80:	f000 f8da 	bl	8005c38 <prvInsertTimerInActiveList>
 8005a84:	1e03      	subs	r3, r0, #0
 8005a86:	d1ea      	bne.n	8005a5e <prvReloadTimer+0xe>
        }
    }
 8005a88:	46c0      	nop			@ (mov r8, r8)
 8005a8a:	46c0      	nop			@ (mov r8, r8)
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	b004      	add	sp, #16
 8005a90:	bd80      	pop	{r7, pc}
	...

08005a94 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a9e:	4b15      	ldr	r3, [pc, #84]	@ (8005af4 <prvProcessExpiredTimer+0x60>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	3304      	adds	r3, #4
 8005aac:	0018      	movs	r0, r3
 8005aae:	f7fe f8c0 	bl	8003c32 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2228      	movs	r2, #40	@ 0x28
 8005ab6:	5c9b      	ldrb	r3, [r3, r2]
 8005ab8:	001a      	movs	r2, r3
 8005aba:	2304      	movs	r3, #4
 8005abc:	4013      	ands	r3, r2
 8005abe:	d006      	beq.n	8005ace <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8005ac0:	683a      	ldr	r2, [r7, #0]
 8005ac2:	6879      	ldr	r1, [r7, #4]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	0018      	movs	r0, r3
 8005ac8:	f7ff ffc2 	bl	8005a50 <prvReloadTimer>
 8005acc:	e008      	b.n	8005ae0 <prvProcessExpiredTimer+0x4c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2228      	movs	r2, #40	@ 0x28
 8005ad2:	5c9b      	ldrb	r3, [r3, r2]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	4393      	bics	r3, r2
 8005ad8:	b2d9      	uxtb	r1, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2228      	movs	r2, #40	@ 0x28
 8005ade:	5499      	strb	r1, [r3, r2]
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6a1b      	ldr	r3, [r3, #32]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	0010      	movs	r0, r2
 8005ae8:	4798      	blx	r3
    }
 8005aea:	46c0      	nop			@ (mov r8, r8)
 8005aec:	46bd      	mov	sp, r7
 8005aee:	b004      	add	sp, #16
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	46c0      	nop			@ (mov r8, r8)
 8005af4:	20000bdc 	.word	0x20000bdc

08005af8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b00:	2308      	movs	r3, #8
 8005b02:	18fb      	adds	r3, r7, r3
 8005b04:	0018      	movs	r0, r3
 8005b06:	f000 f855 	bl	8005bb4 <prvGetNextExpireTime>
 8005b0a:	0003      	movs	r3, r0
 8005b0c:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	0011      	movs	r1, r2
 8005b14:	0018      	movs	r0, r3
 8005b16:	f000 f805 	bl	8005b24 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8005b1a:	f000 f8cf 	bl	8005cbc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b1e:	46c0      	nop			@ (mov r8, r8)
 8005b20:	e7ee      	b.n	8005b00 <prvTimerTask+0x8>
	...

08005b24 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8005b2e:	f7ff f831 	bl	8004b94 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b32:	2308      	movs	r3, #8
 8005b34:	18fb      	adds	r3, r7, r3
 8005b36:	0018      	movs	r0, r3
 8005b38:	f000 f85e 	bl	8005bf8 <prvSampleTimeNow>
 8005b3c:	0003      	movs	r3, r0
 8005b3e:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d12b      	bne.n	8005b9e <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10c      	bne.n	8005b66 <prvProcessTimerOrBlockTask+0x42>
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d808      	bhi.n	8005b66 <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 8005b54:	f7ff f82a 	bl	8004bac <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	0011      	movs	r1, r2
 8005b5e:	0018      	movs	r0, r3
 8005b60:	f7ff ff98 	bl	8005a94 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8005b64:	e01d      	b.n	8005ba2 <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d008      	beq.n	8005b7e <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8005bac <prvProcessTimerOrBlockTask+0x88>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <prvProcessTimerOrBlockTask+0x56>
 8005b76:	2301      	movs	r3, #1
 8005b78:	e000      	b.n	8005b7c <prvProcessTimerOrBlockTask+0x58>
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8005bb0 <prvProcessTimerOrBlockTask+0x8c>)
 8005b80:	6818      	ldr	r0, [r3, #0]
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	683a      	ldr	r2, [r7, #0]
 8005b8a:	0019      	movs	r1, r3
 8005b8c:	f7fe fda0 	bl	80046d0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8005b90:	f7ff f80c 	bl	8004bac <xTaskResumeAll>
 8005b94:	1e03      	subs	r3, r0, #0
 8005b96:	d104      	bne.n	8005ba2 <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 8005b98:	f000 fa4a 	bl	8006030 <vPortYield>
    }
 8005b9c:	e001      	b.n	8005ba2 <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 8005b9e:	f7ff f805 	bl	8004bac <xTaskResumeAll>
    }
 8005ba2:	46c0      	nop			@ (mov r8, r8)
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	b004      	add	sp, #16
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	46c0      	nop			@ (mov r8, r8)
 8005bac:	20000be0 	.word	0x20000be0
 8005bb0:	20000be4 	.word	0x20000be4

08005bb4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8005bf4 <prvGetNextExpireTime+0x40>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d101      	bne.n	8005bca <prvGetNextExpireTime+0x16>
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	e000      	b.n	8005bcc <prvGetNextExpireTime+0x18>
 8005bca:	2200      	movs	r2, #0
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d105      	bne.n	8005be4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005bd8:	4b06      	ldr	r3, [pc, #24]	@ (8005bf4 <prvGetNextExpireTime+0x40>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	60fb      	str	r3, [r7, #12]
 8005be2:	e001      	b.n	8005be8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005be4:	2300      	movs	r3, #0
 8005be6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8005be8:	68fb      	ldr	r3, [r7, #12]
    }
 8005bea:	0018      	movs	r0, r3
 8005bec:	46bd      	mov	sp, r7
 8005bee:	b004      	add	sp, #16
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	46c0      	nop			@ (mov r8, r8)
 8005bf4:	20000bdc 	.word	0x20000bdc

08005bf8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005c00:	f7ff f8be 	bl	8004d80 <xTaskGetTickCount>
 8005c04:	0003      	movs	r3, r0
 8005c06:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 8005c08:	4b0a      	ldr	r3, [pc, #40]	@ (8005c34 <prvSampleTimeNow+0x3c>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d205      	bcs.n	8005c1e <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 8005c12:	f000 f919 	bl	8005e48 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	601a      	str	r2, [r3, #0]
 8005c1c:	e002      	b.n	8005c24 <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005c24:	4b03      	ldr	r3, [pc, #12]	@ (8005c34 <prvSampleTimeNow+0x3c>)
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
    }
 8005c2c:	0018      	movs	r0, r3
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	b004      	add	sp, #16
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	20000bec 	.word	0x20000bec

08005c38 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
 8005c44:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8005c46:	2300      	movs	r3, #0
 8005c48:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d812      	bhi.n	8005c84 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	1ad2      	subs	r2, r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d302      	bcc.n	8005c72 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	617b      	str	r3, [r7, #20]
 8005c70:	e01b      	b.n	8005caa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005c72:	4b10      	ldr	r3, [pc, #64]	@ (8005cb4 <prvInsertTimerInActiveList+0x7c>)
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	3304      	adds	r3, #4
 8005c7a:	0019      	movs	r1, r3
 8005c7c:	0010      	movs	r0, r2
 8005c7e:	f7fd ffa2 	bl	8003bc6 <vListInsert>
 8005c82:	e012      	b.n	8005caa <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d206      	bcs.n	8005c9a <prvInsertTimerInActiveList+0x62>
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d302      	bcc.n	8005c9a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005c94:	2301      	movs	r3, #1
 8005c96:	617b      	str	r3, [r7, #20]
 8005c98:	e007      	b.n	8005caa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c9a:	4b07      	ldr	r3, [pc, #28]	@ (8005cb8 <prvInsertTimerInActiveList+0x80>)
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	0019      	movs	r1, r3
 8005ca4:	0010      	movs	r0, r2
 8005ca6:	f7fd ff8e 	bl	8003bc6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8005caa:	697b      	ldr	r3, [r7, #20]
    }
 8005cac:	0018      	movs	r0, r3
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	b006      	add	sp, #24
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	20000be0 	.word	0x20000be0
 8005cb8:	20000bdc 	.word	0x20000bdc

08005cbc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b088      	sub	sp, #32
 8005cc0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005cc2:	e0ad      	b.n	8005e20 <prvProcessReceivedCommands+0x164>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005cc4:	1d3b      	adds	r3, r7, #4
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	da10      	bge.n	8005cee <prvProcessReceivedCommands+0x32>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005ccc:	1d3b      	adds	r3, r7, #4
 8005cce:	3304      	adds	r3, #4
 8005cd0:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d102      	bne.n	8005cde <prvProcessReceivedCommands+0x22>
 8005cd8:	b672      	cpsid	i
 8005cda:	46c0      	nop			@ (mov r8, r8)
 8005cdc:	e7fd      	b.n	8005cda <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	6858      	ldr	r0, [r3, #4]
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	0019      	movs	r1, r3
 8005cec:	4790      	blx	r2
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005cee:	1d3b      	adds	r3, r7, #4
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	da00      	bge.n	8005cf8 <prvProcessReceivedCommands+0x3c>
 8005cf6:	e093      	b.n	8005e20 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005cf8:	1d3b      	adds	r3, r7, #4
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d004      	beq.n	8005d10 <prvProcessReceivedCommands+0x54>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	3304      	adds	r3, #4
 8005d0a:	0018      	movs	r0, r3
 8005d0c:	f7fd ff91 	bl	8003c32 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d10:	003b      	movs	r3, r7
 8005d12:	0018      	movs	r0, r3
 8005d14:	f7ff ff70 	bl	8005bf8 <prvSampleTimeNow>
 8005d18:	0003      	movs	r3, r0
 8005d1a:	617b      	str	r3, [r7, #20]

                switch( xMessage.xMessageID )
 8005d1c:	1d3b      	adds	r3, r7, #4
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2b09      	cmp	r3, #9
 8005d22:	d900      	bls.n	8005d26 <prvProcessReceivedCommands+0x6a>
 8005d24:	e079      	b.n	8005e1a <prvProcessReceivedCommands+0x15e>
 8005d26:	009a      	lsls	r2, r3, #2
 8005d28:	4b45      	ldr	r3, [pc, #276]	@ (8005e40 <prvProcessReceivedCommands+0x184>)
 8005d2a:	18d3      	adds	r3, r2, r3
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	469f      	mov	pc, r3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	2228      	movs	r2, #40	@ 0x28
 8005d34:	5c9b      	ldrb	r3, [r3, r2]
 8005d36:	2201      	movs	r2, #1
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	b2d9      	uxtb	r1, r3
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	2228      	movs	r2, #40	@ 0x28
 8005d40:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005d42:	1d3b      	adds	r3, r7, #4
 8005d44:	685a      	ldr	r2, [r3, #4]
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	18d1      	adds	r1, r2, r3
 8005d4c:	1d3b      	adds	r3, r7, #4
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	69b8      	ldr	r0, [r7, #24]
 8005d54:	f7ff ff70 	bl	8005c38 <prvInsertTimerInActiveList>
 8005d58:	1e03      	subs	r3, r0, #0
 8005d5a:	d060      	beq.n	8005e1e <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	2228      	movs	r2, #40	@ 0x28
 8005d60:	5c9b      	ldrb	r3, [r3, r2]
 8005d62:	001a      	movs	r2, r3
 8005d64:	2304      	movs	r3, #4
 8005d66:	4013      	ands	r3, r2
 8005d68:	d00a      	beq.n	8005d80 <prvProcessReceivedCommands+0xc4>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8005d6a:	1d3b      	adds	r3, r7, #4
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	18d1      	adds	r1, r2, r3
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	0018      	movs	r0, r3
 8005d7a:	f7ff fe69 	bl	8005a50 <prvReloadTimer>
 8005d7e:	e008      	b.n	8005d92 <prvProcessReceivedCommands+0xd6>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	2228      	movs	r2, #40	@ 0x28
 8005d84:	5c9b      	ldrb	r3, [r3, r2]
 8005d86:	2201      	movs	r2, #1
 8005d88:	4393      	bics	r3, r2
 8005d8a:	b2d9      	uxtb	r1, r3
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	2228      	movs	r2, #40	@ 0x28
 8005d90:	5499      	strb	r1, [r3, r2]
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	69ba      	ldr	r2, [r7, #24]
 8005d98:	0010      	movs	r0, r2
 8005d9a:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8005d9c:	e03f      	b.n	8005e1e <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	2228      	movs	r2, #40	@ 0x28
 8005da2:	5c9b      	ldrb	r3, [r3, r2]
 8005da4:	2201      	movs	r2, #1
 8005da6:	4393      	bics	r3, r2
 8005da8:	b2d9      	uxtb	r1, r3
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	2228      	movs	r2, #40	@ 0x28
 8005dae:	5499      	strb	r1, [r3, r2]
                        break;
 8005db0:	e036      	b.n	8005e20 <prvProcessReceivedCommands+0x164>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	2228      	movs	r2, #40	@ 0x28
 8005db6:	5c9b      	ldrb	r3, [r3, r2]
 8005db8:	2201      	movs	r2, #1
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	b2d9      	uxtb	r1, r3
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	2228      	movs	r2, #40	@ 0x28
 8005dc2:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005dc4:	1d3b      	adds	r3, r7, #4
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	699b      	ldr	r3, [r3, #24]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d102      	bne.n	8005dda <prvProcessReceivedCommands+0x11e>
 8005dd4:	b672      	cpsid	i
 8005dd6:	46c0      	nop			@ (mov r8, r8)
 8005dd8:	e7fd      	b.n	8005dd6 <prvProcessReceivedCommands+0x11a>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	699a      	ldr	r2, [r3, #24]
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	18d1      	adds	r1, r2, r3
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	69b8      	ldr	r0, [r7, #24]
 8005de8:	f7ff ff26 	bl	8005c38 <prvInsertTimerInActiveList>
                        break;
 8005dec:	e018      	b.n	8005e20 <prvProcessReceivedCommands+0x164>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	2228      	movs	r2, #40	@ 0x28
 8005df2:	5c9b      	ldrb	r3, [r3, r2]
 8005df4:	001a      	movs	r2, r3
 8005df6:	2302      	movs	r3, #2
 8005df8:	4013      	ands	r3, r2
 8005dfa:	d104      	bne.n	8005e06 <prvProcessReceivedCommands+0x14a>
                            {
                                vPortFree( pxTimer );
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	0018      	movs	r0, r3
 8005e00:	f000 fa76 	bl	80062f0 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005e04:	e00c      	b.n	8005e20 <prvProcessReceivedCommands+0x164>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	2228      	movs	r2, #40	@ 0x28
 8005e0a:	5c9b      	ldrb	r3, [r3, r2]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	4393      	bics	r3, r2
 8005e10:	b2d9      	uxtb	r1, r3
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	2228      	movs	r2, #40	@ 0x28
 8005e16:	5499      	strb	r1, [r3, r2]
                        break;
 8005e18:	e002      	b.n	8005e20 <prvProcessReceivedCommands+0x164>

                    default:
                        /* Don't expect to get here. */
                        break;
 8005e1a:	46c0      	nop			@ (mov r8, r8)
 8005e1c:	e000      	b.n	8005e20 <prvProcessReceivedCommands+0x164>
                        break;
 8005e1e:	46c0      	nop			@ (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e20:	4b08      	ldr	r3, [pc, #32]	@ (8005e44 <prvProcessReceivedCommands+0x188>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	1d39      	adds	r1, r7, #4
 8005e26:	2200      	movs	r2, #0
 8005e28:	0018      	movs	r0, r3
 8005e2a:	f7fe f948 	bl	80040be <xQueueReceive>
 8005e2e:	1e03      	subs	r3, r0, #0
 8005e30:	d000      	beq.n	8005e34 <prvProcessReceivedCommands+0x178>
 8005e32:	e747      	b.n	8005cc4 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8005e34:	46c0      	nop			@ (mov r8, r8)
 8005e36:	46c0      	nop			@ (mov r8, r8)
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	b008      	add	sp, #32
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	46c0      	nop			@ (mov r8, r8)
 8005e40:	08006668 	.word	0x08006668
 8005e44:	20000be4 	.word	0x20000be4

08005e48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e4e:	e00b      	b.n	8005e68 <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e50:	4b0f      	ldr	r3, [pc, #60]	@ (8005e90 <prvSwitchTimerLists+0x48>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	425a      	negs	r2, r3
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	0011      	movs	r1, r2
 8005e62:	0018      	movs	r0, r3
 8005e64:	f7ff fe16 	bl	8005a94 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e68:	4b09      	ldr	r3, [pc, #36]	@ (8005e90 <prvSwitchTimerLists+0x48>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1ee      	bne.n	8005e50 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8005e72:	4b07      	ldr	r3, [pc, #28]	@ (8005e90 <prvSwitchTimerLists+0x48>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8005e78:	4b06      	ldr	r3, [pc, #24]	@ (8005e94 <prvSwitchTimerLists+0x4c>)
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	4b04      	ldr	r3, [pc, #16]	@ (8005e90 <prvSwitchTimerLists+0x48>)
 8005e7e:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 8005e80:	4b04      	ldr	r3, [pc, #16]	@ (8005e94 <prvSwitchTimerLists+0x4c>)
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	601a      	str	r2, [r3, #0]
    }
 8005e86:	46c0      	nop			@ (mov r8, r8)
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	b002      	add	sp, #8
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	46c0      	nop			@ (mov r8, r8)
 8005e90:	20000bdc 	.word	0x20000bdc
 8005e94:	20000be0 	.word	0x20000be0

08005e98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005e9e:	f000 f8d7 	bl	8006050 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005ea2:	4b16      	ldr	r3, [pc, #88]	@ (8005efc <prvCheckForValidListAndQueue+0x64>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d123      	bne.n	8005ef2 <prvCheckForValidListAndQueue+0x5a>
            {
                vListInitialise( &xActiveTimerList1 );
 8005eaa:	4b15      	ldr	r3, [pc, #84]	@ (8005f00 <prvCheckForValidListAndQueue+0x68>)
 8005eac:	0018      	movs	r0, r3
 8005eae:	f7fd fe61 	bl	8003b74 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005eb2:	4b14      	ldr	r3, [pc, #80]	@ (8005f04 <prvCheckForValidListAndQueue+0x6c>)
 8005eb4:	0018      	movs	r0, r3
 8005eb6:	f7fd fe5d 	bl	8003b74 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005eba:	4b13      	ldr	r3, [pc, #76]	@ (8005f08 <prvCheckForValidListAndQueue+0x70>)
 8005ebc:	4a10      	ldr	r2, [pc, #64]	@ (8005f00 <prvCheckForValidListAndQueue+0x68>)
 8005ebe:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8005ec0:	4b12      	ldr	r3, [pc, #72]	@ (8005f0c <prvCheckForValidListAndQueue+0x74>)
 8005ec2:	4a10      	ldr	r2, [pc, #64]	@ (8005f04 <prvCheckForValidListAndQueue+0x6c>)
 8005ec4:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005ec6:	4b12      	ldr	r3, [pc, #72]	@ (8005f10 <prvCheckForValidListAndQueue+0x78>)
 8005ec8:	4a12      	ldr	r2, [pc, #72]	@ (8005f14 <prvCheckForValidListAndQueue+0x7c>)
 8005eca:	2100      	movs	r1, #0
 8005ecc:	9100      	str	r1, [sp, #0]
 8005ece:	2110      	movs	r1, #16
 8005ed0:	200a      	movs	r0, #10
 8005ed2:	f7fd ff61 	bl	8003d98 <xQueueGenericCreateStatic>
 8005ed6:	0002      	movs	r2, r0
 8005ed8:	4b08      	ldr	r3, [pc, #32]	@ (8005efc <prvCheckForValidListAndQueue+0x64>)
 8005eda:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8005edc:	4b07      	ldr	r3, [pc, #28]	@ (8005efc <prvCheckForValidListAndQueue+0x64>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d006      	beq.n	8005ef2 <prvCheckForValidListAndQueue+0x5a>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005ee4:	4b05      	ldr	r3, [pc, #20]	@ (8005efc <prvCheckForValidListAndQueue+0x64>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a0b      	ldr	r2, [pc, #44]	@ (8005f18 <prvCheckForValidListAndQueue+0x80>)
 8005eea:	0011      	movs	r1, r2
 8005eec:	0018      	movs	r0, r3
 8005eee:	f7fe fba9 	bl	8004644 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005ef2:	f000 f8bf 	bl	8006074 <vPortExitCritical>
    }
 8005ef6:	46c0      	nop			@ (mov r8, r8)
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	20000be4 	.word	0x20000be4
 8005f00:	20000bb4 	.word	0x20000bb4
 8005f04:	20000bc8 	.word	0x20000bc8
 8005f08:	20000bdc 	.word	0x20000bdc
 8005f0c:	20000be0 	.word	0x20000be0
 8005f10:	20000c90 	.word	0x20000c90
 8005f14:	20000bf0 	.word	0x20000bf0
 8005f18:	08006594 	.word	0x08006594

08005f1c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	3b04      	subs	r3, #4
 8005f2c:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2280      	movs	r2, #128	@ 0x80
 8005f32:	0452      	lsls	r2, r2, #17
 8005f34:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	3b04      	subs	r3, #4
 8005f3a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	3b04      	subs	r3, #4
 8005f46:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 8005f48:	4a08      	ldr	r2, [pc, #32]	@ (8005f6c <pxPortInitialiseStack+0x50>)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	3b14      	subs	r3, #20
 8005f52:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	3b20      	subs	r3, #32
 8005f5e:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005f60:	68fb      	ldr	r3, [r7, #12]
}
 8005f62:	0018      	movs	r0, r3
 8005f64:	46bd      	mov	sp, r7
 8005f66:	b004      	add	sp, #16
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	46c0      	nop			@ (mov r8, r8)
 8005f6c:	08005f71 	.word	0x08005f71

08005f70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8005f76:	2300      	movs	r3, #0
 8005f78:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005f7a:	4b08      	ldr	r3, [pc, #32]	@ (8005f9c <prvTaskExitError+0x2c>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	d002      	beq.n	8005f88 <prvTaskExitError+0x18>
 8005f82:	b672      	cpsid	i
 8005f84:	46c0      	nop			@ (mov r8, r8)
 8005f86:	e7fd      	b.n	8005f84 <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 8005f88:	b672      	cpsid	i

    while( ulDummy == 0 )
 8005f8a:	46c0      	nop			@ (mov r8, r8)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d0fc      	beq.n	8005f8c <prvTaskExitError+0x1c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005f92:	46c0      	nop			@ (mov r8, r8)
 8005f94:	46c0      	nop			@ (mov r8, r8)
 8005f96:	46bd      	mov	sp, r7
 8005f98:	b002      	add	sp, #8
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	20000024 	.word	0x20000024

08005fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 8005fa4:	46c0      	nop			@ (mov r8, r8)
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	0000      	movs	r0, r0
 8005fac:	0000      	movs	r0, r0
	...

08005fb0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 8005fb0:	4a0b      	ldr	r2, [pc, #44]	@ (8005fe0 <pxCurrentTCBConst2>)
 8005fb2:	6813      	ldr	r3, [r2, #0]
 8005fb4:	6818      	ldr	r0, [r3, #0]
 8005fb6:	3020      	adds	r0, #32
 8005fb8:	f380 8809 	msr	PSP, r0
 8005fbc:	2002      	movs	r0, #2
 8005fbe:	f380 8814 	msr	CONTROL, r0
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005fc8:	46ae      	mov	lr, r5
 8005fca:	bc08      	pop	{r3}
 8005fcc:	bc04      	pop	{r2}
 8005fce:	b662      	cpsie	i
 8005fd0:	4718      	bx	r3
 8005fd2:	46c0      	nop			@ (mov r8, r8)
 8005fd4:	46c0      	nop			@ (mov r8, r8)
 8005fd6:	46c0      	nop			@ (mov r8, r8)
 8005fd8:	46c0      	nop			@ (mov r8, r8)
 8005fda:	46c0      	nop			@ (mov r8, r8)
 8005fdc:	46c0      	nop			@ (mov r8, r8)
 8005fde:	46c0      	nop			@ (mov r8, r8)

08005fe0 <pxCurrentTCBConst2>:
 8005fe0:	200006b4 	.word	0x200006b4
        "   bx   r3                     \n"/* Finally, jump to the user defined task code. */
        "                               \n"
        "   .align 4                    \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB   "
        );
}
 8005fe4:	46c0      	nop			@ (mov r8, r8)
 8005fe6:	46c0      	nop			@ (mov r8, r8)

08005fe8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005fec:	4b0e      	ldr	r3, [pc, #56]	@ (8006028 <xPortStartScheduler+0x40>)
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	4b0d      	ldr	r3, [pc, #52]	@ (8006028 <xPortStartScheduler+0x40>)
 8005ff2:	21ff      	movs	r1, #255	@ 0xff
 8005ff4:	0409      	lsls	r1, r1, #16
 8005ff6:	430a      	orrs	r2, r1
 8005ff8:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8006028 <xPortStartScheduler+0x40>)
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8006028 <xPortStartScheduler+0x40>)
 8006000:	21ff      	movs	r1, #255	@ 0xff
 8006002:	0609      	lsls	r1, r1, #24
 8006004:	430a      	orrs	r2, r1
 8006006:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006008:	f000 f898 	bl	800613c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800600c:	4b07      	ldr	r3, [pc, #28]	@ (800602c <xPortStartScheduler+0x44>)
 800600e:	2200      	movs	r2, #0
 8006010:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 8006012:	f7ff ffcd 	bl	8005fb0 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006016:	f7fe ffcd 	bl	8004fb4 <vTaskSwitchContext>
    prvTaskExitError();
 800601a:	f7ff ffa9 	bl	8005f70 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800601e:	2300      	movs	r3, #0
}
 8006020:	0018      	movs	r0, r3
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	46c0      	nop			@ (mov r8, r8)
 8006028:	e000ed20 	.word	0xe000ed20
 800602c:	20000024 	.word	0x20000024

08006030 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8006030:	b580      	push	{r7, lr}
 8006032:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006034:	4b05      	ldr	r3, [pc, #20]	@ (800604c <vPortYield+0x1c>)
 8006036:	2280      	movs	r2, #128	@ 0x80
 8006038:	0552      	lsls	r2, r2, #21
 800603a:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800603c:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8006040:	f3bf 8f6f 	isb	sy
}
 8006044:	46c0      	nop			@ (mov r8, r8)
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	46c0      	nop			@ (mov r8, r8)
 800604c:	e000ed04 	.word	0xe000ed04

08006050 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006050:	b580      	push	{r7, lr}
 8006052:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8006054:	b672      	cpsid	i
    uxCriticalNesting++;
 8006056:	4b06      	ldr	r3, [pc, #24]	@ (8006070 <vPortEnterCritical+0x20>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	1c5a      	adds	r2, r3, #1
 800605c:	4b04      	ldr	r3, [pc, #16]	@ (8006070 <vPortEnterCritical+0x20>)
 800605e:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 8006060:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8006064:	f3bf 8f6f 	isb	sy
}
 8006068:	46c0      	nop			@ (mov r8, r8)
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	46c0      	nop			@ (mov r8, r8)
 8006070:	20000024 	.word	0x20000024

08006074 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006074:	b580      	push	{r7, lr}
 8006076:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8006078:	4b09      	ldr	r3, [pc, #36]	@ (80060a0 <vPortExitCritical+0x2c>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d102      	bne.n	8006086 <vPortExitCritical+0x12>
 8006080:	b672      	cpsid	i
 8006082:	46c0      	nop			@ (mov r8, r8)
 8006084:	e7fd      	b.n	8006082 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8006086:	4b06      	ldr	r3, [pc, #24]	@ (80060a0 <vPortExitCritical+0x2c>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	1e5a      	subs	r2, r3, #1
 800608c:	4b04      	ldr	r3, [pc, #16]	@ (80060a0 <vPortExitCritical+0x2c>)
 800608e:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 8006090:	4b03      	ldr	r3, [pc, #12]	@ (80060a0 <vPortExitCritical+0x2c>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d100      	bne.n	800609a <vPortExitCritical+0x26>
    {
        portENABLE_INTERRUPTS();
 8006098:	b662      	cpsie	i
    }
}
 800609a:	46c0      	nop			@ (mov r8, r8)
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	20000024 	.word	0x20000024

080060a4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 80060a4:	f3ef 8010 	mrs	r0, PRIMASK
 80060a8:	b672      	cpsid	i
 80060aa:	4770      	bx	lr
        " mrs r0, PRIMASK   \n"
        " cpsid i           \n"
        " bx lr               "
        ::: "memory"
        );
}
 80060ac:	46c0      	nop			@ (mov r8, r8)
 80060ae:	0018      	movs	r0, r3

080060b0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 80060b0:	f380 8810 	msr	PRIMASK, r0
 80060b4:	4770      	bx	lr
        " msr PRIMASK, r0   \n"
        " bx lr               "
        ::: "memory"
        );
}
 80060b6:	46c0      	nop			@ (mov r8, r8)
	...

080060c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80060c0:	f3ef 8009 	mrs	r0, PSP
 80060c4:	4b0e      	ldr	r3, [pc, #56]	@ (8006100 <pxCurrentTCBConst>)
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	3820      	subs	r0, #32
 80060ca:	6010      	str	r0, [r2, #0]
 80060cc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80060ce:	4644      	mov	r4, r8
 80060d0:	464d      	mov	r5, r9
 80060d2:	4656      	mov	r6, sl
 80060d4:	465f      	mov	r7, fp
 80060d6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80060d8:	b508      	push	{r3, lr}
 80060da:	b672      	cpsid	i
 80060dc:	f7fe ff6a 	bl	8004fb4 <vTaskSwitchContext>
 80060e0:	b662      	cpsie	i
 80060e2:	bc0c      	pop	{r2, r3}
 80060e4:	6811      	ldr	r1, [r2, #0]
 80060e6:	6808      	ldr	r0, [r1, #0]
 80060e8:	3010      	adds	r0, #16
 80060ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80060ec:	46a0      	mov	r8, r4
 80060ee:	46a9      	mov	r9, r5
 80060f0:	46b2      	mov	sl, r6
 80060f2:	46bb      	mov	fp, r7
 80060f4:	f380 8809 	msr	PSP, r0
 80060f8:	3820      	subs	r0, #32
 80060fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80060fc:	4718      	bx	r3
 80060fe:	46c0      	nop			@ (mov r8, r8)

08006100 <pxCurrentTCBConst>:
 8006100:	200006b4 	.word	0x200006b4
        "   bx r3                               \n"
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB    "
    );
}
 8006104:	46c0      	nop			@ (mov r8, r8)
 8006106:	46c0      	nop			@ (mov r8, r8)

08006108 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800610e:	f7ff ffc9 	bl	80060a4 <ulSetInterruptMaskFromISR>
 8006112:	0003      	movs	r3, r0
 8006114:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006116:	f7fe fe41 	bl	8004d9c <xTaskIncrementTick>
 800611a:	1e03      	subs	r3, r0, #0
 800611c:	d003      	beq.n	8006126 <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800611e:	4b06      	ldr	r3, [pc, #24]	@ (8006138 <xPortSysTickHandler+0x30>)
 8006120:	2280      	movs	r2, #128	@ 0x80
 8006122:	0552      	lsls	r2, r2, #21
 8006124:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	0018      	movs	r0, r3
 800612a:	f7ff ffc1 	bl	80060b0 <vClearInterruptMaskFromISR>
}
 800612e:	46c0      	nop			@ (mov r8, r8)
 8006130:	46bd      	mov	sp, r7
 8006132:	b002      	add	sp, #8
 8006134:	bd80      	pop	{r7, pc}
 8006136:	46c0      	nop			@ (mov r8, r8)
 8006138:	e000ed04 	.word	0xe000ed04

0800613c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800613c:	b580      	push	{r7, lr}
 800613e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006140:	4b0b      	ldr	r3, [pc, #44]	@ (8006170 <vPortSetupTimerInterrupt+0x34>)
 8006142:	2200      	movs	r2, #0
 8006144:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006146:	4b0b      	ldr	r3, [pc, #44]	@ (8006174 <vPortSetupTimerInterrupt+0x38>)
 8006148:	2200      	movs	r2, #0
 800614a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800614c:	4b0a      	ldr	r3, [pc, #40]	@ (8006178 <vPortSetupTimerInterrupt+0x3c>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	22fa      	movs	r2, #250	@ 0xfa
 8006152:	0091      	lsls	r1, r2, #2
 8006154:	0018      	movs	r0, r3
 8006156:	f7f9 ffd7 	bl	8000108 <__udivsi3>
 800615a:	0003      	movs	r3, r0
 800615c:	001a      	movs	r2, r3
 800615e:	4b07      	ldr	r3, [pc, #28]	@ (800617c <vPortSetupTimerInterrupt+0x40>)
 8006160:	3a01      	subs	r2, #1
 8006162:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006164:	4b02      	ldr	r3, [pc, #8]	@ (8006170 <vPortSetupTimerInterrupt+0x34>)
 8006166:	2207      	movs	r2, #7
 8006168:	601a      	str	r2, [r3, #0]
}
 800616a:	46c0      	nop			@ (mov r8, r8)
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	e000e010 	.word	0xe000e010
 8006174:	e000e018 	.word	0xe000e018
 8006178:	20000000 	.word	0x20000000
 800617c:	e000e014 	.word	0xe000e014

08006180 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b088      	sub	sp, #32
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8006188:	2300      	movs	r3, #0
 800618a:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800618c:	f7fe fd02 	bl	8004b94 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8006190:	4b52      	ldr	r3, [pc, #328]	@ (80062dc <pvPortMalloc+0x15c>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d101      	bne.n	800619c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006198:	f000 f8f2 	bl	8006380 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d021      	beq.n	80061e6 <pvPortMalloc+0x66>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 80061a2:	2308      	movs	r3, #8
 80061a4:	43db      	mvns	r3, r3
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d81a      	bhi.n	80061e2 <pvPortMalloc+0x62>
            {
                xWantedSize += xHeapStructSize;
 80061ac:	2208      	movs	r2, #8
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	189b      	adds	r3, r3, r2
 80061b2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2207      	movs	r2, #7
 80061b8:	4013      	ands	r3, r2
 80061ba:	d014      	beq.n	80061e6 <pvPortMalloc+0x66>
                {
                    /* Byte alignment required. */
                    xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2207      	movs	r2, #7
 80061c0:	4013      	ands	r3, r2
 80061c2:	2208      	movs	r2, #8
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	613b      	str	r3, [r7, #16]

                    if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	43db      	mvns	r3, r3
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d804      	bhi.n	80061dc <pvPortMalloc+0x5c>
                    {
                        xWantedSize += xAdditionalRequiredSize;
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	18d3      	adds	r3, r2, r3
 80061d8:	607b      	str	r3, [r7, #4]
 80061da:	e004      	b.n	80061e6 <pvPortMalloc+0x66>
                    }
                    else
                    {
                        xWantedSize = 0;
 80061dc:	2300      	movs	r3, #0
 80061de:	607b      	str	r3, [r7, #4]
 80061e0:	e001      	b.n	80061e6 <pvPortMalloc+0x66>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 80061e2:	2300      	movs	r3, #0
 80061e4:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	db69      	blt.n	80062c0 <pvPortMalloc+0x140>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d066      	beq.n	80062c0 <pvPortMalloc+0x140>
 80061f2:	4b3b      	ldr	r3, [pc, #236]	@ (80062e0 <pvPortMalloc+0x160>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d861      	bhi.n	80062c0 <pvPortMalloc+0x140>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80061fc:	4b39      	ldr	r3, [pc, #228]	@ (80062e4 <pvPortMalloc+0x164>)
 80061fe:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 8006200:	4b38      	ldr	r3, [pc, #224]	@ (80062e4 <pvPortMalloc+0x164>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006206:	e004      	b.n	8006212 <pvPortMalloc+0x92>
                {
                    pxPreviousBlock = pxBlock;
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	429a      	cmp	r2, r3
 800621a:	d903      	bls.n	8006224 <pvPortMalloc+0xa4>
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1f1      	bne.n	8006208 <pvPortMalloc+0x88>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006224:	4b2d      	ldr	r3, [pc, #180]	@ (80062dc <pvPortMalloc+0x15c>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	69fa      	ldr	r2, [r7, #28]
 800622a:	429a      	cmp	r2, r3
 800622c:	d048      	beq.n	80062c0 <pvPortMalloc+0x140>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2208      	movs	r2, #8
 8006234:	189b      	adds	r3, r3, r2
 8006236:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	685a      	ldr	r2, [r3, #4]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	1ad2      	subs	r2, r2, r3
 8006248:	2308      	movs	r3, #8
 800624a:	005b      	lsls	r3, r3, #1
 800624c:	429a      	cmp	r2, r3
 800624e:	d917      	bls.n	8006280 <pvPortMalloc+0x100>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006250:	69fa      	ldr	r2, [r7, #28]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	18d3      	adds	r3, r2, r3
 8006256:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2207      	movs	r2, #7
 800625c:	4013      	ands	r3, r2
 800625e:	d002      	beq.n	8006266 <pvPortMalloc+0xe6>
 8006260:	b672      	cpsid	i
 8006262:	46c0      	nop			@ (mov r8, r8)
 8006264:	e7fd      	b.n	8006262 <pvPortMalloc+0xe2>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	1ad2      	subs	r2, r2, r3
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	0018      	movs	r0, r3
 800627c:	f000 f8da 	bl	8006434 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006280:	4b17      	ldr	r3, [pc, #92]	@ (80062e0 <pvPortMalloc+0x160>)
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	1ad2      	subs	r2, r2, r3
 800628a:	4b15      	ldr	r3, [pc, #84]	@ (80062e0 <pvPortMalloc+0x160>)
 800628c:	601a      	str	r2, [r3, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800628e:	4b14      	ldr	r3, [pc, #80]	@ (80062e0 <pvPortMalloc+0x160>)
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	4b15      	ldr	r3, [pc, #84]	@ (80062e8 <pvPortMalloc+0x168>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	429a      	cmp	r2, r3
 8006298:	d203      	bcs.n	80062a2 <pvPortMalloc+0x122>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800629a:	4b11      	ldr	r3, [pc, #68]	@ (80062e0 <pvPortMalloc+0x160>)
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	4b12      	ldr	r3, [pc, #72]	@ (80062e8 <pvPortMalloc+0x168>)
 80062a0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	2280      	movs	r2, #128	@ 0x80
 80062a8:	0612      	lsls	r2, r2, #24
 80062aa:	431a      	orrs	r2, r3
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	2200      	movs	r2, #0
 80062b4:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80062b6:	4b0d      	ldr	r3, [pc, #52]	@ (80062ec <pvPortMalloc+0x16c>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	4b0b      	ldr	r3, [pc, #44]	@ (80062ec <pvPortMalloc+0x16c>)
 80062be:	601a      	str	r2, [r3, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80062c0:	f7fe fc74 	bl	8004bac <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	2207      	movs	r2, #7
 80062c8:	4013      	ands	r3, r2
 80062ca:	d002      	beq.n	80062d2 <pvPortMalloc+0x152>
 80062cc:	b672      	cpsid	i
 80062ce:	46c0      	nop			@ (mov r8, r8)
 80062d0:	e7fd      	b.n	80062ce <pvPortMalloc+0x14e>
    return pvReturn;
 80062d2:	697b      	ldr	r3, [r7, #20]
}
 80062d4:	0018      	movs	r0, r3
 80062d6:	46bd      	mov	sp, r7
 80062d8:	b008      	add	sp, #32
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	20001ce8 	.word	0x20001ce8
 80062e0:	20001cec 	.word	0x20001cec
 80062e4:	20001ce0 	.word	0x20001ce0
 80062e8:	20001cf0 	.word	0x20001cf0
 80062ec:	20001cf4 	.word	0x20001cf4

080062f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d036      	beq.n	8006370 <vPortFree+0x80>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8006302:	2308      	movs	r3, #8
 8006304:	425b      	negs	r3, r3
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	18d3      	adds	r3, r2, r3
 800630a:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	db02      	blt.n	800631e <vPortFree+0x2e>
 8006318:	b672      	cpsid	i
 800631a:	46c0      	nop			@ (mov r8, r8)
 800631c:	e7fd      	b.n	800631a <vPortFree+0x2a>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d002      	beq.n	800632c <vPortFree+0x3c>
 8006326:	b672      	cpsid	i
 8006328:	46c0      	nop			@ (mov r8, r8)
 800632a:	e7fd      	b.n	8006328 <vPortFree+0x38>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	2b00      	cmp	r3, #0
 8006332:	da1d      	bge.n	8006370 <vPortFree+0x80>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d119      	bne.n	8006370 <vPortFree+0x80>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	005b      	lsls	r3, r3, #1
 8006342:	085a      	lsrs	r2, r3, #1
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8006348:	f7fe fc24 	bl	8004b94 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	4b09      	ldr	r3, [pc, #36]	@ (8006378 <vPortFree+0x88>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	18d2      	adds	r2, r2, r3
 8006356:	4b08      	ldr	r3, [pc, #32]	@ (8006378 <vPortFree+0x88>)
 8006358:	601a      	str	r2, [r3, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	0018      	movs	r0, r3
 800635e:	f000 f869 	bl	8006434 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006362:	4b06      	ldr	r3, [pc, #24]	@ (800637c <vPortFree+0x8c>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	1c5a      	adds	r2, r3, #1
 8006368:	4b04      	ldr	r3, [pc, #16]	@ (800637c <vPortFree+0x8c>)
 800636a:	601a      	str	r2, [r3, #0]
                }
                ( void ) xTaskResumeAll();
 800636c:	f7fe fc1e 	bl	8004bac <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006370:	46c0      	nop			@ (mov r8, r8)
 8006372:	46bd      	mov	sp, r7
 8006374:	b004      	add	sp, #16
 8006376:	bd80      	pop	{r7, pc}
 8006378:	20001cec 	.word	0x20001cec
 800637c:	20001cf8 	.word	0x20001cf8

08006380 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006386:	2380      	movs	r3, #128	@ 0x80
 8006388:	015b      	lsls	r3, r3, #5
 800638a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800638c:	4b24      	ldr	r3, [pc, #144]	@ (8006420 <prvHeapInit+0xa0>)
 800638e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2207      	movs	r2, #7
 8006394:	4013      	ands	r3, r2
 8006396:	d00c      	beq.n	80063b2 <prvHeapInit+0x32>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	3307      	adds	r3, #7
 800639c:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2207      	movs	r2, #7
 80063a2:	4393      	bics	r3, r2
 80063a4:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	1ad2      	subs	r2, r2, r3
 80063ac:	4b1c      	ldr	r3, [pc, #112]	@ (8006420 <prvHeapInit+0xa0>)
 80063ae:	18d3      	adds	r3, r2, r3
 80063b0:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80063b6:	4b1b      	ldr	r3, [pc, #108]	@ (8006424 <prvHeapInit+0xa4>)
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	601a      	str	r2, [r3, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80063bc:	4b19      	ldr	r3, [pc, #100]	@ (8006424 <prvHeapInit+0xa4>)
 80063be:	2200      	movs	r2, #0
 80063c0:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ( pucAlignedHeap + xTotalHeapSize );
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	18d3      	adds	r3, r2, r3
 80063c8:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80063ca:	2208      	movs	r2, #8
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	1a9b      	subs	r3, r3, r2
 80063d0:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2207      	movs	r2, #7
 80063d6:	4393      	bics	r3, r2
 80063d8:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	4b12      	ldr	r3, [pc, #72]	@ (8006428 <prvHeapInit+0xa8>)
 80063de:	601a      	str	r2, [r3, #0]
    pxEnd->xBlockSize = 0;
 80063e0:	4b11      	ldr	r3, [pc, #68]	@ (8006428 <prvHeapInit+0xa8>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2200      	movs	r2, #0
 80063e6:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80063e8:	4b0f      	ldr	r3, [pc, #60]	@ (8006428 <prvHeapInit+0xa8>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2200      	movs	r2, #0
 80063ee:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	1ad2      	subs	r2, r2, r3
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80063fe:	4b0a      	ldr	r3, [pc, #40]	@ (8006428 <prvHeapInit+0xa8>)
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	4b08      	ldr	r3, [pc, #32]	@ (800642c <prvHeapInit+0xac>)
 800640c:	601a      	str	r2, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	4b07      	ldr	r3, [pc, #28]	@ (8006430 <prvHeapInit+0xb0>)
 8006414:	601a      	str	r2, [r3, #0]
}
 8006416:	46c0      	nop			@ (mov r8, r8)
 8006418:	46bd      	mov	sp, r7
 800641a:	b004      	add	sp, #16
 800641c:	bd80      	pop	{r7, pc}
 800641e:	46c0      	nop			@ (mov r8, r8)
 8006420:	20000ce0 	.word	0x20000ce0
 8006424:	20001ce0 	.word	0x20001ce0
 8006428:	20001ce8 	.word	0x20001ce8
 800642c:	20001cf0 	.word	0x20001cf0
 8006430:	20001cec 	.word	0x20001cec

08006434 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800643c:	4b27      	ldr	r3, [pc, #156]	@ (80064dc <prvInsertBlockIntoFreeList+0xa8>)
 800643e:	60fb      	str	r3, [r7, #12]
 8006440:	e002      	b.n	8006448 <prvInsertBlockIntoFreeList+0x14>
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	60fb      	str	r3, [r7, #12]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	429a      	cmp	r2, r3
 8006450:	d8f7      	bhi.n	8006442 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	18d3      	adds	r3, r2, r3
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	429a      	cmp	r2, r3
 8006462:	d108      	bne.n	8006476 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	685a      	ldr	r2, [r3, #4]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	18d2      	adds	r2, r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	18d2      	adds	r2, r2, r3
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	429a      	cmp	r2, r3
 8006488:	d118      	bne.n	80064bc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	4b14      	ldr	r3, [pc, #80]	@ (80064e0 <prvInsertBlockIntoFreeList+0xac>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	429a      	cmp	r2, r3
 8006494:	d00d      	beq.n	80064b2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685a      	ldr	r2, [r3, #4]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	18d2      	adds	r2, r2, r3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	601a      	str	r2, [r3, #0]
 80064b0:	e008      	b.n	80064c4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80064b2:	4b0b      	ldr	r3, [pc, #44]	@ (80064e0 <prvInsertBlockIntoFreeList+0xac>)
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	e003      	b.n	80064c4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d002      	beq.n	80064d2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80064d2:	46c0      	nop			@ (mov r8, r8)
 80064d4:	46bd      	mov	sp, r7
 80064d6:	b004      	add	sp, #16
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	46c0      	nop			@ (mov r8, r8)
 80064dc:	20001ce0 	.word	0x20001ce0
 80064e0:	20001ce8 	.word	0x20001ce8

080064e4 <memset>:
 80064e4:	0003      	movs	r3, r0
 80064e6:	1882      	adds	r2, r0, r2
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d100      	bne.n	80064ee <memset+0xa>
 80064ec:	4770      	bx	lr
 80064ee:	7019      	strb	r1, [r3, #0]
 80064f0:	3301      	adds	r3, #1
 80064f2:	e7f9      	b.n	80064e8 <memset+0x4>

080064f4 <__libc_init_array>:
 80064f4:	b570      	push	{r4, r5, r6, lr}
 80064f6:	2600      	movs	r6, #0
 80064f8:	4c0c      	ldr	r4, [pc, #48]	@ (800652c <__libc_init_array+0x38>)
 80064fa:	4d0d      	ldr	r5, [pc, #52]	@ (8006530 <__libc_init_array+0x3c>)
 80064fc:	1b64      	subs	r4, r4, r5
 80064fe:	10a4      	asrs	r4, r4, #2
 8006500:	42a6      	cmp	r6, r4
 8006502:	d109      	bne.n	8006518 <__libc_init_array+0x24>
 8006504:	2600      	movs	r6, #0
 8006506:	f000 f823 	bl	8006550 <_init>
 800650a:	4c0a      	ldr	r4, [pc, #40]	@ (8006534 <__libc_init_array+0x40>)
 800650c:	4d0a      	ldr	r5, [pc, #40]	@ (8006538 <__libc_init_array+0x44>)
 800650e:	1b64      	subs	r4, r4, r5
 8006510:	10a4      	asrs	r4, r4, #2
 8006512:	42a6      	cmp	r6, r4
 8006514:	d105      	bne.n	8006522 <__libc_init_array+0x2e>
 8006516:	bd70      	pop	{r4, r5, r6, pc}
 8006518:	00b3      	lsls	r3, r6, #2
 800651a:	58eb      	ldr	r3, [r5, r3]
 800651c:	4798      	blx	r3
 800651e:	3601      	adds	r6, #1
 8006520:	e7ee      	b.n	8006500 <__libc_init_array+0xc>
 8006522:	00b3      	lsls	r3, r6, #2
 8006524:	58eb      	ldr	r3, [r5, r3]
 8006526:	4798      	blx	r3
 8006528:	3601      	adds	r6, #1
 800652a:	e7f2      	b.n	8006512 <__libc_init_array+0x1e>
 800652c:	08006690 	.word	0x08006690
 8006530:	08006690 	.word	0x08006690
 8006534:	08006694 	.word	0x08006694
 8006538:	08006690 	.word	0x08006690

0800653c <memcpy>:
 800653c:	2300      	movs	r3, #0
 800653e:	b510      	push	{r4, lr}
 8006540:	429a      	cmp	r2, r3
 8006542:	d100      	bne.n	8006546 <memcpy+0xa>
 8006544:	bd10      	pop	{r4, pc}
 8006546:	5ccc      	ldrb	r4, [r1, r3]
 8006548:	54c4      	strb	r4, [r0, r3]
 800654a:	3301      	adds	r3, #1
 800654c:	e7f8      	b.n	8006540 <memcpy+0x4>
	...

08006550 <_init>:
 8006550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006552:	46c0      	nop			@ (mov r8, r8)
 8006554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006556:	bc08      	pop	{r3}
 8006558:	469e      	mov	lr, r3
 800655a:	4770      	bx	lr

0800655c <_fini>:
 800655c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800655e:	46c0      	nop			@ (mov r8, r8)
 8006560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006562:	bc08      	pop	{r3}
 8006564:	469e      	mov	lr, r3
 8006566:	4770      	bx	lr
