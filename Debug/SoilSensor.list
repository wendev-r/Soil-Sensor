
SoilSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003048  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003108  08003108  00004108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003188  08003188  00005024  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003188  08003188  00005024  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003188  08003188  00005024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003188  08003188  00004188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800318c  0800318c  0000418c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08003190  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000024  080031b4  00005024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  080031b4  00005158  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bdc4  00000000  00000000  0000504c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c30  00000000  00000000  00010e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  00012a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000076a  00000000  00000000  000133e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014711  00000000  00000000  00013b52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c965  00000000  00000000  00028263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007fe52  00000000  00000000  00034bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4a1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021d4  00000000  00000000  000b4a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000b6c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000024 	.word	0x20000024
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080030f0 	.word	0x080030f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000028 	.word	0x20000028
 8000104:	080030f0 	.word	0x080030f0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fc4b 	bl	8000ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f879 	bl	8000320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f931 	bl	8000494 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000232:	f000 f8bd 	bl	80003b0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8000236:	4b37      	ldr	r3, [pc, #220]	@ (8000314 <main+0xf4>)
 8000238:	0018      	movs	r0, r3
 800023a:	f000 ffcf 	bl	80011dc <HAL_ADC_Start>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800023e:	2000      	movs	r0, #0
 8000240:	f000 fa66 	bl	8000710 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000244:	2101      	movs	r1, #1
 8000246:	2000      	movs	r0, #0
 8000248:	f000 facc 	bl	80007e4 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800024c:	4b32      	ldr	r3, [pc, #200]	@ (8000318 <main+0xf8>)
 800024e:	22e1      	movs	r2, #225	@ 0xe1
 8000250:	0252      	lsls	r2, r2, #9
 8000252:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000254:	4b30      	ldr	r3, [pc, #192]	@ (8000318 <main+0xf8>)
 8000256:	2200      	movs	r2, #0
 8000258:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800025a:	4b2f      	ldr	r3, [pc, #188]	@ (8000318 <main+0xf8>)
 800025c:	2200      	movs	r2, #0
 800025e:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000260:	4b2d      	ldr	r3, [pc, #180]	@ (8000318 <main+0xf8>)
 8000262:	2200      	movs	r2, #0
 8000264:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000266:	4b2c      	ldr	r3, [pc, #176]	@ (8000318 <main+0xf8>)
 8000268:	2200      	movs	r2, #0
 800026a:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800026c:	4b2a      	ldr	r3, [pc, #168]	@ (8000318 <main+0xf8>)
 800026e:	0019      	movs	r1, r3
 8000270:	2000      	movs	r0, #0
 8000272:	f000 fb5d 	bl	8000930 <BSP_COM_Init>
 8000276:	1e03      	subs	r3, r0, #0
 8000278:	d001      	beq.n	800027e <main+0x5e>
  {
    Error_Handler();
 800027a:	f000 f96b 	bl	8000554 <Error_Handler>
//	 moisture = HAL_ADC_GetValue(&hadc1);
//
//	 HAL_Delay(500);


	 ADC_ChannelConfTypeDef sConfig = {0};
 800027e:	003b      	movs	r3, r7
 8000280:	0018      	movs	r0, r3
 8000282:	230c      	movs	r3, #12
 8000284:	001a      	movs	r2, r3
 8000286:	2100      	movs	r1, #0
 8000288:	f002 ff06 	bl	8003098 <memset>

	 // === Read Soil Moisture on ADC1 Channel 0 (PA0) ===
	 sConfig.Channel = ADC_CHANNEL_0;
 800028c:	003b      	movs	r3, r7
 800028e:	2201      	movs	r2, #1
 8000290:	601a      	str	r2, [r3, #0]
	 sConfig.Rank = 1;
 8000292:	003b      	movs	r3, r7
 8000294:	2201      	movs	r2, #1
 8000296:	605a      	str	r2, [r3, #4]
	 sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000298:	003b      	movs	r3, r7
 800029a:	2200      	movs	r2, #0
 800029c:	609a      	str	r2, [r3, #8]
	 HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800029e:	003a      	movs	r2, r7
 80002a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000314 <main+0xf4>)
 80002a2:	0011      	movs	r1, r2
 80002a4:	0018      	movs	r0, r3
 80002a6:	f001 f8bd 	bl	8001424 <HAL_ADC_ConfigChannel>

	 HAL_ADC_Start(&hadc1);
 80002aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000314 <main+0xf4>)
 80002ac:	0018      	movs	r0, r3
 80002ae:	f000 ff95 	bl	80011dc <HAL_ADC_Start>
	 HAL_ADC_PollForConversion(&hadc1, 10);
 80002b2:	4b18      	ldr	r3, [pc, #96]	@ (8000314 <main+0xf4>)
 80002b4:	210a      	movs	r1, #10
 80002b6:	0018      	movs	r0, r3
 80002b8:	f001 f81a 	bl	80012f0 <HAL_ADC_PollForConversion>
	 uint16_t moisture = HAL_ADC_GetValue(&hadc1);
 80002bc:	4b15      	ldr	r3, [pc, #84]	@ (8000314 <main+0xf4>)
 80002be:	0018      	movs	r0, r3
 80002c0:	f001 f8a4 	bl	800140c <HAL_ADC_GetValue>
 80002c4:	0002      	movs	r2, r0
 80002c6:	230e      	movs	r3, #14
 80002c8:	18fb      	adds	r3, r7, r3
 80002ca:	801a      	strh	r2, [r3, #0]
	 HAL_ADC_Stop(&hadc1);
 80002cc:	4b11      	ldr	r3, [pc, #68]	@ (8000314 <main+0xf4>)
 80002ce:	0018      	movs	r0, r3
 80002d0:	f000 ffd2 	bl	8001278 <HAL_ADC_Stop>

	 // === Read Light Sensor on ADC1 Channel 1 (PA1) ===
	 sConfig.Channel = ADC_CHANNEL_1;
 80002d4:	003b      	movs	r3, r7
 80002d6:	4a11      	ldr	r2, [pc, #68]	@ (800031c <main+0xfc>)
 80002d8:	601a      	str	r2, [r3, #0]
	 HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80002da:	003a      	movs	r2, r7
 80002dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000314 <main+0xf4>)
 80002de:	0011      	movs	r1, r2
 80002e0:	0018      	movs	r0, r3
 80002e2:	f001 f89f 	bl	8001424 <HAL_ADC_ConfigChannel>

	 HAL_ADC_Start(&hadc1);
 80002e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000314 <main+0xf4>)
 80002e8:	0018      	movs	r0, r3
 80002ea:	f000 ff77 	bl	80011dc <HAL_ADC_Start>
	 HAL_ADC_PollForConversion(&hadc1, 10);
 80002ee:	4b09      	ldr	r3, [pc, #36]	@ (8000314 <main+0xf4>)
 80002f0:	210a      	movs	r1, #10
 80002f2:	0018      	movs	r0, r3
 80002f4:	f000 fffc 	bl	80012f0 <HAL_ADC_PollForConversion>
	 uint16_t light = HAL_ADC_GetValue(&hadc1);
 80002f8:	4b06      	ldr	r3, [pc, #24]	@ (8000314 <main+0xf4>)
 80002fa:	0018      	movs	r0, r3
 80002fc:	f001 f886 	bl	800140c <HAL_ADC_GetValue>
 8000300:	0002      	movs	r2, r0
 8000302:	230c      	movs	r3, #12
 8000304:	18fb      	adds	r3, r7, r3
 8000306:	801a      	strh	r2, [r3, #0]
	 HAL_ADC_Stop(&hadc1);
 8000308:	4b02      	ldr	r3, [pc, #8]	@ (8000314 <main+0xf4>)
 800030a:	0018      	movs	r0, r3
 800030c:	f000 ffb4 	bl	8001278 <HAL_ADC_Stop>
  {
 8000310:	46c0      	nop			@ (mov r8, r8)
 8000312:	e7b4      	b.n	800027e <main+0x5e>
 8000314:	20000050 	.word	0x20000050
 8000318:	20000040 	.word	0x20000040
 800031c:	04000002 	.word	0x04000002

08000320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000320:	b590      	push	{r4, r7, lr}
 8000322:	b08d      	sub	sp, #52	@ 0x34
 8000324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000326:	2414      	movs	r4, #20
 8000328:	193b      	adds	r3, r7, r4
 800032a:	0018      	movs	r0, r3
 800032c:	231c      	movs	r3, #28
 800032e:	001a      	movs	r2, r3
 8000330:	2100      	movs	r1, #0
 8000332:	f002 feb1 	bl	8003098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000336:	003b      	movs	r3, r7
 8000338:	0018      	movs	r0, r3
 800033a:	2314      	movs	r3, #20
 800033c:	001a      	movs	r2, r3
 800033e:	2100      	movs	r1, #0
 8000340:	f002 feaa 	bl	8003098 <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 8000344:	4b19      	ldr	r3, [pc, #100]	@ (80003ac <SystemClock_Config+0x8c>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	2207      	movs	r2, #7
 800034a:	4393      	bics	r3, r2
 800034c:	001a      	movs	r2, r3
 800034e:	4b17      	ldr	r3, [pc, #92]	@ (80003ac <SystemClock_Config+0x8c>)
 8000350:	2101      	movs	r1, #1
 8000352:	430a      	orrs	r2, r1
 8000354:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000356:	193b      	adds	r3, r7, r4
 8000358:	2201      	movs	r2, #1
 800035a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800035c:	193b      	adds	r3, r7, r4
 800035e:	2280      	movs	r2, #128	@ 0x80
 8000360:	0252      	lsls	r2, r2, #9
 8000362:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000364:	193b      	adds	r3, r7, r4
 8000366:	0018      	movs	r0, r3
 8000368:	f001 fe40 	bl	8001fec <HAL_RCC_OscConfig>
 800036c:	1e03      	subs	r3, r0, #0
 800036e:	d001      	beq.n	8000374 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000370:	f000 f8f0 	bl	8000554 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000374:	003b      	movs	r3, r7
 8000376:	2207      	movs	r2, #7
 8000378:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800037a:	003b      	movs	r3, r7
 800037c:	2201      	movs	r2, #1
 800037e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000380:	003b      	movs	r3, r7
 8000382:	2200      	movs	r2, #0
 8000384:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000386:	003b      	movs	r3, r7
 8000388:	2200      	movs	r2, #0
 800038a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800038c:	003b      	movs	r3, r7
 800038e:	2200      	movs	r2, #0
 8000390:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000392:	003b      	movs	r3, r7
 8000394:	2101      	movs	r1, #1
 8000396:	0018      	movs	r0, r3
 8000398:	f002 f80c 	bl	80023b4 <HAL_RCC_ClockConfig>
 800039c:	1e03      	subs	r3, r0, #0
 800039e:	d001      	beq.n	80003a4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80003a0:	f000 f8d8 	bl	8000554 <Error_Handler>
  }
}
 80003a4:	46c0      	nop			@ (mov r8, r8)
 80003a6:	46bd      	mov	sp, r7
 80003a8:	b00d      	add	sp, #52	@ 0x34
 80003aa:	bd90      	pop	{r4, r7, pc}
 80003ac:	40022000 	.word	0x40022000

080003b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	0018      	movs	r0, r3
 80003ba:	230c      	movs	r3, #12
 80003bc:	001a      	movs	r2, r3
 80003be:	2100      	movs	r1, #0
 80003c0:	f002 fe6a 	bl	8003098 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80003c4:	4b2f      	ldr	r3, [pc, #188]	@ (8000484 <MX_ADC1_Init+0xd4>)
 80003c6:	4a30      	ldr	r2, [pc, #192]	@ (8000488 <MX_ADC1_Init+0xd8>)
 80003c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80003ca:	4b2e      	ldr	r3, [pc, #184]	@ (8000484 <MX_ADC1_Init+0xd4>)
 80003cc:	2280      	movs	r2, #128	@ 0x80
 80003ce:	05d2      	lsls	r2, r2, #23
 80003d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003d2:	4b2c      	ldr	r3, [pc, #176]	@ (8000484 <MX_ADC1_Init+0xd4>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003d8:	4b2a      	ldr	r3, [pc, #168]	@ (8000484 <MX_ADC1_Init+0xd4>)
 80003da:	2200      	movs	r2, #0
 80003dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 80003de:	4b29      	ldr	r3, [pc, #164]	@ (8000484 <MX_ADC1_Init+0xd4>)
 80003e0:	2280      	movs	r2, #128	@ 0x80
 80003e2:	0612      	lsls	r2, r2, #24
 80003e4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003e6:	4b27      	ldr	r3, [pc, #156]	@ (8000484 <MX_ADC1_Init+0xd4>)
 80003e8:	2204      	movs	r2, #4
 80003ea:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003ec:	4b25      	ldr	r3, [pc, #148]	@ (8000484 <MX_ADC1_Init+0xd4>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80003f2:	4b24      	ldr	r3, [pc, #144]	@ (8000484 <MX_ADC1_Init+0xd4>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003f8:	4b22      	ldr	r3, [pc, #136]	@ (8000484 <MX_ADC1_Init+0xd4>)
 80003fa:	2201      	movs	r2, #1
 80003fc:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80003fe:	4b21      	ldr	r3, [pc, #132]	@ (8000484 <MX_ADC1_Init+0xd4>)
 8000400:	2201      	movs	r2, #1
 8000402:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000404:	4b1f      	ldr	r3, [pc, #124]	@ (8000484 <MX_ADC1_Init+0xd4>)
 8000406:	2200      	movs	r2, #0
 8000408:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800040a:	4b1e      	ldr	r3, [pc, #120]	@ (8000484 <MX_ADC1_Init+0xd4>)
 800040c:	2200      	movs	r2, #0
 800040e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000410:	4b1c      	ldr	r3, [pc, #112]	@ (8000484 <MX_ADC1_Init+0xd4>)
 8000412:	222c      	movs	r2, #44	@ 0x2c
 8000414:	2100      	movs	r1, #0
 8000416:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000418:	4b1a      	ldr	r3, [pc, #104]	@ (8000484 <MX_ADC1_Init+0xd4>)
 800041a:	2200      	movs	r2, #0
 800041c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800041e:	4b19      	ldr	r3, [pc, #100]	@ (8000484 <MX_ADC1_Init+0xd4>)
 8000420:	2200      	movs	r2, #0
 8000422:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000424:	4b17      	ldr	r3, [pc, #92]	@ (8000484 <MX_ADC1_Init+0xd4>)
 8000426:	223c      	movs	r2, #60	@ 0x3c
 8000428:	2100      	movs	r1, #0
 800042a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800042c:	4b15      	ldr	r3, [pc, #84]	@ (8000484 <MX_ADC1_Init+0xd4>)
 800042e:	2200      	movs	r2, #0
 8000430:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000432:	4b14      	ldr	r3, [pc, #80]	@ (8000484 <MX_ADC1_Init+0xd4>)
 8000434:	0018      	movs	r0, r3
 8000436:	f000 fd2b 	bl	8000e90 <HAL_ADC_Init>
 800043a:	1e03      	subs	r3, r0, #0
 800043c:	d001      	beq.n	8000442 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800043e:	f000 f889 	bl	8000554 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	4a11      	ldr	r2, [pc, #68]	@ (800048c <MX_ADC1_Init+0xdc>)
 8000446:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	2201      	movs	r2, #1
 800044c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800044e:	1d3a      	adds	r2, r7, #4
 8000450:	4b0c      	ldr	r3, [pc, #48]	@ (8000484 <MX_ADC1_Init+0xd4>)
 8000452:	0011      	movs	r1, r2
 8000454:	0018      	movs	r0, r3
 8000456:	f000 ffe5 	bl	8001424 <HAL_ADC_ConfigChannel>
 800045a:	1e03      	subs	r3, r0, #0
 800045c:	d001      	beq.n	8000462 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800045e:	f000 f879 	bl	8000554 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	4a0a      	ldr	r2, [pc, #40]	@ (8000490 <MX_ADC1_Init+0xe0>)
 8000466:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000468:	1d3a      	adds	r2, r7, #4
 800046a:	4b06      	ldr	r3, [pc, #24]	@ (8000484 <MX_ADC1_Init+0xd4>)
 800046c:	0011      	movs	r1, r2
 800046e:	0018      	movs	r0, r3
 8000470:	f000 ffd8 	bl	8001424 <HAL_ADC_ConfigChannel>
 8000474:	1e03      	subs	r3, r0, #0
 8000476:	d001      	beq.n	800047c <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000478:	f000 f86c 	bl	8000554 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800047c:	46c0      	nop			@ (mov r8, r8)
 800047e:	46bd      	mov	sp, r7
 8000480:	b004      	add	sp, #16
 8000482:	bd80      	pop	{r7, pc}
 8000484:	20000050 	.word	0x20000050
 8000488:	40012400 	.word	0x40012400
 800048c:	2c000800 	.word	0x2c000800
 8000490:	30001000 	.word	0x30001000

08000494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000494:	b590      	push	{r4, r7, lr}
 8000496:	b089      	sub	sp, #36	@ 0x24
 8000498:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049a:	240c      	movs	r4, #12
 800049c:	193b      	adds	r3, r7, r4
 800049e:	0018      	movs	r0, r3
 80004a0:	2314      	movs	r3, #20
 80004a2:	001a      	movs	r2, r3
 80004a4:	2100      	movs	r1, #0
 80004a6:	f002 fdf7 	bl	8003098 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004aa:	4b29      	ldr	r3, [pc, #164]	@ (8000550 <MX_GPIO_Init+0xbc>)
 80004ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004ae:	4b28      	ldr	r3, [pc, #160]	@ (8000550 <MX_GPIO_Init+0xbc>)
 80004b0:	2104      	movs	r1, #4
 80004b2:	430a      	orrs	r2, r1
 80004b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80004b6:	4b26      	ldr	r3, [pc, #152]	@ (8000550 <MX_GPIO_Init+0xbc>)
 80004b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004ba:	2204      	movs	r2, #4
 80004bc:	4013      	ands	r3, r2
 80004be:	60bb      	str	r3, [r7, #8]
 80004c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004c2:	4b23      	ldr	r3, [pc, #140]	@ (8000550 <MX_GPIO_Init+0xbc>)
 80004c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004c6:	4b22      	ldr	r3, [pc, #136]	@ (8000550 <MX_GPIO_Init+0xbc>)
 80004c8:	2120      	movs	r1, #32
 80004ca:	430a      	orrs	r2, r1
 80004cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80004ce:	4b20      	ldr	r3, [pc, #128]	@ (8000550 <MX_GPIO_Init+0xbc>)
 80004d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004d2:	2220      	movs	r2, #32
 80004d4:	4013      	ands	r3, r2
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004da:	4b1d      	ldr	r3, [pc, #116]	@ (8000550 <MX_GPIO_Init+0xbc>)
 80004dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004de:	4b1c      	ldr	r3, [pc, #112]	@ (8000550 <MX_GPIO_Init+0xbc>)
 80004e0:	2101      	movs	r1, #1
 80004e2:	430a      	orrs	r2, r1
 80004e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80004e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000550 <MX_GPIO_Init+0xbc>)
 80004e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004ea:	2201      	movs	r2, #1
 80004ec:	4013      	ands	r3, r2
 80004ee:	603b      	str	r3, [r7, #0]
 80004f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80004f2:	23a0      	movs	r3, #160	@ 0xa0
 80004f4:	05db      	lsls	r3, r3, #23
 80004f6:	2200      	movs	r2, #0
 80004f8:	2101      	movs	r1, #1
 80004fa:	0018      	movs	r0, r3
 80004fc:	f001 fd58 	bl	8001fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000500:	193b      	adds	r3, r7, r4
 8000502:	2201      	movs	r2, #1
 8000504:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000506:	193b      	adds	r3, r7, r4
 8000508:	2201      	movs	r2, #1
 800050a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050c:	193b      	adds	r3, r7, r4
 800050e:	2200      	movs	r2, #0
 8000510:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000512:	193b      	adds	r3, r7, r4
 8000514:	2200      	movs	r2, #0
 8000516:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000518:	193a      	adds	r2, r7, r4
 800051a:	23a0      	movs	r3, #160	@ 0xa0
 800051c:	05db      	lsls	r3, r3, #23
 800051e:	0011      	movs	r1, r2
 8000520:	0018      	movs	r0, r3
 8000522:	f001 fbd3 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000526:	193b      	adds	r3, r7, r4
 8000528:	2240      	movs	r2, #64	@ 0x40
 800052a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800052c:	193b      	adds	r3, r7, r4
 800052e:	2200      	movs	r2, #0
 8000530:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	193b      	adds	r3, r7, r4
 8000534:	2200      	movs	r2, #0
 8000536:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000538:	193a      	adds	r2, r7, r4
 800053a:	23a0      	movs	r3, #160	@ 0xa0
 800053c:	05db      	lsls	r3, r3, #23
 800053e:	0011      	movs	r1, r2
 8000540:	0018      	movs	r0, r3
 8000542:	f001 fbc3 	bl	8001ccc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000546:	46c0      	nop			@ (mov r8, r8)
 8000548:	46bd      	mov	sp, r7
 800054a:	b009      	add	sp, #36	@ 0x24
 800054c:	bd90      	pop	{r4, r7, pc}
 800054e:	46c0      	nop			@ (mov r8, r8)
 8000550:	40021000 	.word	0x40021000

08000554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000558:	b672      	cpsid	i
}
 800055a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800055c:	46c0      	nop			@ (mov r8, r8)
 800055e:	e7fd      	b.n	800055c <Error_Handler+0x8>

08000560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000566:	4b0f      	ldr	r3, [pc, #60]	@ (80005a4 <HAL_MspInit+0x44>)
 8000568:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800056a:	4b0e      	ldr	r3, [pc, #56]	@ (80005a4 <HAL_MspInit+0x44>)
 800056c:	2101      	movs	r1, #1
 800056e:	430a      	orrs	r2, r1
 8000570:	641a      	str	r2, [r3, #64]	@ 0x40
 8000572:	4b0c      	ldr	r3, [pc, #48]	@ (80005a4 <HAL_MspInit+0x44>)
 8000574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000576:	2201      	movs	r2, #1
 8000578:	4013      	ands	r3, r2
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800057e:	4b09      	ldr	r3, [pc, #36]	@ (80005a4 <HAL_MspInit+0x44>)
 8000580:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000582:	4b08      	ldr	r3, [pc, #32]	@ (80005a4 <HAL_MspInit+0x44>)
 8000584:	2180      	movs	r1, #128	@ 0x80
 8000586:	0549      	lsls	r1, r1, #21
 8000588:	430a      	orrs	r2, r1
 800058a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800058c:	4b05      	ldr	r3, [pc, #20]	@ (80005a4 <HAL_MspInit+0x44>)
 800058e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000590:	2380      	movs	r3, #128	@ 0x80
 8000592:	055b      	lsls	r3, r3, #21
 8000594:	4013      	ands	r3, r2
 8000596:	603b      	str	r3, [r7, #0]
 8000598:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800059a:	46c0      	nop			@ (mov r8, r8)
 800059c:	46bd      	mov	sp, r7
 800059e:	b002      	add	sp, #8
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	40021000 	.word	0x40021000

080005a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005a8:	b590      	push	{r4, r7, lr}
 80005aa:	b091      	sub	sp, #68	@ 0x44
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b0:	232c      	movs	r3, #44	@ 0x2c
 80005b2:	18fb      	adds	r3, r7, r3
 80005b4:	0018      	movs	r0, r3
 80005b6:	2314      	movs	r3, #20
 80005b8:	001a      	movs	r2, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	f002 fd6c 	bl	8003098 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005c0:	2410      	movs	r4, #16
 80005c2:	193b      	adds	r3, r7, r4
 80005c4:	0018      	movs	r0, r3
 80005c6:	231c      	movs	r3, #28
 80005c8:	001a      	movs	r2, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	f002 fd64 	bl	8003098 <memset>
  if(hadc->Instance==ADC1)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a20      	ldr	r2, [pc, #128]	@ (8000658 <HAL_ADC_MspInit+0xb0>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d139      	bne.n	800064e <HAL_ADC_MspInit+0xa6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005da:	193b      	adds	r3, r7, r4
 80005dc:	2220      	movs	r2, #32
 80005de:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80005e0:	193b      	adds	r3, r7, r4
 80005e2:	2200      	movs	r2, #0
 80005e4:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005e6:	193b      	adds	r3, r7, r4
 80005e8:	0018      	movs	r0, r3
 80005ea:	f002 f859 	bl	80026a0 <HAL_RCCEx_PeriphCLKConfig>
 80005ee:	1e03      	subs	r3, r0, #0
 80005f0:	d001      	beq.n	80005f6 <HAL_ADC_MspInit+0x4e>
    {
      Error_Handler();
 80005f2:	f7ff ffaf 	bl	8000554 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80005f6:	4b19      	ldr	r3, [pc, #100]	@ (800065c <HAL_ADC_MspInit+0xb4>)
 80005f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80005fa:	4b18      	ldr	r3, [pc, #96]	@ (800065c <HAL_ADC_MspInit+0xb4>)
 80005fc:	2180      	movs	r1, #128	@ 0x80
 80005fe:	0349      	lsls	r1, r1, #13
 8000600:	430a      	orrs	r2, r1
 8000602:	641a      	str	r2, [r3, #64]	@ 0x40
 8000604:	4b15      	ldr	r3, [pc, #84]	@ (800065c <HAL_ADC_MspInit+0xb4>)
 8000606:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000608:	2380      	movs	r3, #128	@ 0x80
 800060a:	035b      	lsls	r3, r3, #13
 800060c:	4013      	ands	r3, r2
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	4b12      	ldr	r3, [pc, #72]	@ (800065c <HAL_ADC_MspInit+0xb4>)
 8000614:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000616:	4b11      	ldr	r3, [pc, #68]	@ (800065c <HAL_ADC_MspInit+0xb4>)
 8000618:	2101      	movs	r1, #1
 800061a:	430a      	orrs	r2, r1
 800061c:	635a      	str	r2, [r3, #52]	@ 0x34
 800061e:	4b0f      	ldr	r3, [pc, #60]	@ (800065c <HAL_ADC_MspInit+0xb4>)
 8000620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000622:	2201      	movs	r2, #1
 8000624:	4013      	ands	r3, r2
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA11 [PA9]     ------> ADC1_IN11
    PA12 [PA10]     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800062a:	212c      	movs	r1, #44	@ 0x2c
 800062c:	187b      	adds	r3, r7, r1
 800062e:	22c0      	movs	r2, #192	@ 0xc0
 8000630:	0152      	lsls	r2, r2, #5
 8000632:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2203      	movs	r2, #3
 8000638:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	187b      	adds	r3, r7, r1
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000640:	187a      	adds	r2, r7, r1
 8000642:	23a0      	movs	r3, #160	@ 0xa0
 8000644:	05db      	lsls	r3, r3, #23
 8000646:	0011      	movs	r1, r2
 8000648:	0018      	movs	r0, r3
 800064a:	f001 fb3f 	bl	8001ccc <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800064e:	46c0      	nop			@ (mov r8, r8)
 8000650:	46bd      	mov	sp, r7
 8000652:	b011      	add	sp, #68	@ 0x44
 8000654:	bd90      	pop	{r4, r7, pc}
 8000656:	46c0      	nop			@ (mov r8, r8)
 8000658:	40012400 	.word	0x40012400
 800065c:	40021000 	.word	0x40021000

08000660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000664:	46c0      	nop			@ (mov r8, r8)
 8000666:	e7fd      	b.n	8000664 <NMI_Handler+0x4>

08000668 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800066c:	46c0      	nop			@ (mov r8, r8)
 800066e:	e7fd      	b.n	800066c <HardFault_Handler+0x4>

08000670 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000674:	46c0      	nop			@ (mov r8, r8)
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}

0800067a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800067a:	b580      	push	{r7, lr}
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800067e:	46c0      	nop			@ (mov r8, r8)
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000688:	f000 fa7c 	bl	8000b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800068c:	46c0      	nop			@ (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000696:	2000      	movs	r0, #0
 8000698:	f000 f928 	bl	80008ec <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800069c:	46c0      	nop			@ (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
	...

080006a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006a8:	4b03      	ldr	r3, [pc, #12]	@ (80006b8 <SystemInit+0x14>)
 80006aa:	2280      	movs	r2, #128	@ 0x80
 80006ac:	0512      	lsls	r2, r2, #20
 80006ae:	609a      	str	r2, [r3, #8]
#endif
}
 80006b0:	46c0      	nop			@ (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	46c0      	nop			@ (mov r8, r8)
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006bc:	480d      	ldr	r0, [pc, #52]	@ (80006f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006c0:	f7ff fff0 	bl	80006a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80006c4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80006c6:	e003      	b.n	80006d0 <LoopCopyDataInit>

080006c8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80006c8:	4b0b      	ldr	r3, [pc, #44]	@ (80006f8 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80006ca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80006cc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80006ce:	3104      	adds	r1, #4

080006d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80006d0:	480a      	ldr	r0, [pc, #40]	@ (80006fc <LoopForever+0xa>)
  ldr r3, =_edata
 80006d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000700 <LoopForever+0xe>)
  adds r2, r0, r1
 80006d4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80006d6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80006d8:	d3f6      	bcc.n	80006c8 <CopyDataInit>
  ldr r2, =_sbss
 80006da:	4a0a      	ldr	r2, [pc, #40]	@ (8000704 <LoopForever+0x12>)
  b LoopFillZerobss
 80006dc:	e002      	b.n	80006e4 <LoopFillZerobss>

080006de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006de:	2300      	movs	r3, #0
  str  r3, [r2]
 80006e0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006e2:	3204      	adds	r2, #4

080006e4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80006e4:	4b08      	ldr	r3, [pc, #32]	@ (8000708 <LoopForever+0x16>)
  cmp r2, r3
 80006e6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006e8:	d3f9      	bcc.n	80006de <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80006ea:	f002 fcdd 	bl	80030a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ee:	f7ff fd97 	bl	8000220 <main>

080006f2 <LoopForever>:

LoopForever:
    b LoopForever
 80006f2:	e7fe      	b.n	80006f2 <LoopForever>
  ldr   r0, =_estack
 80006f4:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 80006f8:	08003190 	.word	0x08003190
  ldr r0, =_sdata
 80006fc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000700:	20000024 	.word	0x20000024
  ldr r2, =_sbss
 8000704:	20000024 	.word	0x20000024
  ldr r3, = _ebss
 8000708:	20000158 	.word	0x20000158

0800070c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800070c:	e7fe      	b.n	800070c <ADC1_IRQHandler>
	...

08000710 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08a      	sub	sp, #40	@ 0x28
 8000714:	af00      	add	r7, sp, #0
 8000716:	0002      	movs	r2, r0
 8000718:	1dfb      	adds	r3, r7, #7
 800071a:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 800071c:	2300      	movs	r3, #0
 800071e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;

#if defined (USE_NUCLEO_64)
  if ((Led != LED1)
 8000720:	1dfb      	adds	r3, r7, #7
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d007      	beq.n	8000738 <BSP_LED_Init+0x28>
      && (Led != LED2))
 8000728:	1dfb      	adds	r3, r7, #7
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b01      	cmp	r3, #1
 800072e:	d003      	beq.n	8000738 <BSP_LED_Init+0x28>
#else
  if (Led != LED4)
#endif /* defined (USE_NUCLEO_64) */
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000730:	2302      	movs	r3, #2
 8000732:	425b      	negs	r3, r3
 8000734:	627b      	str	r3, [r7, #36]	@ 0x24
 8000736:	e04a      	b.n	80007ce <BSP_LED_Init+0xbe>
  }
  else
  {
    /* Enable the GPIO LED Clock */
#if defined (USE_NUCLEO_64)
    if (Led == LED1)
 8000738:	1dfb      	adds	r3, r7, #7
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d10c      	bne.n	800075a <BSP_LED_Init+0x4a>
    {
      LED1_GPIO_CLK_ENABLE();
 8000740:	4b25      	ldr	r3, [pc, #148]	@ (80007d8 <BSP_LED_Init+0xc8>)
 8000742:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000744:	4b24      	ldr	r3, [pc, #144]	@ (80007d8 <BSP_LED_Init+0xc8>)
 8000746:	2101      	movs	r1, #1
 8000748:	430a      	orrs	r2, r1
 800074a:	635a      	str	r2, [r3, #52]	@ 0x34
 800074c:	4b22      	ldr	r3, [pc, #136]	@ (80007d8 <BSP_LED_Init+0xc8>)
 800074e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000750:	2201      	movs	r2, #1
 8000752:	4013      	ands	r3, r2
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	e00b      	b.n	8000772 <BSP_LED_Init+0x62>
    }
    else
    {
      LED2_GPIO_CLK_ENABLE();
 800075a:	4b1f      	ldr	r3, [pc, #124]	@ (80007d8 <BSP_LED_Init+0xc8>)
 800075c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800075e:	4b1e      	ldr	r3, [pc, #120]	@ (80007d8 <BSP_LED_Init+0xc8>)
 8000760:	2104      	movs	r1, #4
 8000762:	430a      	orrs	r2, r1
 8000764:	635a      	str	r2, [r3, #52]	@ 0x34
 8000766:	4b1c      	ldr	r3, [pc, #112]	@ (80007d8 <BSP_LED_Init+0xc8>)
 8000768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800076a:	2204      	movs	r2, #4
 800076c:	4013      	ands	r3, r2
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
      LED4_GPIO_CLK_ENABLE();
    }
#endif /* defined (USE_NUCLEO_64) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000772:	1dfb      	adds	r3, r7, #7
 8000774:	781a      	ldrb	r2, [r3, #0]
 8000776:	4b19      	ldr	r3, [pc, #100]	@ (80007dc <BSP_LED_Init+0xcc>)
 8000778:	0052      	lsls	r2, r2, #1
 800077a:	5ad3      	ldrh	r3, [r2, r3]
 800077c:	001a      	movs	r2, r3
 800077e:	2110      	movs	r1, #16
 8000780:	187b      	adds	r3, r7, r1
 8000782:	601a      	str	r2, [r3, #0]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000784:	187b      	adds	r3, r7, r1
 8000786:	2201      	movs	r2, #1
 8000788:	605a      	str	r2, [r3, #4]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800078a:	187b      	adds	r3, r7, r1
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000790:	187b      	adds	r3, r7, r1
 8000792:	2203      	movs	r2, #3
 8000794:	60da      	str	r2, [r3, #12]

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000796:	1dfb      	adds	r3, r7, #7
 8000798:	781a      	ldrb	r2, [r3, #0]
 800079a:	4b11      	ldr	r3, [pc, #68]	@ (80007e0 <BSP_LED_Init+0xd0>)
 800079c:	0092      	lsls	r2, r2, #2
 800079e:	58d3      	ldr	r3, [r2, r3]
 80007a0:	187a      	adds	r2, r7, r1
 80007a2:	0011      	movs	r1, r2
 80007a4:	0018      	movs	r0, r3
 80007a6:	f001 fa91 	bl	8001ccc <HAL_GPIO_Init>
#if defined (USE_NUCLEO_64)
    if (Led == LED2)
 80007aa:	1dfb      	adds	r3, r7, #7
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d10d      	bne.n	80007ce <BSP_LED_Init+0xbe>
    {
     HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN[Led], GPIO_PIN_SET);
 80007b2:	1dfb      	adds	r3, r7, #7
 80007b4:	781a      	ldrb	r2, [r3, #0]
 80007b6:	4b0a      	ldr	r3, [pc, #40]	@ (80007e0 <BSP_LED_Init+0xd0>)
 80007b8:	0092      	lsls	r2, r2, #2
 80007ba:	58d0      	ldr	r0, [r2, r3]
 80007bc:	1dfb      	adds	r3, r7, #7
 80007be:	781a      	ldrb	r2, [r3, #0]
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <BSP_LED_Init+0xcc>)
 80007c2:	0052      	lsls	r2, r2, #1
 80007c4:	5ad3      	ldrh	r3, [r2, r3]
 80007c6:	2201      	movs	r2, #1
 80007c8:	0019      	movs	r1, r3
 80007ca:	f001 fbf1 	bl	8001fb0 <HAL_GPIO_WritePin>
    }
#endif
  }
  return ret;
 80007ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80007d0:	0018      	movs	r0, r3
 80007d2:	46bd      	mov	sp, r7
 80007d4:	b00a      	add	sp, #40	@ 0x28
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40021000 	.word	0x40021000
 80007dc:	08003168 	.word	0x08003168
 80007e0:	20000008 	.word	0x20000008

080007e4 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	0002      	movs	r2, r0
 80007ec:	1dfb      	adds	r3, r7, #7
 80007ee:	701a      	strb	r2, [r3, #0]
 80007f0:	1dbb      	adds	r3, r7, #6
 80007f2:	1c0a      	adds	r2, r1, #0
 80007f4:	701a      	strb	r2, [r3, #0]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80007f6:	4b36      	ldr	r3, [pc, #216]	@ (80008d0 <BSP_PB_Init+0xec>)
 80007f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007fa:	4b35      	ldr	r3, [pc, #212]	@ (80008d0 <BSP_PB_Init+0xec>)
 80007fc:	2104      	movs	r1, #4
 80007fe:	430a      	orrs	r2, r1
 8000800:	635a      	str	r2, [r3, #52]	@ 0x34
 8000802:	4b33      	ldr	r3, [pc, #204]	@ (80008d0 <BSP_PB_Init+0xec>)
 8000804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000806:	2204      	movs	r2, #4
 8000808:	4013      	ands	r3, r2
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800080e:	2380      	movs	r3, #128	@ 0x80
 8000810:	019b      	lsls	r3, r3, #6
 8000812:	001a      	movs	r2, r3
 8000814:	210c      	movs	r1, #12
 8000816:	187b      	adds	r3, r7, r1
 8000818:	601a      	str	r2, [r3, #0]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800081a:	187b      	adds	r3, r7, r1
 800081c:	2201      	movs	r2, #1
 800081e:	609a      	str	r2, [r3, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000820:	187b      	adds	r3, r7, r1
 8000822:	2202      	movs	r2, #2
 8000824:	60da      	str	r2, [r3, #12]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8000826:	1dbb      	adds	r3, r7, #6
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d10d      	bne.n	800084a <BSP_PB_Init+0x66>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2200      	movs	r2, #0
 8000832:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000834:	1dfb      	adds	r3, r7, #7
 8000836:	781a      	ldrb	r2, [r3, #0]
 8000838:	4b26      	ldr	r3, [pc, #152]	@ (80008d4 <BSP_PB_Init+0xf0>)
 800083a:	0092      	lsls	r2, r2, #2
 800083c:	58d3      	ldr	r3, [r2, r3]
 800083e:	187a      	adds	r2, r7, r1
 8000840:	0011      	movs	r1, r2
 8000842:	0018      	movs	r0, r3
 8000844:	f001 fa42 	bl	8001ccc <HAL_GPIO_Init>
 8000848:	e03c      	b.n	80008c4 <BSP_PB_Init+0xe0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 800084a:	210c      	movs	r1, #12
 800084c:	187b      	adds	r3, r7, r1
 800084e:	4a22      	ldr	r2, [pc, #136]	@ (80008d8 <BSP_PB_Init+0xf4>)
 8000850:	605a      	str	r2, [r3, #4]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000852:	1dfb      	adds	r3, r7, #7
 8000854:	781a      	ldrb	r2, [r3, #0]
 8000856:	4b1f      	ldr	r3, [pc, #124]	@ (80008d4 <BSP_PB_Init+0xf0>)
 8000858:	0092      	lsls	r2, r2, #2
 800085a:	58d3      	ldr	r3, [r2, r3]
 800085c:	187a      	adds	r2, r7, r1
 800085e:	0011      	movs	r1, r2
 8000860:	0018      	movs	r0, r3
 8000862:	f001 fa33 	bl	8001ccc <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000866:	1dfb      	adds	r3, r7, #7
 8000868:	781a      	ldrb	r2, [r3, #0]
 800086a:	0013      	movs	r3, r2
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	189b      	adds	r3, r3, r2
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	4a1a      	ldr	r2, [pc, #104]	@ (80008dc <BSP_PB_Init+0xf8>)
 8000874:	1898      	adds	r0, r3, r2
 8000876:	1dfb      	adds	r3, r7, #7
 8000878:	781a      	ldrb	r2, [r3, #0]
 800087a:	4b19      	ldr	r3, [pc, #100]	@ (80008e0 <BSP_PB_Init+0xfc>)
 800087c:	0092      	lsls	r2, r2, #2
 800087e:	58d3      	ldr	r3, [r2, r3]
 8000880:	0019      	movs	r1, r3
 8000882:	f001 f9c7 	bl	8001c14 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000886:	1dfb      	adds	r3, r7, #7
 8000888:	781a      	ldrb	r2, [r3, #0]
 800088a:	0013      	movs	r3, r2
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	189b      	adds	r3, r3, r2
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	4a12      	ldr	r2, [pc, #72]	@ (80008dc <BSP_PB_Init+0xf8>)
 8000894:	1898      	adds	r0, r3, r2
 8000896:	1dfb      	adds	r3, r7, #7
 8000898:	781a      	ldrb	r2, [r3, #0]
 800089a:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <BSP_PB_Init+0x100>)
 800089c:	0092      	lsls	r2, r2, #2
 800089e:	58d3      	ldr	r3, [r2, r3]
 80008a0:	001a      	movs	r2, r3
 80008a2:	2100      	movs	r1, #0
 80008a4:	f001 f984 	bl	8001bb0 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80008a8:	2007      	movs	r0, #7
 80008aa:	1dfb      	adds	r3, r7, #7
 80008ac:	781a      	ldrb	r2, [r3, #0]
 80008ae:	4b0e      	ldr	r3, [pc, #56]	@ (80008e8 <BSP_PB_Init+0x104>)
 80008b0:	0092      	lsls	r2, r2, #2
 80008b2:	58d3      	ldr	r3, [r2, r3]
 80008b4:	2200      	movs	r2, #0
 80008b6:	0019      	movs	r1, r3
 80008b8:	f001 f948 	bl	8001b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80008bc:	2307      	movs	r3, #7
 80008be:	0018      	movs	r0, r3
 80008c0:	f001 f959 	bl	8001b76 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	0018      	movs	r0, r3
 80008c8:	46bd      	mov	sp, r7
 80008ca:	b008      	add	sp, #32
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	46c0      	nop			@ (mov r8, r8)
 80008d0:	40021000 	.word	0x40021000
 80008d4:	20000010 	.word	0x20000010
 80008d8:	10210000 	.word	0x10210000
 80008dc:	200000b4 	.word	0x200000b4
 80008e0:	0800316c 	.word	0x0800316c
 80008e4:	20000014 	.word	0x20000014
 80008e8:	20000018 	.word	0x20000018

080008ec <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	0002      	movs	r2, r0
 80008f4:	1dfb      	adds	r3, r7, #7
 80008f6:	701a      	strb	r2, [r3, #0]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80008f8:	1dfb      	adds	r3, r7, #7
 80008fa:	781a      	ldrb	r2, [r3, #0]
 80008fc:	0013      	movs	r3, r2
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	189b      	adds	r3, r3, r2
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	4a04      	ldr	r2, [pc, #16]	@ (8000918 <BSP_PB_IRQHandler+0x2c>)
 8000906:	189b      	adds	r3, r3, r2
 8000908:	0018      	movs	r0, r3
 800090a:	f001 f995 	bl	8001c38 <HAL_EXTI_IRQHandler>
}
 800090e:	46c0      	nop			@ (mov r8, r8)
 8000910:	46bd      	mov	sp, r7
 8000912:	b002      	add	sp, #8
 8000914:	bd80      	pop	{r7, pc}
 8000916:	46c0      	nop			@ (mov r8, r8)
 8000918:	200000b4 	.word	0x200000b4

0800091c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	0002      	movs	r2, r0
 8000924:	1dfb      	adds	r3, r7, #7
 8000926:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000928:	46c0      	nop			@ (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	b002      	add	sp, #8
 800092e:	bd80      	pop	{r7, pc}

08000930 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	0002      	movs	r2, r0
 8000938:	6039      	str	r1, [r7, #0]
 800093a:	1dfb      	adds	r3, r7, #7
 800093c:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 8000942:	1dfb      	adds	r3, r7, #7
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d003      	beq.n	8000952 <BSP_COM_Init+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800094a:	2302      	movs	r3, #2
 800094c:	425b      	negs	r3, r3
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	e018      	b.n	8000984 <BSP_COM_Init+0x54>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000952:	1dfb      	adds	r3, r7, #7
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2294      	movs	r2, #148	@ 0x94
 8000958:	435a      	muls	r2, r3
 800095a:	4b0d      	ldr	r3, [pc, #52]	@ (8000990 <BSP_COM_Init+0x60>)
 800095c:	18d3      	adds	r3, r2, r3
 800095e:	0018      	movs	r0, r3
 8000960:	f000 f856 	bl	8000a10 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART2_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000964:	1dfb      	adds	r3, r7, #7
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2294      	movs	r2, #148	@ 0x94
 800096a:	435a      	muls	r2, r3
 800096c:	4b08      	ldr	r3, [pc, #32]	@ (8000990 <BSP_COM_Init+0x60>)
 800096e:	18d3      	adds	r3, r2, r3
 8000970:	683a      	ldr	r2, [r7, #0]
 8000972:	0011      	movs	r1, r2
 8000974:	0018      	movs	r0, r3
 8000976:	f000 f80d 	bl	8000994 <MX_USART2_Init>
 800097a:	1e03      	subs	r3, r0, #0
 800097c:	d002      	beq.n	8000984 <BSP_COM_Init+0x54>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800097e:	2304      	movs	r3, #4
 8000980:	425b      	negs	r3, r3
 8000982:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000984:	68fb      	ldr	r3, [r7, #12]
}
 8000986:	0018      	movs	r0, r3
 8000988:	46bd      	mov	sp, r7
 800098a:	b004      	add	sp, #16
 800098c:	bd80      	pop	{r7, pc}
 800098e:	46c0      	nop			@ (mov r8, r8)
 8000990:	200000c0 	.word	0x200000c0

08000994 <MX_USART2_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART2_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 800099e:	4b17      	ldr	r3, [pc, #92]	@ (80009fc <MX_USART2_Init+0x68>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	220c      	movs	r2, #12
 80009b2:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	895b      	ldrh	r3, [r3, #10]
 80009b8:	001a      	movs	r2, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685a      	ldr	r2, [r3, #4]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	891b      	ldrh	r3, [r3, #8]
 80009ca:	001a      	movs	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	899b      	ldrh	r3, [r3, #12]
 80009d4:	001a      	movs	r2, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2280      	movs	r2, #128	@ 0x80
 80009de:	0212      	lsls	r2, r2, #8
 80009e0:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2200      	movs	r2, #0
 80009e6:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	0018      	movs	r0, r3
 80009ec:	f001 ff44 	bl	8002878 <HAL_UART_Init>
 80009f0:	0003      	movs	r3, r0
}
 80009f2:	0018      	movs	r0, r3
 80009f4:	46bd      	mov	sp, r7
 80009f6:	b002      	add	sp, #8
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			@ (mov r8, r8)
 80009fc:	20000004 	.word	0x20000004

08000a00 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000a04:	2000      	movs	r0, #0
 8000a06:	f7ff ff89 	bl	800091c <BSP_PB_Callback>
}
 8000a0a:	46c0      	nop			@ (mov r8, r8)
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b08b      	sub	sp, #44	@ 0x2c
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000a18:	4b28      	ldr	r3, [pc, #160]	@ (8000abc <COM1_MspInit+0xac>)
 8000a1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a1c:	4b27      	ldr	r3, [pc, #156]	@ (8000abc <COM1_MspInit+0xac>)
 8000a1e:	2101      	movs	r1, #1
 8000a20:	430a      	orrs	r2, r1
 8000a22:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a24:	4b25      	ldr	r3, [pc, #148]	@ (8000abc <COM1_MspInit+0xac>)
 8000a26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a28:	2201      	movs	r2, #1
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000a30:	4b22      	ldr	r3, [pc, #136]	@ (8000abc <COM1_MspInit+0xac>)
 8000a32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a34:	4b21      	ldr	r3, [pc, #132]	@ (8000abc <COM1_MspInit+0xac>)
 8000a36:	2101      	movs	r1, #1
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000abc <COM1_MspInit+0xac>)
 8000a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a40:	2201      	movs	r2, #1
 8000a42:	4013      	ands	r3, r2
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000a48:	4b1c      	ldr	r3, [pc, #112]	@ (8000abc <COM1_MspInit+0xac>)
 8000a4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000abc <COM1_MspInit+0xac>)
 8000a4e:	2180      	movs	r1, #128	@ 0x80
 8000a50:	0289      	lsls	r1, r1, #10
 8000a52:	430a      	orrs	r2, r1
 8000a54:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a56:	4b19      	ldr	r3, [pc, #100]	@ (8000abc <COM1_MspInit+0xac>)
 8000a58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a5a:	2380      	movs	r3, #128	@ 0x80
 8000a5c:	029b      	lsls	r3, r3, #10
 8000a5e:	4013      	ands	r3, r2
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8000a64:	2414      	movs	r4, #20
 8000a66:	193b      	adds	r3, r7, r4
 8000a68:	2204      	movs	r2, #4
 8000a6a:	601a      	str	r2, [r3, #0]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000a6c:	193b      	adds	r3, r7, r4
 8000a6e:	2202      	movs	r2, #2
 8000a70:	605a      	str	r2, [r3, #4]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000a72:	193b      	adds	r3, r7, r4
 8000a74:	2202      	movs	r2, #2
 8000a76:	60da      	str	r2, [r3, #12]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000a78:	193b      	adds	r3, r7, r4
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	609a      	str	r2, [r3, #8]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000a7e:	193b      	adds	r3, r7, r4
 8000a80:	2201      	movs	r2, #1
 8000a82:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000a84:	193a      	adds	r2, r7, r4
 8000a86:	23a0      	movs	r3, #160	@ 0xa0
 8000a88:	05db      	lsls	r3, r3, #23
 8000a8a:	0011      	movs	r1, r2
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f001 f91d 	bl	8001ccc <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8000a92:	193b      	adds	r3, r7, r4
 8000a94:	2208      	movs	r2, #8
 8000a96:	601a      	str	r2, [r3, #0]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000a98:	193b      	adds	r3, r7, r4
 8000a9a:	2202      	movs	r2, #2
 8000a9c:	605a      	str	r2, [r3, #4]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000a9e:	193b      	adds	r3, r7, r4
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000aa4:	193a      	adds	r2, r7, r4
 8000aa6:	23a0      	movs	r3, #160	@ 0xa0
 8000aa8:	05db      	lsls	r3, r3, #23
 8000aaa:	0011      	movs	r1, r2
 8000aac:	0018      	movs	r0, r3
 8000aae:	f001 f90d 	bl	8001ccc <HAL_GPIO_Init>
}
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	b00b      	add	sp, #44	@ 0x2c
 8000ab8:	bd90      	pop	{r4, r7, pc}
 8000aba:	46c0      	nop			@ (mov r8, r8)
 8000abc:	40021000 	.word	0x40021000

08000ac0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac6:	1dfb      	adds	r3, r7, #7
 8000ac8:	2200      	movs	r2, #0
 8000aca:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000acc:	2003      	movs	r0, #3
 8000ace:	f000 f80f 	bl	8000af0 <HAL_InitTick>
 8000ad2:	1e03      	subs	r3, r0, #0
 8000ad4:	d003      	beq.n	8000ade <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000ad6:	1dfb      	adds	r3, r7, #7
 8000ad8:	2201      	movs	r2, #1
 8000ada:	701a      	strb	r2, [r3, #0]
 8000adc:	e001      	b.n	8000ae2 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ade:	f7ff fd3f 	bl	8000560 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ae2:	1dfb      	adds	r3, r7, #7
 8000ae4:	781b      	ldrb	r3, [r3, #0]
}
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	b002      	add	sp, #8
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af0:	b590      	push	{r4, r7, lr}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000af8:	230f      	movs	r3, #15
 8000afa:	18fb      	adds	r3, r7, r3
 8000afc:	2200      	movs	r2, #0
 8000afe:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000b00:	4b1d      	ldr	r3, [pc, #116]	@ (8000b78 <HAL_InitTick+0x88>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d02b      	beq.n	8000b60 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000b08:	4b1c      	ldr	r3, [pc, #112]	@ (8000b7c <HAL_InitTick+0x8c>)
 8000b0a:	681c      	ldr	r4, [r3, #0]
 8000b0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000b78 <HAL_InitTick+0x88>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	0019      	movs	r1, r3
 8000b12:	23fa      	movs	r3, #250	@ 0xfa
 8000b14:	0098      	lsls	r0, r3, #2
 8000b16:	f7ff faf7 	bl	8000108 <__udivsi3>
 8000b1a:	0003      	movs	r3, r0
 8000b1c:	0019      	movs	r1, r3
 8000b1e:	0020      	movs	r0, r4
 8000b20:	f7ff faf2 	bl	8000108 <__udivsi3>
 8000b24:	0003      	movs	r3, r0
 8000b26:	0018      	movs	r0, r3
 8000b28:	f001 f835 	bl	8001b96 <HAL_SYSTICK_Config>
 8000b2c:	1e03      	subs	r3, r0, #0
 8000b2e:	d112      	bne.n	8000b56 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2b03      	cmp	r3, #3
 8000b34:	d80a      	bhi.n	8000b4c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	2301      	movs	r3, #1
 8000b3a:	425b      	negs	r3, r3
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f001 f804 	bl	8001b4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b44:	4b0e      	ldr	r3, [pc, #56]	@ (8000b80 <HAL_InitTick+0x90>)
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	e00d      	b.n	8000b68 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b4c:	230f      	movs	r3, #15
 8000b4e:	18fb      	adds	r3, r7, r3
 8000b50:	2201      	movs	r2, #1
 8000b52:	701a      	strb	r2, [r3, #0]
 8000b54:	e008      	b.n	8000b68 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b56:	230f      	movs	r3, #15
 8000b58:	18fb      	adds	r3, r7, r3
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	701a      	strb	r2, [r3, #0]
 8000b5e:	e003      	b.n	8000b68 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b60:	230f      	movs	r3, #15
 8000b62:	18fb      	adds	r3, r7, r3
 8000b64:	2201      	movs	r2, #1
 8000b66:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b68:	230f      	movs	r3, #15
 8000b6a:	18fb      	adds	r3, r7, r3
 8000b6c:	781b      	ldrb	r3, [r3, #0]
}
 8000b6e:	0018      	movs	r0, r3
 8000b70:	46bd      	mov	sp, r7
 8000b72:	b005      	add	sp, #20
 8000b74:	bd90      	pop	{r4, r7, pc}
 8000b76:	46c0      	nop			@ (mov r8, r8)
 8000b78:	20000020 	.word	0x20000020
 8000b7c:	20000000 	.word	0x20000000
 8000b80:	2000001c 	.word	0x2000001c

08000b84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b88:	4b05      	ldr	r3, [pc, #20]	@ (8000ba0 <HAL_IncTick+0x1c>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	001a      	movs	r2, r3
 8000b8e:	4b05      	ldr	r3, [pc, #20]	@ (8000ba4 <HAL_IncTick+0x20>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	18d2      	adds	r2, r2, r3
 8000b94:	4b03      	ldr	r3, [pc, #12]	@ (8000ba4 <HAL_IncTick+0x20>)
 8000b96:	601a      	str	r2, [r3, #0]
}
 8000b98:	46c0      	nop			@ (mov r8, r8)
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	46c0      	nop			@ (mov r8, r8)
 8000ba0:	20000020 	.word	0x20000020
 8000ba4:	20000154 	.word	0x20000154

08000ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bac:	4b02      	ldr	r3, [pc, #8]	@ (8000bb8 <HAL_GetTick+0x10>)
 8000bae:	681b      	ldr	r3, [r3, #0]
}
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	46c0      	nop			@ (mov r8, r8)
 8000bb8:	20000154 	.word	0x20000154

08000bbc <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a05      	ldr	r2, [pc, #20]	@ (8000be0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000bcc:	401a      	ands	r2, r3
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	431a      	orrs	r2, r3
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	601a      	str	r2, [r3, #0]
}
 8000bd6:	46c0      	nop			@ (mov r8, r8)
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	b002      	add	sp, #8
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	46c0      	nop			@ (mov r8, r8)
 8000be0:	ff3fffff 	.word	0xff3fffff

08000be4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	23c0      	movs	r3, #192	@ 0xc0
 8000bf2:	041b      	lsls	r3, r3, #16
 8000bf4:	4013      	ands	r3, r2
}
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b002      	add	sp, #8
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b084      	sub	sp, #16
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	60f8      	str	r0, [r7, #12]
 8000c06:	60b9      	str	r1, [r7, #8]
 8000c08:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	695b      	ldr	r3, [r3, #20]
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	2104      	movs	r1, #4
 8000c12:	400a      	ands	r2, r1
 8000c14:	2107      	movs	r1, #7
 8000c16:	4091      	lsls	r1, r2
 8000c18:	000a      	movs	r2, r1
 8000c1a:	43d2      	mvns	r2, r2
 8000c1c:	401a      	ands	r2, r3
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	2104      	movs	r1, #4
 8000c22:	400b      	ands	r3, r1
 8000c24:	6879      	ldr	r1, [r7, #4]
 8000c26:	4099      	lsls	r1, r3
 8000c28:	000b      	movs	r3, r1
 8000c2a:	431a      	orrs	r2, r3
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000c30:	46c0      	nop			@ (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b004      	add	sp, #16
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	695b      	ldr	r3, [r3, #20]
 8000c46:	683a      	ldr	r2, [r7, #0]
 8000c48:	2104      	movs	r1, #4
 8000c4a:	400a      	ands	r2, r1
 8000c4c:	2107      	movs	r1, #7
 8000c4e:	4091      	lsls	r1, r2
 8000c50:	000a      	movs	r2, r1
 8000c52:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	2104      	movs	r1, #4
 8000c58:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000c5a:	40da      	lsrs	r2, r3
 8000c5c:	0013      	movs	r3, r2
}
 8000c5e:	0018      	movs	r0, r3
 8000c60:	46bd      	mov	sp, r7
 8000c62:	b002      	add	sp, #8
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b082      	sub	sp, #8
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	68da      	ldr	r2, [r3, #12]
 8000c72:	23c0      	movs	r3, #192	@ 0xc0
 8000c74:	011b      	lsls	r3, r3, #4
 8000c76:	4013      	ands	r3, r2
 8000c78:	d101      	bne.n	8000c7e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e000      	b.n	8000c80 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000c7e:	2300      	movs	r3, #0
}
 8000c80:	0018      	movs	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b002      	add	sp, #8
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c98:	68ba      	ldr	r2, [r7, #8]
 8000c9a:	211f      	movs	r1, #31
 8000c9c:	400a      	ands	r2, r1
 8000c9e:	210f      	movs	r1, #15
 8000ca0:	4091      	lsls	r1, r2
 8000ca2:	000a      	movs	r2, r1
 8000ca4:	43d2      	mvns	r2, r2
 8000ca6:	401a      	ands	r2, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	0e9b      	lsrs	r3, r3, #26
 8000cac:	210f      	movs	r1, #15
 8000cae:	4019      	ands	r1, r3
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	201f      	movs	r0, #31
 8000cb4:	4003      	ands	r3, r0
 8000cb6:	4099      	lsls	r1, r3
 8000cb8:	000b      	movs	r3, r1
 8000cba:	431a      	orrs	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000cc0:	46c0      	nop			@ (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	b004      	add	sp, #16
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	025b      	lsls	r3, r3, #9
 8000cda:	0a5b      	lsrs	r3, r3, #9
 8000cdc:	431a      	orrs	r2, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ce2:	46c0      	nop			@ (mov r8, r8)
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	b002      	add	sp, #8
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
 8000cf2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cf8:	683a      	ldr	r2, [r7, #0]
 8000cfa:	0252      	lsls	r2, r2, #9
 8000cfc:	0a52      	lsrs	r2, r2, #9
 8000cfe:	43d2      	mvns	r2, r2
 8000d00:	401a      	ands	r2, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d06:	46c0      	nop			@ (mov r8, r8)
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	b002      	add	sp, #8
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	695b      	ldr	r3, [r3, #20]
 8000d20:	68ba      	ldr	r2, [r7, #8]
 8000d22:	0212      	lsls	r2, r2, #8
 8000d24:	43d2      	mvns	r2, r2
 8000d26:	401a      	ands	r2, r3
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	021b      	lsls	r3, r3, #8
 8000d2c:	6879      	ldr	r1, [r7, #4]
 8000d2e:	400b      	ands	r3, r1
 8000d30:	4904      	ldr	r1, [pc, #16]	@ (8000d44 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000d32:	400b      	ands	r3, r1
 8000d34:	431a      	orrs	r2, r3
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000d3a:	46c0      	nop			@ (mov r8, r8)
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	b004      	add	sp, #16
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	46c0      	nop			@ (mov r8, r8)
 8000d44:	7fffff00 	.word	0x7fffff00

08000d48 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	4a05      	ldr	r2, [pc, #20]	@ (8000d6c <LL_ADC_EnableInternalRegulator+0x24>)
 8000d56:	4013      	ands	r3, r2
 8000d58:	2280      	movs	r2, #128	@ 0x80
 8000d5a:	0552      	lsls	r2, r2, #21
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000d62:	46c0      	nop			@ (mov r8, r8)
 8000d64:	46bd      	mov	sp, r7
 8000d66:	b002      	add	sp, #8
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	46c0      	nop			@ (mov r8, r8)
 8000d6c:	6fffffe8 	.word	0x6fffffe8

08000d70 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	689a      	ldr	r2, [r3, #8]
 8000d7c:	2380      	movs	r3, #128	@ 0x80
 8000d7e:	055b      	lsls	r3, r3, #21
 8000d80:	401a      	ands	r2, r3
 8000d82:	2380      	movs	r3, #128	@ 0x80
 8000d84:	055b      	lsls	r3, r3, #21
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d101      	bne.n	8000d8e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e000      	b.n	8000d90 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000d8e:	2300      	movs	r3, #0
}
 8000d90:	0018      	movs	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	b002      	add	sp, #8
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	4a04      	ldr	r2, [pc, #16]	@ (8000db8 <LL_ADC_Enable+0x20>)
 8000da6:	4013      	ands	r3, r2
 8000da8:	2201      	movs	r2, #1
 8000daa:	431a      	orrs	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000db0:	46c0      	nop			@ (mov r8, r8)
 8000db2:	46bd      	mov	sp, r7
 8000db4:	b002      	add	sp, #8
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	7fffffe8 	.word	0x7fffffe8

08000dbc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	4a04      	ldr	r2, [pc, #16]	@ (8000ddc <LL_ADC_Disable+0x20>)
 8000dca:	4013      	ands	r3, r2
 8000dcc:	2202      	movs	r2, #2
 8000dce:	431a      	orrs	r2, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000dd4:	46c0      	nop			@ (mov r8, r8)
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	b002      	add	sp, #8
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	7fffffe8 	.word	0x7fffffe8

08000de0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	2201      	movs	r2, #1
 8000dee:	4013      	ands	r3, r2
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d101      	bne.n	8000df8 <LL_ADC_IsEnabled+0x18>
 8000df4:	2301      	movs	r3, #1
 8000df6:	e000      	b.n	8000dfa <LL_ADC_IsEnabled+0x1a>
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	b002      	add	sp, #8
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	2202      	movs	r2, #2
 8000e10:	4013      	ands	r3, r2
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d101      	bne.n	8000e1a <LL_ADC_IsDisableOngoing+0x18>
 8000e16:	2301      	movs	r3, #1
 8000e18:	e000      	b.n	8000e1c <LL_ADC_IsDisableOngoing+0x1a>
 8000e1a:	2300      	movs	r3, #0
}
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	b002      	add	sp, #8
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	4a04      	ldr	r2, [pc, #16]	@ (8000e44 <LL_ADC_REG_StartConversion+0x20>)
 8000e32:	4013      	ands	r3, r2
 8000e34:	2204      	movs	r2, #4
 8000e36:	431a      	orrs	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000e3c:	46c0      	nop			@ (mov r8, r8)
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	b002      	add	sp, #8
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	7fffffe8 	.word	0x7fffffe8

08000e48 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	4a04      	ldr	r2, [pc, #16]	@ (8000e68 <LL_ADC_REG_StopConversion+0x20>)
 8000e56:	4013      	ands	r3, r2
 8000e58:	2210      	movs	r2, #16
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8000e60:	46c0      	nop			@ (mov r8, r8)
 8000e62:	46bd      	mov	sp, r7
 8000e64:	b002      	add	sp, #8
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	7fffffe8 	.word	0x7fffffe8

08000e6c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	2204      	movs	r2, #4
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	2b04      	cmp	r3, #4
 8000e7e:	d101      	bne.n	8000e84 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000e80:	2301      	movs	r3, #1
 8000e82:	e000      	b.n	8000e86 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	0018      	movs	r0, r3
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	b002      	add	sp, #8
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e98:	231f      	movs	r3, #31
 8000e9a:	18fb      	adds	r3, r7, r3
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d101      	bne.n	8000eb6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e17e      	b.n	80011b4 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d10a      	bne.n	8000ed4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f7ff fb71 	bl	80005a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2254      	movs	r2, #84	@ 0x54
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f7ff ff49 	bl	8000d70 <LL_ADC_IsInternalRegulatorEnabled>
 8000ede:	1e03      	subs	r3, r0, #0
 8000ee0:	d114      	bne.n	8000f0c <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f7ff ff2e 	bl	8000d48 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000eec:	4bb3      	ldr	r3, [pc, #716]	@ (80011bc <HAL_ADC_Init+0x32c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	49b3      	ldr	r1, [pc, #716]	@ (80011c0 <HAL_ADC_Init+0x330>)
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f7ff f908 	bl	8000108 <__udivsi3>
 8000ef8:	0003      	movs	r3, r0
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000efe:	e002      	b.n	8000f06 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d1f9      	bne.n	8000f00 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	0018      	movs	r0, r3
 8000f12:	f7ff ff2d 	bl	8000d70 <LL_ADC_IsInternalRegulatorEnabled>
 8000f16:	1e03      	subs	r3, r0, #0
 8000f18:	d10f      	bne.n	8000f3a <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f1e:	2210      	movs	r2, #16
 8000f20:	431a      	orrs	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	431a      	orrs	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8000f32:	231f      	movs	r3, #31
 8000f34:	18fb      	adds	r3, r7, r3
 8000f36:	2201      	movs	r2, #1
 8000f38:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	0018      	movs	r0, r3
 8000f40:	f7ff ff94 	bl	8000e6c <LL_ADC_REG_IsConversionOngoing>
 8000f44:	0003      	movs	r3, r0
 8000f46:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f4c:	2210      	movs	r2, #16
 8000f4e:	4013      	ands	r3, r2
 8000f50:	d000      	beq.n	8000f54 <HAL_ADC_Init+0xc4>
 8000f52:	e122      	b.n	800119a <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d000      	beq.n	8000f5c <HAL_ADC_Init+0xcc>
 8000f5a:	e11e      	b.n	800119a <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f60:	4a98      	ldr	r2, [pc, #608]	@ (80011c4 <HAL_ADC_Init+0x334>)
 8000f62:	4013      	ands	r3, r2
 8000f64:	2202      	movs	r2, #2
 8000f66:	431a      	orrs	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	0018      	movs	r0, r3
 8000f72:	f7ff ff35 	bl	8000de0 <LL_ADC_IsEnabled>
 8000f76:	1e03      	subs	r3, r0, #0
 8000f78:	d000      	beq.n	8000f7c <HAL_ADC_Init+0xec>
 8000f7a:	e0ad      	b.n	80010d8 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	7e1b      	ldrb	r3, [r3, #24]
 8000f84:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000f86:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	7e5b      	ldrb	r3, [r3, #25]
 8000f8c:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000f8e:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	7e9b      	ldrb	r3, [r3, #26]
 8000f94:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000f96:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d002      	beq.n	8000fa6 <HAL_ADC_Init+0x116>
 8000fa0:	2380      	movs	r3, #128	@ 0x80
 8000fa2:	015b      	lsls	r3, r3, #5
 8000fa4:	e000      	b.n	8000fa8 <HAL_ADC_Init+0x118>
 8000fa6:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000fa8:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000fae:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	691b      	ldr	r3, [r3, #16]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	da04      	bge.n	8000fc2 <HAL_ADC_Init+0x132>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	691b      	ldr	r3, [r3, #16]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	085b      	lsrs	r3, r3, #1
 8000fc0:	e001      	b.n	8000fc6 <HAL_ADC_Init+0x136>
 8000fc2:	2380      	movs	r3, #128	@ 0x80
 8000fc4:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8000fc6:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	212c      	movs	r1, #44	@ 0x2c
 8000fcc:	5c5b      	ldrb	r3, [r3, r1]
 8000fce:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000fd0:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2220      	movs	r2, #32
 8000fdc:	5c9b      	ldrb	r3, [r3, r2]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d115      	bne.n	800100e <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	7e9b      	ldrb	r3, [r3, #26]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d105      	bne.n	8000ff6 <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	2280      	movs	r2, #128	@ 0x80
 8000fee:	0252      	lsls	r2, r2, #9
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
 8000ff4:	e00b      	b.n	800100e <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ffa:	2220      	movs	r2, #32
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001006:	2201      	movs	r2, #1
 8001008:	431a      	orrs	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001012:	2b00      	cmp	r3, #0
 8001014:	d00a      	beq.n	800102c <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800101a:	23e0      	movs	r3, #224	@ 0xe0
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001024:	4313      	orrs	r3, r2
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4313      	orrs	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	4a65      	ldr	r2, [pc, #404]	@ (80011c8 <HAL_ADC_Init+0x338>)
 8001034:	4013      	ands	r3, r2
 8001036:	0019      	movs	r1, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	430a      	orrs	r2, r1
 8001040:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	0f9b      	lsrs	r3, r3, #30
 8001048:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800104e:	4313      	orrs	r3, r2
 8001050:	697a      	ldr	r2, [r7, #20]
 8001052:	4313      	orrs	r3, r2
 8001054:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	223c      	movs	r2, #60	@ 0x3c
 800105a:	5c9b      	ldrb	r3, [r3, r2]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d111      	bne.n	8001084 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	0f9b      	lsrs	r3, r3, #30
 8001066:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800106c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001072:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001078:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	4313      	orrs	r3, r2
 800107e:	2201      	movs	r2, #1
 8001080:	4313      	orrs	r3, r2
 8001082:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	691b      	ldr	r3, [r3, #16]
 800108a:	4a50      	ldr	r2, [pc, #320]	@ (80011cc <HAL_ADC_Init+0x33c>)
 800108c:	4013      	ands	r3, r2
 800108e:	0019      	movs	r1, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	697a      	ldr	r2, [r7, #20]
 8001096:	430a      	orrs	r2, r1
 8001098:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	23c0      	movs	r3, #192	@ 0xc0
 80010a0:	061b      	lsls	r3, r3, #24
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d018      	beq.n	80010d8 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80010aa:	2380      	movs	r3, #128	@ 0x80
 80010ac:	05db      	lsls	r3, r3, #23
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d012      	beq.n	80010d8 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80010b6:	2380      	movs	r3, #128	@ 0x80
 80010b8:	061b      	lsls	r3, r3, #24
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d00c      	beq.n	80010d8 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80010be:	4b44      	ldr	r3, [pc, #272]	@ (80011d0 <HAL_ADC_Init+0x340>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a44      	ldr	r2, [pc, #272]	@ (80011d4 <HAL_ADC_Init+0x344>)
 80010c4:	4013      	ands	r3, r2
 80010c6:	0019      	movs	r1, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	23f0      	movs	r3, #240	@ 0xf0
 80010ce:	039b      	lsls	r3, r3, #14
 80010d0:	401a      	ands	r2, r3
 80010d2:	4b3f      	ldr	r3, [pc, #252]	@ (80011d0 <HAL_ADC_Init+0x340>)
 80010d4:	430a      	orrs	r2, r1
 80010d6:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010e0:	001a      	movs	r2, r3
 80010e2:	2100      	movs	r1, #0
 80010e4:	f7ff fd8b 	bl	8000bfe <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010f0:	4939      	ldr	r1, [pc, #228]	@ (80011d8 <HAL_ADC_Init+0x348>)
 80010f2:	001a      	movs	r2, r3
 80010f4:	f7ff fd83 	bl	8000bfe <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	691b      	ldr	r3, [r3, #16]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d109      	bne.n	8001114 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2110      	movs	r1, #16
 800110c:	4249      	negs	r1, r1
 800110e:	430a      	orrs	r2, r1
 8001110:	629a      	str	r2, [r3, #40]	@ 0x28
 8001112:	e018      	b.n	8001146 <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	691a      	ldr	r2, [r3, #16]
 8001118:	2380      	movs	r3, #128	@ 0x80
 800111a:	039b      	lsls	r3, r3, #14
 800111c:	429a      	cmp	r2, r3
 800111e:	d112      	bne.n	8001146 <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	3b01      	subs	r3, #1
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	221c      	movs	r2, #28
 8001130:	4013      	ands	r3, r2
 8001132:	2210      	movs	r2, #16
 8001134:	4252      	negs	r2, r2
 8001136:	409a      	lsls	r2, r3
 8001138:	0011      	movs	r1, r2
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	430a      	orrs	r2, r1
 8001144:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2100      	movs	r1, #0
 800114c:	0018      	movs	r0, r3
 800114e:	f7ff fd73 	bl	8000c38 <LL_ADC_GetSamplingTimeCommonChannels>
 8001152:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001158:	429a      	cmp	r2, r3
 800115a:	d10b      	bne.n	8001174 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001166:	2203      	movs	r2, #3
 8001168:	4393      	bics	r3, r2
 800116a:	2201      	movs	r2, #1
 800116c:	431a      	orrs	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001172:	e01c      	b.n	80011ae <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001178:	2212      	movs	r2, #18
 800117a:	4393      	bics	r3, r2
 800117c:	2210      	movs	r2, #16
 800117e:	431a      	orrs	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001188:	2201      	movs	r2, #1
 800118a:	431a      	orrs	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001190:	231f      	movs	r3, #31
 8001192:	18fb      	adds	r3, r7, r3
 8001194:	2201      	movs	r2, #1
 8001196:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001198:	e009      	b.n	80011ae <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800119e:	2210      	movs	r2, #16
 80011a0:	431a      	orrs	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80011a6:	231f      	movs	r3, #31
 80011a8:	18fb      	adds	r3, r7, r3
 80011aa:	2201      	movs	r2, #1
 80011ac:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80011ae:	231f      	movs	r3, #31
 80011b0:	18fb      	adds	r3, r7, r3
 80011b2:	781b      	ldrb	r3, [r3, #0]
}
 80011b4:	0018      	movs	r0, r3
 80011b6:	46bd      	mov	sp, r7
 80011b8:	b008      	add	sp, #32
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000000 	.word	0x20000000
 80011c0:	00030d40 	.word	0x00030d40
 80011c4:	fffffefd 	.word	0xfffffefd
 80011c8:	ffde0201 	.word	0xffde0201
 80011cc:	1ffffc02 	.word	0x1ffffc02
 80011d0:	40012708 	.word	0x40012708
 80011d4:	ffc3ffff 	.word	0xffc3ffff
 80011d8:	7fffff04 	.word	0x7fffff04

080011dc <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80011dc:	b5b0      	push	{r4, r5, r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	0018      	movs	r0, r3
 80011ea:	f7ff fe3f 	bl	8000e6c <LL_ADC_REG_IsConversionOngoing>
 80011ee:	1e03      	subs	r3, r0, #0
 80011f0:	d135      	bne.n	800125e <HAL_ADC_Start+0x82>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2254      	movs	r2, #84	@ 0x54
 80011f6:	5c9b      	ldrb	r3, [r3, r2]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d101      	bne.n	8001200 <HAL_ADC_Start+0x24>
 80011fc:	2302      	movs	r3, #2
 80011fe:	e035      	b.n	800126c <HAL_ADC_Start+0x90>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2254      	movs	r2, #84	@ 0x54
 8001204:	2101      	movs	r1, #1
 8001206:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001208:	250f      	movs	r5, #15
 800120a:	197c      	adds	r4, r7, r5
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	0018      	movs	r0, r3
 8001210:	f000 fb1a 	bl	8001848 <ADC_Enable>
 8001214:	0003      	movs	r3, r0
 8001216:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001218:	197b      	adds	r3, r7, r5
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d119      	bne.n	8001254 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001224:	4a13      	ldr	r2, [pc, #76]	@ (8001274 <HAL_ADC_Start+0x98>)
 8001226:	4013      	ands	r3, r2
 8001228:	2280      	movs	r2, #128	@ 0x80
 800122a:	0052      	lsls	r2, r2, #1
 800122c:	431a      	orrs	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	221c      	movs	r2, #28
 800123e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2254      	movs	r2, #84	@ 0x54
 8001244:	2100      	movs	r1, #0
 8001246:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	0018      	movs	r0, r3
 800124e:	f7ff fde9 	bl	8000e24 <LL_ADC_REG_StartConversion>
 8001252:	e008      	b.n	8001266 <HAL_ADC_Start+0x8a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2254      	movs	r2, #84	@ 0x54
 8001258:	2100      	movs	r1, #0
 800125a:	5499      	strb	r1, [r3, r2]
 800125c:	e003      	b.n	8001266 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800125e:	230f      	movs	r3, #15
 8001260:	18fb      	adds	r3, r7, r3
 8001262:	2202      	movs	r2, #2
 8001264:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001266:	230f      	movs	r3, #15
 8001268:	18fb      	adds	r3, r7, r3
 800126a:	781b      	ldrb	r3, [r3, #0]
}
 800126c:	0018      	movs	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	b004      	add	sp, #16
 8001272:	bdb0      	pop	{r4, r5, r7, pc}
 8001274:	fffff0fe 	.word	0xfffff0fe

08001278 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001278:	b5b0      	push	{r4, r5, r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2254      	movs	r2, #84	@ 0x54
 8001284:	5c9b      	ldrb	r3, [r3, r2]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d101      	bne.n	800128e <HAL_ADC_Stop+0x16>
 800128a:	2302      	movs	r3, #2
 800128c:	e029      	b.n	80012e2 <HAL_ADC_Stop+0x6a>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2254      	movs	r2, #84	@ 0x54
 8001292:	2101      	movs	r1, #1
 8001294:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001296:	250f      	movs	r5, #15
 8001298:	197c      	adds	r4, r7, r5
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	0018      	movs	r0, r3
 800129e:	f000 fa97 	bl	80017d0 <ADC_ConversionStop>
 80012a2:	0003      	movs	r3, r0
 80012a4:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80012a6:	197b      	adds	r3, r7, r5
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d112      	bne.n	80012d4 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80012ae:	197c      	adds	r4, r7, r5
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	0018      	movs	r0, r3
 80012b4:	f000 fb46 	bl	8001944 <ADC_Disable>
 80012b8:	0003      	movs	r3, r0
 80012ba:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80012bc:	197b      	adds	r3, r7, r5
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d107      	bne.n	80012d4 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012c8:	4a08      	ldr	r2, [pc, #32]	@ (80012ec <HAL_ADC_Stop+0x74>)
 80012ca:	4013      	ands	r3, r2
 80012cc:	2201      	movs	r2, #1
 80012ce:	431a      	orrs	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2254      	movs	r2, #84	@ 0x54
 80012d8:	2100      	movs	r1, #0
 80012da:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80012dc:	230f      	movs	r3, #15
 80012de:	18fb      	adds	r3, r7, r3
 80012e0:	781b      	ldrb	r3, [r3, #0]
}
 80012e2:	0018      	movs	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	b004      	add	sp, #16
 80012e8:	bdb0      	pop	{r4, r5, r7, pc}
 80012ea:	46c0      	nop			@ (mov r8, r8)
 80012ec:	fffffefe 	.word	0xfffffefe

080012f0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	2b08      	cmp	r3, #8
 8001300:	d102      	bne.n	8001308 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001302:	2308      	movs	r3, #8
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	e00f      	b.n	8001328 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	2201      	movs	r2, #1
 8001310:	4013      	ands	r3, r2
 8001312:	d007      	beq.n	8001324 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001318:	2220      	movs	r2, #32
 800131a:	431a      	orrs	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e06c      	b.n	80013fe <HAL_ADC_PollForConversion+0x10e>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001324:	2304      	movs	r3, #4
 8001326:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001328:	f7ff fc3e 	bl	8000ba8 <HAL_GetTick>
 800132c:	0003      	movs	r3, r0
 800132e:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001330:	e019      	b.n	8001366 <HAL_ADC_PollForConversion+0x76>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	3301      	adds	r3, #1
 8001336:	d016      	beq.n	8001366 <HAL_ADC_PollForConversion+0x76>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001338:	f7ff fc36 	bl	8000ba8 <HAL_GetTick>
 800133c:	0002      	movs	r2, r0
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	429a      	cmp	r2, r3
 8001346:	d302      	bcc.n	800134e <HAL_ADC_PollForConversion+0x5e>
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10b      	bne.n	8001366 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001352:	2204      	movs	r2, #4
 8001354:	431a      	orrs	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2254      	movs	r2, #84	@ 0x54
 800135e:	2100      	movs	r1, #0
 8001360:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e04b      	b.n	80013fe <HAL_ADC_PollForConversion+0x10e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	4013      	ands	r3, r2
 8001370:	d0df      	beq.n	8001332 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001376:	2280      	movs	r2, #128	@ 0x80
 8001378:	0092      	lsls	r2, r2, #2
 800137a:	431a      	orrs	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	0018      	movs	r0, r3
 8001386:	f7ff fc6e 	bl	8000c66 <LL_ADC_REG_IsTriggerSourceSWStart>
 800138a:	1e03      	subs	r3, r0, #0
 800138c:	d02e      	beq.n	80013ec <HAL_ADC_PollForConversion+0xfc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	7e9b      	ldrb	r3, [r3, #26]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d12a      	bne.n	80013ec <HAL_ADC_PollForConversion+0xfc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2208      	movs	r2, #8
 800139e:	4013      	ands	r3, r2
 80013a0:	2b08      	cmp	r3, #8
 80013a2:	d123      	bne.n	80013ec <HAL_ADC_PollForConversion+0xfc>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	0018      	movs	r0, r3
 80013aa:	f7ff fd5f 	bl	8000e6c <LL_ADC_REG_IsConversionOngoing>
 80013ae:	1e03      	subs	r3, r0, #0
 80013b0:	d110      	bne.n	80013d4 <HAL_ADC_PollForConversion+0xe4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	210c      	movs	r1, #12
 80013be:	438a      	bics	r2, r1
 80013c0:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c6:	4a10      	ldr	r2, [pc, #64]	@ (8001408 <HAL_ADC_PollForConversion+0x118>)
 80013c8:	4013      	ands	r3, r2
 80013ca:	2201      	movs	r2, #1
 80013cc:	431a      	orrs	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	659a      	str	r2, [r3, #88]	@ 0x58
 80013d2:	e00b      	b.n	80013ec <HAL_ADC_PollForConversion+0xfc>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d8:	2220      	movs	r2, #32
 80013da:	431a      	orrs	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013e4:	2201      	movs	r2, #1
 80013e6:	431a      	orrs	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	7e1b      	ldrb	r3, [r3, #24]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d103      	bne.n	80013fc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	220c      	movs	r2, #12
 80013fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	0018      	movs	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	b004      	add	sp, #16
 8001404:	bd80      	pop	{r7, pc}
 8001406:	46c0      	nop			@ (mov r8, r8)
 8001408:	fffffefe 	.word	0xfffffefe

0800140c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800141a:	0018      	movs	r0, r3
 800141c:	46bd      	mov	sp, r7
 800141e:	b002      	add	sp, #8
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800142e:	2317      	movs	r3, #23
 8001430:	18fb      	adds	r3, r7, r3
 8001432:	2200      	movs	r2, #0
 8001434:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2254      	movs	r2, #84	@ 0x54
 800143e:	5c9b      	ldrb	r3, [r3, r2]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d101      	bne.n	8001448 <HAL_ADC_ConfigChannel+0x24>
 8001444:	2302      	movs	r3, #2
 8001446:	e1be      	b.n	80017c6 <HAL_ADC_ConfigChannel+0x3a2>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2254      	movs	r2, #84	@ 0x54
 800144c:	2101      	movs	r1, #1
 800144e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	0018      	movs	r0, r3
 8001456:	f7ff fd09 	bl	8000e6c <LL_ADC_REG_IsConversionOngoing>
 800145a:	1e03      	subs	r3, r0, #0
 800145c:	d000      	beq.n	8001460 <HAL_ADC_ConfigChannel+0x3c>
 800145e:	e1a1      	b.n	80017a4 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b02      	cmp	r3, #2
 8001466:	d100      	bne.n	800146a <HAL_ADC_ConfigChannel+0x46>
 8001468:	e152      	b.n	8001710 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	691a      	ldr	r2, [r3, #16]
 800146e:	2380      	movs	r3, #128	@ 0x80
 8001470:	061b      	lsls	r3, r3, #24
 8001472:	429a      	cmp	r2, r3
 8001474:	d004      	beq.n	8001480 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800147a:	4ac2      	ldr	r2, [pc, #776]	@ (8001784 <HAL_ADC_ConfigChannel+0x360>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d108      	bne.n	8001492 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	0019      	movs	r1, r3
 800148a:	0010      	movs	r0, r2
 800148c:	f7ff fc1c 	bl	8000cc8 <LL_ADC_REG_SetSequencerChAdd>
 8001490:	e0ed      	b.n	800166e <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	211f      	movs	r1, #31
 800149c:	400b      	ands	r3, r1
 800149e:	210f      	movs	r1, #15
 80014a0:	4099      	lsls	r1, r3
 80014a2:	000b      	movs	r3, r1
 80014a4:	43db      	mvns	r3, r3
 80014a6:	4013      	ands	r3, r2
 80014a8:	0019      	movs	r1, r3
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	025b      	lsls	r3, r3, #9
 80014b0:	0a5b      	lsrs	r3, r3, #9
 80014b2:	d105      	bne.n	80014c0 <HAL_ADC_ConfigChannel+0x9c>
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	0e9b      	lsrs	r3, r3, #26
 80014ba:	221f      	movs	r2, #31
 80014bc:	4013      	ands	r3, r2
 80014be:	e0bc      	b.n	800163a <HAL_ADC_ConfigChannel+0x216>
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2201      	movs	r2, #1
 80014c6:	4013      	ands	r3, r2
 80014c8:	d000      	beq.n	80014cc <HAL_ADC_ConfigChannel+0xa8>
 80014ca:	e0b5      	b.n	8001638 <HAL_ADC_ConfigChannel+0x214>
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2202      	movs	r2, #2
 80014d2:	4013      	ands	r3, r2
 80014d4:	d000      	beq.n	80014d8 <HAL_ADC_ConfigChannel+0xb4>
 80014d6:	e0ad      	b.n	8001634 <HAL_ADC_ConfigChannel+0x210>
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2204      	movs	r2, #4
 80014de:	4013      	ands	r3, r2
 80014e0:	d000      	beq.n	80014e4 <HAL_ADC_ConfigChannel+0xc0>
 80014e2:	e0a5      	b.n	8001630 <HAL_ADC_ConfigChannel+0x20c>
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2208      	movs	r2, #8
 80014ea:	4013      	ands	r3, r2
 80014ec:	d000      	beq.n	80014f0 <HAL_ADC_ConfigChannel+0xcc>
 80014ee:	e09d      	b.n	800162c <HAL_ADC_ConfigChannel+0x208>
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2210      	movs	r2, #16
 80014f6:	4013      	ands	r3, r2
 80014f8:	d000      	beq.n	80014fc <HAL_ADC_ConfigChannel+0xd8>
 80014fa:	e095      	b.n	8001628 <HAL_ADC_ConfigChannel+0x204>
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2220      	movs	r2, #32
 8001502:	4013      	ands	r3, r2
 8001504:	d000      	beq.n	8001508 <HAL_ADC_ConfigChannel+0xe4>
 8001506:	e08d      	b.n	8001624 <HAL_ADC_ConfigChannel+0x200>
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2240      	movs	r2, #64	@ 0x40
 800150e:	4013      	ands	r3, r2
 8001510:	d000      	beq.n	8001514 <HAL_ADC_ConfigChannel+0xf0>
 8001512:	e085      	b.n	8001620 <HAL_ADC_ConfigChannel+0x1fc>
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2280      	movs	r2, #128	@ 0x80
 800151a:	4013      	ands	r3, r2
 800151c:	d000      	beq.n	8001520 <HAL_ADC_ConfigChannel+0xfc>
 800151e:	e07d      	b.n	800161c <HAL_ADC_ConfigChannel+0x1f8>
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	2380      	movs	r3, #128	@ 0x80
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	4013      	ands	r3, r2
 800152a:	d000      	beq.n	800152e <HAL_ADC_ConfigChannel+0x10a>
 800152c:	e074      	b.n	8001618 <HAL_ADC_ConfigChannel+0x1f4>
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	2380      	movs	r3, #128	@ 0x80
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	4013      	ands	r3, r2
 8001538:	d000      	beq.n	800153c <HAL_ADC_ConfigChannel+0x118>
 800153a:	e06b      	b.n	8001614 <HAL_ADC_ConfigChannel+0x1f0>
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	2380      	movs	r3, #128	@ 0x80
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	4013      	ands	r3, r2
 8001546:	d000      	beq.n	800154a <HAL_ADC_ConfigChannel+0x126>
 8001548:	e062      	b.n	8001610 <HAL_ADC_ConfigChannel+0x1ec>
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	2380      	movs	r3, #128	@ 0x80
 8001550:	011b      	lsls	r3, r3, #4
 8001552:	4013      	ands	r3, r2
 8001554:	d000      	beq.n	8001558 <HAL_ADC_ConfigChannel+0x134>
 8001556:	e059      	b.n	800160c <HAL_ADC_ConfigChannel+0x1e8>
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	2380      	movs	r3, #128	@ 0x80
 800155e:	015b      	lsls	r3, r3, #5
 8001560:	4013      	ands	r3, r2
 8001562:	d151      	bne.n	8001608 <HAL_ADC_ConfigChannel+0x1e4>
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	2380      	movs	r3, #128	@ 0x80
 800156a:	019b      	lsls	r3, r3, #6
 800156c:	4013      	ands	r3, r2
 800156e:	d149      	bne.n	8001604 <HAL_ADC_ConfigChannel+0x1e0>
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	2380      	movs	r3, #128	@ 0x80
 8001576:	01db      	lsls	r3, r3, #7
 8001578:	4013      	ands	r3, r2
 800157a:	d141      	bne.n	8001600 <HAL_ADC_ConfigChannel+0x1dc>
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	2380      	movs	r3, #128	@ 0x80
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	4013      	ands	r3, r2
 8001586:	d139      	bne.n	80015fc <HAL_ADC_ConfigChannel+0x1d8>
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	2380      	movs	r3, #128	@ 0x80
 800158e:	025b      	lsls	r3, r3, #9
 8001590:	4013      	ands	r3, r2
 8001592:	d131      	bne.n	80015f8 <HAL_ADC_ConfigChannel+0x1d4>
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	2380      	movs	r3, #128	@ 0x80
 800159a:	029b      	lsls	r3, r3, #10
 800159c:	4013      	ands	r3, r2
 800159e:	d129      	bne.n	80015f4 <HAL_ADC_ConfigChannel+0x1d0>
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	2380      	movs	r3, #128	@ 0x80
 80015a6:	02db      	lsls	r3, r3, #11
 80015a8:	4013      	ands	r3, r2
 80015aa:	d121      	bne.n	80015f0 <HAL_ADC_ConfigChannel+0x1cc>
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	2380      	movs	r3, #128	@ 0x80
 80015b2:	031b      	lsls	r3, r3, #12
 80015b4:	4013      	ands	r3, r2
 80015b6:	d119      	bne.n	80015ec <HAL_ADC_ConfigChannel+0x1c8>
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	2380      	movs	r3, #128	@ 0x80
 80015be:	035b      	lsls	r3, r3, #13
 80015c0:	4013      	ands	r3, r2
 80015c2:	d111      	bne.n	80015e8 <HAL_ADC_ConfigChannel+0x1c4>
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	2380      	movs	r3, #128	@ 0x80
 80015ca:	039b      	lsls	r3, r3, #14
 80015cc:	4013      	ands	r3, r2
 80015ce:	d109      	bne.n	80015e4 <HAL_ADC_ConfigChannel+0x1c0>
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	2380      	movs	r3, #128	@ 0x80
 80015d6:	03db      	lsls	r3, r3, #15
 80015d8:	4013      	ands	r3, r2
 80015da:	d001      	beq.n	80015e0 <HAL_ADC_ConfigChannel+0x1bc>
 80015dc:	2316      	movs	r3, #22
 80015de:	e02c      	b.n	800163a <HAL_ADC_ConfigChannel+0x216>
 80015e0:	2300      	movs	r3, #0
 80015e2:	e02a      	b.n	800163a <HAL_ADC_ConfigChannel+0x216>
 80015e4:	2315      	movs	r3, #21
 80015e6:	e028      	b.n	800163a <HAL_ADC_ConfigChannel+0x216>
 80015e8:	2314      	movs	r3, #20
 80015ea:	e026      	b.n	800163a <HAL_ADC_ConfigChannel+0x216>
 80015ec:	2313      	movs	r3, #19
 80015ee:	e024      	b.n	800163a <HAL_ADC_ConfigChannel+0x216>
 80015f0:	2312      	movs	r3, #18
 80015f2:	e022      	b.n	800163a <HAL_ADC_ConfigChannel+0x216>
 80015f4:	2311      	movs	r3, #17
 80015f6:	e020      	b.n	800163a <HAL_ADC_ConfigChannel+0x216>
 80015f8:	2310      	movs	r3, #16
 80015fa:	e01e      	b.n	800163a <HAL_ADC_ConfigChannel+0x216>
 80015fc:	230f      	movs	r3, #15
 80015fe:	e01c      	b.n	800163a <HAL_ADC_ConfigChannel+0x216>
 8001600:	230e      	movs	r3, #14
 8001602:	e01a      	b.n	800163a <HAL_ADC_ConfigChannel+0x216>
 8001604:	230d      	movs	r3, #13
 8001606:	e018      	b.n	800163a <HAL_ADC_ConfigChannel+0x216>
 8001608:	230c      	movs	r3, #12
 800160a:	e016      	b.n	800163a <HAL_ADC_ConfigChannel+0x216>
 800160c:	230b      	movs	r3, #11
 800160e:	e014      	b.n	800163a <HAL_ADC_ConfigChannel+0x216>
 8001610:	230a      	movs	r3, #10
 8001612:	e012      	b.n	800163a <HAL_ADC_ConfigChannel+0x216>
 8001614:	2309      	movs	r3, #9
 8001616:	e010      	b.n	800163a <HAL_ADC_ConfigChannel+0x216>
 8001618:	2308      	movs	r3, #8
 800161a:	e00e      	b.n	800163a <HAL_ADC_ConfigChannel+0x216>
 800161c:	2307      	movs	r3, #7
 800161e:	e00c      	b.n	800163a <HAL_ADC_ConfigChannel+0x216>
 8001620:	2306      	movs	r3, #6
 8001622:	e00a      	b.n	800163a <HAL_ADC_ConfigChannel+0x216>
 8001624:	2305      	movs	r3, #5
 8001626:	e008      	b.n	800163a <HAL_ADC_ConfigChannel+0x216>
 8001628:	2304      	movs	r3, #4
 800162a:	e006      	b.n	800163a <HAL_ADC_ConfigChannel+0x216>
 800162c:	2303      	movs	r3, #3
 800162e:	e004      	b.n	800163a <HAL_ADC_ConfigChannel+0x216>
 8001630:	2302      	movs	r3, #2
 8001632:	e002      	b.n	800163a <HAL_ADC_ConfigChannel+0x216>
 8001634:	2301      	movs	r3, #1
 8001636:	e000      	b.n	800163a <HAL_ADC_ConfigChannel+0x216>
 8001638:	2300      	movs	r3, #0
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	6852      	ldr	r2, [r2, #4]
 800163e:	201f      	movs	r0, #31
 8001640:	4002      	ands	r2, r0
 8001642:	4093      	lsls	r3, r2
 8001644:	000a      	movs	r2, r1
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	089b      	lsrs	r3, r3, #2
 8001652:	1c5a      	adds	r2, r3, #1
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	429a      	cmp	r2, r3
 800165a:	d808      	bhi.n	800166e <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6818      	ldr	r0, [r3, #0]
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	6859      	ldr	r1, [r3, #4]
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	001a      	movs	r2, r3
 800166a:	f7ff fb0d 	bl	8000c88 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6818      	ldr	r0, [r3, #0]
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	6819      	ldr	r1, [r3, #0]
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	001a      	movs	r2, r3
 800167c:	f7ff fb48 	bl	8000d10 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	db00      	blt.n	800168a <HAL_ADC_ConfigChannel+0x266>
 8001688:	e096      	b.n	80017b8 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800168a:	4b3f      	ldr	r3, [pc, #252]	@ (8001788 <HAL_ADC_ConfigChannel+0x364>)
 800168c:	0018      	movs	r0, r3
 800168e:	f7ff faa9 	bl	8000be4 <LL_ADC_GetCommonPathInternalCh>
 8001692:	0003      	movs	r3, r0
 8001694:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a3c      	ldr	r2, [pc, #240]	@ (800178c <HAL_ADC_ConfigChannel+0x368>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d123      	bne.n	80016e8 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	2380      	movs	r3, #128	@ 0x80
 80016a4:	041b      	lsls	r3, r3, #16
 80016a6:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016a8:	d11e      	bne.n	80016e8 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	2280      	movs	r2, #128	@ 0x80
 80016ae:	0412      	lsls	r2, r2, #16
 80016b0:	4313      	orrs	r3, r2
 80016b2:	4a35      	ldr	r2, [pc, #212]	@ (8001788 <HAL_ADC_ConfigChannel+0x364>)
 80016b4:	0019      	movs	r1, r3
 80016b6:	0010      	movs	r0, r2
 80016b8:	f7ff fa80 	bl	8000bbc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80016bc:	4b34      	ldr	r3, [pc, #208]	@ (8001790 <HAL_ADC_ConfigChannel+0x36c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4934      	ldr	r1, [pc, #208]	@ (8001794 <HAL_ADC_ConfigChannel+0x370>)
 80016c2:	0018      	movs	r0, r3
 80016c4:	f7fe fd20 	bl	8000108 <__udivsi3>
 80016c8:	0003      	movs	r3, r0
 80016ca:	001a      	movs	r2, r3
 80016cc:	0013      	movs	r3, r2
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	189b      	adds	r3, r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	3301      	adds	r3, #1
 80016d6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80016d8:	e002      	b.n	80016e0 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	3b01      	subs	r3, #1
 80016de:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f9      	bne.n	80016da <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016e6:	e067      	b.n	80017b8 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a2a      	ldr	r2, [pc, #168]	@ (8001798 <HAL_ADC_ConfigChannel+0x374>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d162      	bne.n	80017b8 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	2380      	movs	r3, #128	@ 0x80
 80016f6:	03db      	lsls	r3, r3, #15
 80016f8:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80016fa:	d15d      	bne.n	80017b8 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	2280      	movs	r2, #128	@ 0x80
 8001700:	03d2      	lsls	r2, r2, #15
 8001702:	4313      	orrs	r3, r2
 8001704:	4a20      	ldr	r2, [pc, #128]	@ (8001788 <HAL_ADC_ConfigChannel+0x364>)
 8001706:	0019      	movs	r1, r3
 8001708:	0010      	movs	r0, r2
 800170a:	f7ff fa57 	bl	8000bbc <LL_ADC_SetCommonPathInternalCh>
 800170e:	e053      	b.n	80017b8 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	691a      	ldr	r2, [r3, #16]
 8001714:	2380      	movs	r3, #128	@ 0x80
 8001716:	061b      	lsls	r3, r3, #24
 8001718:	429a      	cmp	r2, r3
 800171a:	d004      	beq.n	8001726 <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001720:	4a18      	ldr	r2, [pc, #96]	@ (8001784 <HAL_ADC_ConfigChannel+0x360>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d107      	bne.n	8001736 <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	0019      	movs	r1, r3
 8001730:	0010      	movs	r0, r2
 8001732:	f7ff fada 	bl	8000cea <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	da3c      	bge.n	80017b8 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800173e:	4b12      	ldr	r3, [pc, #72]	@ (8001788 <HAL_ADC_ConfigChannel+0x364>)
 8001740:	0018      	movs	r0, r3
 8001742:	f7ff fa4f 	bl	8000be4 <LL_ADC_GetCommonPathInternalCh>
 8001746:	0003      	movs	r3, r0
 8001748:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a0f      	ldr	r2, [pc, #60]	@ (800178c <HAL_ADC_ConfigChannel+0x368>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d108      	bne.n	8001766 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	4a11      	ldr	r2, [pc, #68]	@ (800179c <HAL_ADC_ConfigChannel+0x378>)
 8001758:	4013      	ands	r3, r2
 800175a:	4a0b      	ldr	r2, [pc, #44]	@ (8001788 <HAL_ADC_ConfigChannel+0x364>)
 800175c:	0019      	movs	r1, r3
 800175e:	0010      	movs	r0, r2
 8001760:	f7ff fa2c 	bl	8000bbc <LL_ADC_SetCommonPathInternalCh>
 8001764:	e028      	b.n	80017b8 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a0b      	ldr	r2, [pc, #44]	@ (8001798 <HAL_ADC_ConfigChannel+0x374>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d123      	bne.n	80017b8 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	4a0b      	ldr	r2, [pc, #44]	@ (80017a0 <HAL_ADC_ConfigChannel+0x37c>)
 8001774:	4013      	ands	r3, r2
 8001776:	4a04      	ldr	r2, [pc, #16]	@ (8001788 <HAL_ADC_ConfigChannel+0x364>)
 8001778:	0019      	movs	r1, r3
 800177a:	0010      	movs	r0, r2
 800177c:	f7ff fa1e 	bl	8000bbc <LL_ADC_SetCommonPathInternalCh>
 8001780:	e01a      	b.n	80017b8 <HAL_ADC_ConfigChannel+0x394>
 8001782:	46c0      	nop			@ (mov r8, r8)
 8001784:	80000004 	.word	0x80000004
 8001788:	40012708 	.word	0x40012708
 800178c:	a4000200 	.word	0xa4000200
 8001790:	20000000 	.word	0x20000000
 8001794:	00030d40 	.word	0x00030d40
 8001798:	a8000400 	.word	0xa8000400
 800179c:	ff7fffff 	.word	0xff7fffff
 80017a0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a8:	2220      	movs	r2, #32
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80017b0:	2317      	movs	r3, #23
 80017b2:	18fb      	adds	r3, r7, r3
 80017b4:	2201      	movs	r2, #1
 80017b6:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2254      	movs	r2, #84	@ 0x54
 80017bc:	2100      	movs	r1, #0
 80017be:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80017c0:	2317      	movs	r3, #23
 80017c2:	18fb      	adds	r3, r7, r3
 80017c4:	781b      	ldrb	r3, [r3, #0]
}
 80017c6:	0018      	movs	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	b006      	add	sp, #24
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	46c0      	nop			@ (mov r8, r8)

080017d0 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	0018      	movs	r0, r3
 80017de:	f7ff fb45 	bl	8000e6c <LL_ADC_REG_IsConversionOngoing>
 80017e2:	1e03      	subs	r3, r0, #0
 80017e4:	d02b      	beq.n	800183e <ADC_ConversionStop+0x6e>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	0018      	movs	r0, r3
 80017ec:	f7ff fb09 	bl	8000e02 <LL_ADC_IsDisableOngoing>
 80017f0:	1e03      	subs	r3, r0, #0
 80017f2:	d104      	bne.n	80017fe <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	0018      	movs	r0, r3
 80017fa:	f7ff fb25 	bl	8000e48 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80017fe:	f7ff f9d3 	bl	8000ba8 <HAL_GetTick>
 8001802:	0003      	movs	r3, r0
 8001804:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001806:	e014      	b.n	8001832 <ADC_ConversionStop+0x62>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001808:	f7ff f9ce 	bl	8000ba8 <HAL_GetTick>
 800180c:	0002      	movs	r2, r0
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d90d      	bls.n	8001832 <ADC_ConversionStop+0x62>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800181a:	2210      	movs	r2, #16
 800181c:	431a      	orrs	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001826:	2201      	movs	r2, #1
 8001828:	431a      	orrs	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e006      	b.n	8001840 <ADC_ConversionStop+0x70>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	2204      	movs	r2, #4
 800183a:	4013      	ands	r3, r2
 800183c:	d1e4      	bne.n	8001808 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800183e:	2300      	movs	r3, #0
}
 8001840:	0018      	movs	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	b004      	add	sp, #16
 8001846:	bd80      	pop	{r7, pc}

08001848 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001850:	2300      	movs	r3, #0
 8001852:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	0018      	movs	r0, r3
 800185a:	f7ff fac1 	bl	8000de0 <LL_ADC_IsEnabled>
 800185e:	1e03      	subs	r3, r0, #0
 8001860:	d162      	bne.n	8001928 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	4a32      	ldr	r2, [pc, #200]	@ (8001934 <ADC_Enable+0xec>)
 800186a:	4013      	ands	r3, r2
 800186c:	d00d      	beq.n	800188a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001872:	2210      	movs	r2, #16
 8001874:	431a      	orrs	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800187e:	2201      	movs	r2, #1
 8001880:	431a      	orrs	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e04f      	b.n	800192a <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	0018      	movs	r0, r3
 8001890:	f7ff fa82 	bl	8000d98 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001894:	4b28      	ldr	r3, [pc, #160]	@ (8001938 <ADC_Enable+0xf0>)
 8001896:	0018      	movs	r0, r3
 8001898:	f7ff f9a4 	bl	8000be4 <LL_ADC_GetCommonPathInternalCh>
 800189c:	0002      	movs	r2, r0
 800189e:	2380      	movs	r3, #128	@ 0x80
 80018a0:	041b      	lsls	r3, r3, #16
 80018a2:	4013      	ands	r3, r2
 80018a4:	d00f      	beq.n	80018c6 <ADC_Enable+0x7e>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018a6:	4b25      	ldr	r3, [pc, #148]	@ (800193c <ADC_Enable+0xf4>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4925      	ldr	r1, [pc, #148]	@ (8001940 <ADC_Enable+0xf8>)
 80018ac:	0018      	movs	r0, r3
 80018ae:	f7fe fc2b 	bl	8000108 <__udivsi3>
 80018b2:	0003      	movs	r3, r0
 80018b4:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80018b6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80018b8:	e002      	b.n	80018c0 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	3b01      	subs	r3, #1
 80018be:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f9      	bne.n	80018ba <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	7e5b      	ldrb	r3, [r3, #25]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d02c      	beq.n	8001928 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80018ce:	f7ff f96b 	bl	8000ba8 <HAL_GetTick>
 80018d2:	0003      	movs	r3, r0
 80018d4:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80018d6:	e020      	b.n	800191a <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	0018      	movs	r0, r3
 80018de:	f7ff fa7f 	bl	8000de0 <LL_ADC_IsEnabled>
 80018e2:	1e03      	subs	r3, r0, #0
 80018e4:	d104      	bne.n	80018f0 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	0018      	movs	r0, r3
 80018ec:	f7ff fa54 	bl	8000d98 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80018f0:	f7ff f95a 	bl	8000ba8 <HAL_GetTick>
 80018f4:	0002      	movs	r2, r0
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d90d      	bls.n	800191a <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001902:	2210      	movs	r2, #16
 8001904:	431a      	orrs	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800190e:	2201      	movs	r2, #1
 8001910:	431a      	orrs	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e007      	b.n	800192a <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2201      	movs	r2, #1
 8001922:	4013      	ands	r3, r2
 8001924:	2b01      	cmp	r3, #1
 8001926:	d1d7      	bne.n	80018d8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	0018      	movs	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	b004      	add	sp, #16
 8001930:	bd80      	pop	{r7, pc}
 8001932:	46c0      	nop			@ (mov r8, r8)
 8001934:	80000017 	.word	0x80000017
 8001938:	40012708 	.word	0x40012708
 800193c:	20000000 	.word	0x20000000
 8001940:	00030d40 	.word	0x00030d40

08001944 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	0018      	movs	r0, r3
 8001952:	f7ff fa56 	bl	8000e02 <LL_ADC_IsDisableOngoing>
 8001956:	0003      	movs	r3, r0
 8001958:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	0018      	movs	r0, r3
 8001960:	f7ff fa3e 	bl	8000de0 <LL_ADC_IsEnabled>
 8001964:	1e03      	subs	r3, r0, #0
 8001966:	d040      	beq.n	80019ea <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d13d      	bne.n	80019ea <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2205      	movs	r2, #5
 8001976:	4013      	ands	r3, r2
 8001978:	2b01      	cmp	r3, #1
 800197a:	d10d      	bne.n	8001998 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	0018      	movs	r0, r3
 8001982:	f7ff fa1b 	bl	8000dbc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2203      	movs	r2, #3
 800198c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800198e:	f7ff f90b 	bl	8000ba8 <HAL_GetTick>
 8001992:	0003      	movs	r3, r0
 8001994:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001996:	e022      	b.n	80019de <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800199c:	2210      	movs	r2, #16
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019a8:	2201      	movs	r2, #1
 80019aa:	431a      	orrs	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e01b      	b.n	80019ec <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019b4:	f7ff f8f8 	bl	8000ba8 <HAL_GetTick>
 80019b8:	0002      	movs	r2, r0
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d90d      	bls.n	80019de <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c6:	2210      	movs	r2, #16
 80019c8:	431a      	orrs	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d2:	2201      	movs	r2, #1
 80019d4:	431a      	orrs	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e006      	b.n	80019ec <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	2201      	movs	r2, #1
 80019e6:	4013      	ands	r3, r2
 80019e8:	d1e4      	bne.n	80019b4 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	0018      	movs	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	b004      	add	sp, #16
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	0002      	movs	r2, r0
 80019fc:	1dfb      	adds	r3, r7, #7
 80019fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a00:	1dfb      	adds	r3, r7, #7
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a06:	d809      	bhi.n	8001a1c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a08:	1dfb      	adds	r3, r7, #7
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	001a      	movs	r2, r3
 8001a0e:	231f      	movs	r3, #31
 8001a10:	401a      	ands	r2, r3
 8001a12:	4b04      	ldr	r3, [pc, #16]	@ (8001a24 <__NVIC_EnableIRQ+0x30>)
 8001a14:	2101      	movs	r1, #1
 8001a16:	4091      	lsls	r1, r2
 8001a18:	000a      	movs	r2, r1
 8001a1a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001a1c:	46c0      	nop			@ (mov r8, r8)
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	b002      	add	sp, #8
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	e000e100 	.word	0xe000e100

08001a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a28:	b590      	push	{r4, r7, lr}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	0002      	movs	r2, r0
 8001a30:	6039      	str	r1, [r7, #0]
 8001a32:	1dfb      	adds	r3, r7, #7
 8001a34:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a36:	1dfb      	adds	r3, r7, #7
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a3c:	d828      	bhi.n	8001a90 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a3e:	4a2f      	ldr	r2, [pc, #188]	@ (8001afc <__NVIC_SetPriority+0xd4>)
 8001a40:	1dfb      	adds	r3, r7, #7
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	b25b      	sxtb	r3, r3
 8001a46:	089b      	lsrs	r3, r3, #2
 8001a48:	33c0      	adds	r3, #192	@ 0xc0
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	589b      	ldr	r3, [r3, r2]
 8001a4e:	1dfa      	adds	r2, r7, #7
 8001a50:	7812      	ldrb	r2, [r2, #0]
 8001a52:	0011      	movs	r1, r2
 8001a54:	2203      	movs	r2, #3
 8001a56:	400a      	ands	r2, r1
 8001a58:	00d2      	lsls	r2, r2, #3
 8001a5a:	21ff      	movs	r1, #255	@ 0xff
 8001a5c:	4091      	lsls	r1, r2
 8001a5e:	000a      	movs	r2, r1
 8001a60:	43d2      	mvns	r2, r2
 8001a62:	401a      	ands	r2, r3
 8001a64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	019b      	lsls	r3, r3, #6
 8001a6a:	22ff      	movs	r2, #255	@ 0xff
 8001a6c:	401a      	ands	r2, r3
 8001a6e:	1dfb      	adds	r3, r7, #7
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	0018      	movs	r0, r3
 8001a74:	2303      	movs	r3, #3
 8001a76:	4003      	ands	r3, r0
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a7c:	481f      	ldr	r0, [pc, #124]	@ (8001afc <__NVIC_SetPriority+0xd4>)
 8001a7e:	1dfb      	adds	r3, r7, #7
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	b25b      	sxtb	r3, r3
 8001a84:	089b      	lsrs	r3, r3, #2
 8001a86:	430a      	orrs	r2, r1
 8001a88:	33c0      	adds	r3, #192	@ 0xc0
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001a8e:	e031      	b.n	8001af4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a90:	4a1b      	ldr	r2, [pc, #108]	@ (8001b00 <__NVIC_SetPriority+0xd8>)
 8001a92:	1dfb      	adds	r3, r7, #7
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	0019      	movs	r1, r3
 8001a98:	230f      	movs	r3, #15
 8001a9a:	400b      	ands	r3, r1
 8001a9c:	3b08      	subs	r3, #8
 8001a9e:	089b      	lsrs	r3, r3, #2
 8001aa0:	3306      	adds	r3, #6
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	18d3      	adds	r3, r2, r3
 8001aa6:	3304      	adds	r3, #4
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	1dfa      	adds	r2, r7, #7
 8001aac:	7812      	ldrb	r2, [r2, #0]
 8001aae:	0011      	movs	r1, r2
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	400a      	ands	r2, r1
 8001ab4:	00d2      	lsls	r2, r2, #3
 8001ab6:	21ff      	movs	r1, #255	@ 0xff
 8001ab8:	4091      	lsls	r1, r2
 8001aba:	000a      	movs	r2, r1
 8001abc:	43d2      	mvns	r2, r2
 8001abe:	401a      	ands	r2, r3
 8001ac0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	019b      	lsls	r3, r3, #6
 8001ac6:	22ff      	movs	r2, #255	@ 0xff
 8001ac8:	401a      	ands	r2, r3
 8001aca:	1dfb      	adds	r3, r7, #7
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	0018      	movs	r0, r3
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	4003      	ands	r3, r0
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ad8:	4809      	ldr	r0, [pc, #36]	@ (8001b00 <__NVIC_SetPriority+0xd8>)
 8001ada:	1dfb      	adds	r3, r7, #7
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	001c      	movs	r4, r3
 8001ae0:	230f      	movs	r3, #15
 8001ae2:	4023      	ands	r3, r4
 8001ae4:	3b08      	subs	r3, #8
 8001ae6:	089b      	lsrs	r3, r3, #2
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	3306      	adds	r3, #6
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	18c3      	adds	r3, r0, r3
 8001af0:	3304      	adds	r3, #4
 8001af2:	601a      	str	r2, [r3, #0]
}
 8001af4:	46c0      	nop			@ (mov r8, r8)
 8001af6:	46bd      	mov	sp, r7
 8001af8:	b003      	add	sp, #12
 8001afa:	bd90      	pop	{r4, r7, pc}
 8001afc:	e000e100 	.word	0xe000e100
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	1e5a      	subs	r2, r3, #1
 8001b10:	2380      	movs	r3, #128	@ 0x80
 8001b12:	045b      	lsls	r3, r3, #17
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d301      	bcc.n	8001b1c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e010      	b.n	8001b3e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b48 <SysTick_Config+0x44>)
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	3a01      	subs	r2, #1
 8001b22:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b24:	2301      	movs	r3, #1
 8001b26:	425b      	negs	r3, r3
 8001b28:	2103      	movs	r1, #3
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	f7ff ff7c 	bl	8001a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b30:	4b05      	ldr	r3, [pc, #20]	@ (8001b48 <SysTick_Config+0x44>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b36:	4b04      	ldr	r3, [pc, #16]	@ (8001b48 <SysTick_Config+0x44>)
 8001b38:	2207      	movs	r2, #7
 8001b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	0018      	movs	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	b002      	add	sp, #8
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	46c0      	nop			@ (mov r8, r8)
 8001b48:	e000e010 	.word	0xe000e010

08001b4c <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
 8001b56:	210f      	movs	r1, #15
 8001b58:	187b      	adds	r3, r7, r1
 8001b5a:	1c02      	adds	r2, r0, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001b5e:	68ba      	ldr	r2, [r7, #8]
 8001b60:	187b      	adds	r3, r7, r1
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	b25b      	sxtb	r3, r3
 8001b66:	0011      	movs	r1, r2
 8001b68:	0018      	movs	r0, r3
 8001b6a:	f7ff ff5d 	bl	8001a28 <__NVIC_SetPriority>
}
 8001b6e:	46c0      	nop			@ (mov r8, r8)
 8001b70:	46bd      	mov	sp, r7
 8001b72:	b004      	add	sp, #16
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	0002      	movs	r2, r0
 8001b7e:	1dfb      	adds	r3, r7, #7
 8001b80:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b82:	1dfb      	adds	r3, r7, #7
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	b25b      	sxtb	r3, r3
 8001b88:	0018      	movs	r0, r3
 8001b8a:	f7ff ff33 	bl	80019f4 <__NVIC_EnableIRQ>
}
 8001b8e:	46c0      	nop			@ (mov r8, r8)
 8001b90:	46bd      	mov	sp, r7
 8001b92:	b002      	add	sp, #8
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	f7ff ffaf 	bl	8001b04 <SysTick_Config>
 8001ba6:	0003      	movs	r3, r0
}
 8001ba8:	0018      	movs	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	b002      	add	sp, #8
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	607a      	str	r2, [r7, #4]
 8001bba:	200b      	movs	r0, #11
 8001bbc:	183b      	adds	r3, r7, r0
 8001bbe:	1c0a      	adds	r2, r1, #0
 8001bc0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc2:	2317      	movs	r3, #23
 8001bc4:	18fb      	adds	r3, r7, r3
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	701a      	strb	r2, [r3, #0]

  switch (CallbackID)
 8001bca:	183b      	adds	r3, r7, r0
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d010      	beq.n	8001bf4 <HAL_EXTI_RegisterCallback+0x44>
 8001bd2:	dc13      	bgt.n	8001bfc <HAL_EXTI_RegisterCallback+0x4c>
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d002      	beq.n	8001bde <HAL_EXTI_RegisterCallback+0x2e>
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d007      	beq.n	8001bec <HAL_EXTI_RegisterCallback+0x3c>
 8001bdc:	e00e      	b.n	8001bfc <HAL_EXTI_RegisterCallback+0x4c>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	609a      	str	r2, [r3, #8]
      break;
 8001bea:	e00c      	b.n	8001c06 <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	605a      	str	r2, [r3, #4]
      break;
 8001bf2:	e008      	b.n	8001c06 <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	609a      	str	r2, [r3, #8]
      break;
 8001bfa:	e004      	b.n	8001c06 <HAL_EXTI_RegisterCallback+0x56>

    default:
      status = HAL_ERROR;
 8001bfc:	2317      	movs	r3, #23
 8001bfe:	18fb      	adds	r3, r7, r3
 8001c00:	2201      	movs	r2, #1
 8001c02:	701a      	strb	r2, [r3, #0]
      break;
 8001c04:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
 8001c06:	2317      	movs	r3, #23
 8001c08:	18fb      	adds	r3, r7, r3
 8001c0a:	781b      	ldrb	r3, [r3, #0]
}
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	b006      	add	sp, #24
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e003      	b.n	8001c30 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
  }
}
 8001c30:	0018      	movs	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	b002      	add	sp, #8
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	0c1b      	lsrs	r3, r3, #16
 8001c46:	2201      	movs	r2, #1
 8001c48:	4013      	ands	r3, r2
 8001c4a:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	221f      	movs	r2, #31
 8001c52:	4013      	ands	r3, r2
 8001c54:	2201      	movs	r2, #1
 8001c56:	409a      	lsls	r2, r3
 8001c58:	0013      	movs	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	015b      	lsls	r3, r3, #5
 8001c60:	4a18      	ldr	r2, [pc, #96]	@ (8001cc4 <HAL_EXTI_IRQHandler+0x8c>)
 8001c62:	4694      	mov	ip, r2
 8001c64:	4463      	add	r3, ip
 8001c66:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d009      	beq.n	8001c8c <HAL_EXTI_IRQHandler+0x54>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d002      	beq.n	8001c8c <HAL_EXTI_IRQHandler+0x54>
    {
      hexti->RisingCallback();
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	015b      	lsls	r3, r3, #5
 8001c90:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc8 <HAL_EXTI_IRQHandler+0x90>)
 8001c92:	4694      	mov	ip, r2
 8001c94:	4463      	add	r3, ip
 8001c96:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d009      	beq.n	8001cbc <HAL_EXTI_IRQHandler+0x84>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d002      	beq.n	8001cbc <HAL_EXTI_IRQHandler+0x84>
    {
      hexti->FallingCallback();
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	4798      	blx	r3
    }
  }
}
 8001cbc:	46c0      	nop			@ (mov r8, r8)
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	b006      	add	sp, #24
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	4002180c 	.word	0x4002180c
 8001cc8:	40021810 	.word	0x40021810

08001ccc <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001cda:	e153      	b.n	8001f84 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	4091      	lsls	r1, r2
 8001ce6:	000a      	movs	r2, r1
 8001ce8:	4013      	ands	r3, r2
 8001cea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d100      	bne.n	8001cf4 <HAL_GPIO_Init+0x28>
 8001cf2:	e144      	b.n	8001f7e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d003      	beq.n	8001d04 <HAL_GPIO_Init+0x38>
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b12      	cmp	r3, #18
 8001d02:	d125      	bne.n	8001d50 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	08da      	lsrs	r2, r3, #3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3208      	adds	r2, #8
 8001d0c:	0092      	lsls	r2, r2, #2
 8001d0e:	58d3      	ldr	r3, [r2, r3]
 8001d10:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	2207      	movs	r2, #7
 8001d16:	4013      	ands	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	220f      	movs	r2, #15
 8001d1c:	409a      	lsls	r2, r3
 8001d1e:	0013      	movs	r3, r2
 8001d20:	43da      	mvns	r2, r3
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	4013      	ands	r3, r2
 8001d26:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	220f      	movs	r2, #15
 8001d2e:	401a      	ands	r2, r3
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	2107      	movs	r1, #7
 8001d34:	400b      	ands	r3, r1
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	409a      	lsls	r2, r3
 8001d3a:	0013      	movs	r3, r2
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	08da      	lsrs	r2, r3, #3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	3208      	adds	r2, #8
 8001d4a:	0092      	lsls	r2, r2, #2
 8001d4c:	6979      	ldr	r1, [r7, #20]
 8001d4e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	2203      	movs	r2, #3
 8001d5c:	409a      	lsls	r2, r3
 8001d5e:	0013      	movs	r3, r2
 8001d60:	43da      	mvns	r2, r3
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	4013      	ands	r3, r2
 8001d66:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2203      	movs	r2, #3
 8001d6e:	401a      	ands	r2, r3
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	409a      	lsls	r2, r3
 8001d76:	0013      	movs	r3, r2
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d00b      	beq.n	8001da4 <HAL_GPIO_Init+0xd8>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d007      	beq.n	8001da4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d98:	2b11      	cmp	r3, #17
 8001d9a:	d003      	beq.n	8001da4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b12      	cmp	r3, #18
 8001da2:	d130      	bne.n	8001e06 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	2203      	movs	r2, #3
 8001db0:	409a      	lsls	r2, r3
 8001db2:	0013      	movs	r3, r2
 8001db4:	43da      	mvns	r2, r3
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	4013      	ands	r3, r2
 8001dba:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	68da      	ldr	r2, [r3, #12]
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	0013      	movs	r3, r2
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dda:	2201      	movs	r2, #1
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	409a      	lsls	r2, r3
 8001de0:	0013      	movs	r3, r2
 8001de2:	43da      	mvns	r2, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	4013      	ands	r3, r2
 8001de8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	091b      	lsrs	r3, r3, #4
 8001df0:	2201      	movs	r2, #1
 8001df2:	401a      	ands	r2, r3
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	409a      	lsls	r2, r3
 8001df8:	0013      	movs	r3, r2
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d017      	beq.n	8001e3e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	2203      	movs	r2, #3
 8001e1a:	409a      	lsls	r2, r3
 8001e1c:	0013      	movs	r3, r2
 8001e1e:	43da      	mvns	r2, r3
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	4013      	ands	r3, r2
 8001e24:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	689a      	ldr	r2, [r3, #8]
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	409a      	lsls	r2, r3
 8001e30:	0013      	movs	r3, r2
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	2380      	movs	r3, #128	@ 0x80
 8001e44:	055b      	lsls	r3, r3, #21
 8001e46:	4013      	ands	r3, r2
 8001e48:	d100      	bne.n	8001e4c <HAL_GPIO_Init+0x180>
 8001e4a:	e098      	b.n	8001f7e <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001e4c:	4a53      	ldr	r2, [pc, #332]	@ (8001f9c <HAL_GPIO_Init+0x2d0>)
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	089b      	lsrs	r3, r3, #2
 8001e52:	3318      	adds	r3, #24
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	589b      	ldr	r3, [r3, r2]
 8001e58:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	4013      	ands	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	220f      	movs	r2, #15
 8001e64:	409a      	lsls	r2, r3
 8001e66:	0013      	movs	r3, r2
 8001e68:	43da      	mvns	r2, r3
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	23a0      	movs	r3, #160	@ 0xa0
 8001e74:	05db      	lsls	r3, r3, #23
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d019      	beq.n	8001eae <HAL_GPIO_Init+0x1e2>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a48      	ldr	r2, [pc, #288]	@ (8001fa0 <HAL_GPIO_Init+0x2d4>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d013      	beq.n	8001eaa <HAL_GPIO_Init+0x1de>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a47      	ldr	r2, [pc, #284]	@ (8001fa4 <HAL_GPIO_Init+0x2d8>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d00d      	beq.n	8001ea6 <HAL_GPIO_Init+0x1da>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a46      	ldr	r2, [pc, #280]	@ (8001fa8 <HAL_GPIO_Init+0x2dc>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d007      	beq.n	8001ea2 <HAL_GPIO_Init+0x1d6>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a45      	ldr	r2, [pc, #276]	@ (8001fac <HAL_GPIO_Init+0x2e0>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d101      	bne.n	8001e9e <HAL_GPIO_Init+0x1d2>
 8001e9a:	2305      	movs	r3, #5
 8001e9c:	e008      	b.n	8001eb0 <HAL_GPIO_Init+0x1e4>
 8001e9e:	2306      	movs	r3, #6
 8001ea0:	e006      	b.n	8001eb0 <HAL_GPIO_Init+0x1e4>
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e004      	b.n	8001eb0 <HAL_GPIO_Init+0x1e4>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e002      	b.n	8001eb0 <HAL_GPIO_Init+0x1e4>
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e000      	b.n	8001eb0 <HAL_GPIO_Init+0x1e4>
 8001eae:	2300      	movs	r3, #0
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	2103      	movs	r1, #3
 8001eb4:	400a      	ands	r2, r1
 8001eb6:	00d2      	lsls	r2, r2, #3
 8001eb8:	4093      	lsls	r3, r2
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001ec0:	4936      	ldr	r1, [pc, #216]	@ (8001f9c <HAL_GPIO_Init+0x2d0>)
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	089b      	lsrs	r3, r3, #2
 8001ec6:	3318      	adds	r3, #24
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001ece:	4a33      	ldr	r2, [pc, #204]	@ (8001f9c <HAL_GPIO_Init+0x2d0>)
 8001ed0:	2380      	movs	r3, #128	@ 0x80
 8001ed2:	58d3      	ldr	r3, [r2, r3]
 8001ed4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	43da      	mvns	r2, r3
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	4013      	ands	r3, r2
 8001ede:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	2380      	movs	r3, #128	@ 0x80
 8001ee6:	025b      	lsls	r3, r3, #9
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d003      	beq.n	8001ef4 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001ef4:	4929      	ldr	r1, [pc, #164]	@ (8001f9c <HAL_GPIO_Init+0x2d0>)
 8001ef6:	2280      	movs	r2, #128	@ 0x80
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001efc:	4a27      	ldr	r2, [pc, #156]	@ (8001f9c <HAL_GPIO_Init+0x2d0>)
 8001efe:	2384      	movs	r3, #132	@ 0x84
 8001f00:	58d3      	ldr	r3, [r2, r3]
 8001f02:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	43da      	mvns	r2, r3
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	2380      	movs	r3, #128	@ 0x80
 8001f14:	029b      	lsls	r3, r3, #10
 8001f16:	4013      	ands	r3, r2
 8001f18:	d003      	beq.n	8001f22 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001f22:	491e      	ldr	r1, [pc, #120]	@ (8001f9c <HAL_GPIO_Init+0x2d0>)
 8001f24:	2284      	movs	r2, #132	@ 0x84
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f9c <HAL_GPIO_Init+0x2d0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	43da      	mvns	r2, r3
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	4013      	ands	r3, r2
 8001f38:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	2380      	movs	r3, #128	@ 0x80
 8001f40:	035b      	lsls	r3, r3, #13
 8001f42:	4013      	ands	r3, r2
 8001f44:	d003      	beq.n	8001f4e <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001f4e:	4b13      	ldr	r3, [pc, #76]	@ (8001f9c <HAL_GPIO_Init+0x2d0>)
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001f54:	4b11      	ldr	r3, [pc, #68]	@ (8001f9c <HAL_GPIO_Init+0x2d0>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	43da      	mvns	r2, r3
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	4013      	ands	r3, r2
 8001f62:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	2380      	movs	r3, #128	@ 0x80
 8001f6a:	039b      	lsls	r3, r3, #14
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d003      	beq.n	8001f78 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001f78:	4b08      	ldr	r3, [pc, #32]	@ (8001f9c <HAL_GPIO_Init+0x2d0>)
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	3301      	adds	r3, #1
 8001f82:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	40da      	lsrs	r2, r3
 8001f8c:	1e13      	subs	r3, r2, #0
 8001f8e:	d000      	beq.n	8001f92 <HAL_GPIO_Init+0x2c6>
 8001f90:	e6a4      	b.n	8001cdc <HAL_GPIO_Init+0x10>
  }
}
 8001f92:	46c0      	nop			@ (mov r8, r8)
 8001f94:	46c0      	nop			@ (mov r8, r8)
 8001f96:	46bd      	mov	sp, r7
 8001f98:	b006      	add	sp, #24
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40021800 	.word	0x40021800
 8001fa0:	50000400 	.word	0x50000400
 8001fa4:	50000800 	.word	0x50000800
 8001fa8:	50000c00 	.word	0x50000c00
 8001fac:	50001400 	.word	0x50001400

08001fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	0008      	movs	r0, r1
 8001fba:	0011      	movs	r1, r2
 8001fbc:	1cbb      	adds	r3, r7, #2
 8001fbe:	1c02      	adds	r2, r0, #0
 8001fc0:	801a      	strh	r2, [r3, #0]
 8001fc2:	1c7b      	adds	r3, r7, #1
 8001fc4:	1c0a      	adds	r2, r1, #0
 8001fc6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fc8:	1c7b      	adds	r3, r7, #1
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d004      	beq.n	8001fda <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fd0:	1cbb      	adds	r3, r7, #2
 8001fd2:	881a      	ldrh	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fd8:	e003      	b.n	8001fe2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fda:	1cbb      	adds	r3, r7, #2
 8001fdc:	881a      	ldrh	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fe2:	46c0      	nop			@ (mov r8, r8)
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	b002      	add	sp, #8
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e1d0      	b.n	80023a0 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2201      	movs	r2, #1
 8002004:	4013      	ands	r3, r2
 8002006:	d100      	bne.n	800200a <HAL_RCC_OscConfig+0x1e>
 8002008:	e069      	b.n	80020de <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800200a:	4bc8      	ldr	r3, [pc, #800]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	2238      	movs	r2, #56	@ 0x38
 8002010:	4013      	ands	r3, r2
 8002012:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	2b08      	cmp	r3, #8
 8002018:	d105      	bne.n	8002026 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d15d      	bne.n	80020de <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e1bc      	b.n	80023a0 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	2380      	movs	r3, #128	@ 0x80
 800202c:	025b      	lsls	r3, r3, #9
 800202e:	429a      	cmp	r2, r3
 8002030:	d107      	bne.n	8002042 <HAL_RCC_OscConfig+0x56>
 8002032:	4bbe      	ldr	r3, [pc, #760]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	4bbd      	ldr	r3, [pc, #756]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 8002038:	2180      	movs	r1, #128	@ 0x80
 800203a:	0249      	lsls	r1, r1, #9
 800203c:	430a      	orrs	r2, r1
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	e020      	b.n	8002084 <HAL_RCC_OscConfig+0x98>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	23a0      	movs	r3, #160	@ 0xa0
 8002048:	02db      	lsls	r3, r3, #11
 800204a:	429a      	cmp	r2, r3
 800204c:	d10e      	bne.n	800206c <HAL_RCC_OscConfig+0x80>
 800204e:	4bb7      	ldr	r3, [pc, #732]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	4bb6      	ldr	r3, [pc, #728]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 8002054:	2180      	movs	r1, #128	@ 0x80
 8002056:	02c9      	lsls	r1, r1, #11
 8002058:	430a      	orrs	r2, r1
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	4bb3      	ldr	r3, [pc, #716]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4bb2      	ldr	r3, [pc, #712]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 8002062:	2180      	movs	r1, #128	@ 0x80
 8002064:	0249      	lsls	r1, r1, #9
 8002066:	430a      	orrs	r2, r1
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	e00b      	b.n	8002084 <HAL_RCC_OscConfig+0x98>
 800206c:	4baf      	ldr	r3, [pc, #700]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4bae      	ldr	r3, [pc, #696]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 8002072:	49af      	ldr	r1, [pc, #700]	@ (8002330 <HAL_RCC_OscConfig+0x344>)
 8002074:	400a      	ands	r2, r1
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	4bac      	ldr	r3, [pc, #688]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	4bab      	ldr	r3, [pc, #684]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 800207e:	49ad      	ldr	r1, [pc, #692]	@ (8002334 <HAL_RCC_OscConfig+0x348>)
 8002080:	400a      	ands	r2, r1
 8002082:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d014      	beq.n	80020b6 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208c:	f7fe fd8c 	bl	8000ba8 <HAL_GetTick>
 8002090:	0003      	movs	r3, r0
 8002092:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002096:	f7fe fd87 	bl	8000ba8 <HAL_GetTick>
 800209a:	0002      	movs	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b64      	cmp	r3, #100	@ 0x64
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e17b      	b.n	80023a0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020a8:	4ba0      	ldr	r3, [pc, #640]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	2380      	movs	r3, #128	@ 0x80
 80020ae:	029b      	lsls	r3, r3, #10
 80020b0:	4013      	ands	r3, r2
 80020b2:	d0f0      	beq.n	8002096 <HAL_RCC_OscConfig+0xaa>
 80020b4:	e013      	b.n	80020de <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b6:	f7fe fd77 	bl	8000ba8 <HAL_GetTick>
 80020ba:	0003      	movs	r3, r0
 80020bc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80020c0:	f7fe fd72 	bl	8000ba8 <HAL_GetTick>
 80020c4:	0002      	movs	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b64      	cmp	r3, #100	@ 0x64
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e166      	b.n	80023a0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020d2:	4b96      	ldr	r3, [pc, #600]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	2380      	movs	r3, #128	@ 0x80
 80020d8:	029b      	lsls	r3, r3, #10
 80020da:	4013      	ands	r3, r2
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2202      	movs	r2, #2
 80020e4:	4013      	ands	r3, r2
 80020e6:	d100      	bne.n	80020ea <HAL_RCC_OscConfig+0xfe>
 80020e8:	e086      	b.n	80021f8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020ea:	4b90      	ldr	r3, [pc, #576]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2238      	movs	r2, #56	@ 0x38
 80020f0:	4013      	ands	r3, r2
 80020f2:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d12f      	bne.n	800215a <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e14c      	b.n	80023a0 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002106:	4b89      	ldr	r3, [pc, #548]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	4a8b      	ldr	r2, [pc, #556]	@ (8002338 <HAL_RCC_OscConfig+0x34c>)
 800210c:	4013      	ands	r3, r2
 800210e:	0019      	movs	r1, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	021a      	lsls	r2, r3, #8
 8002116:	4b85      	ldr	r3, [pc, #532]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 8002118:	430a      	orrs	r2, r1
 800211a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d112      	bne.n	8002148 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002122:	4b82      	ldr	r3, [pc, #520]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a85      	ldr	r2, [pc, #532]	@ (800233c <HAL_RCC_OscConfig+0x350>)
 8002128:	4013      	ands	r3, r2
 800212a:	0019      	movs	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691a      	ldr	r2, [r3, #16]
 8002130:	4b7e      	ldr	r3, [pc, #504]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 8002132:	430a      	orrs	r2, r1
 8002134:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002136:	4b7d      	ldr	r3, [pc, #500]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	0adb      	lsrs	r3, r3, #11
 800213c:	2207      	movs	r2, #7
 800213e:	4013      	ands	r3, r2
 8002140:	4a7f      	ldr	r2, [pc, #508]	@ (8002340 <HAL_RCC_OscConfig+0x354>)
 8002142:	40da      	lsrs	r2, r3
 8002144:	4b7f      	ldr	r3, [pc, #508]	@ (8002344 <HAL_RCC_OscConfig+0x358>)
 8002146:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002148:	4b7f      	ldr	r3, [pc, #508]	@ (8002348 <HAL_RCC_OscConfig+0x35c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	0018      	movs	r0, r3
 800214e:	f7fe fccf 	bl	8000af0 <HAL_InitTick>
 8002152:	1e03      	subs	r3, r0, #0
 8002154:	d050      	beq.n	80021f8 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e122      	b.n	80023a0 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d030      	beq.n	80021c4 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002162:	4b72      	ldr	r3, [pc, #456]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a75      	ldr	r2, [pc, #468]	@ (800233c <HAL_RCC_OscConfig+0x350>)
 8002168:	4013      	ands	r3, r2
 800216a:	0019      	movs	r1, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691a      	ldr	r2, [r3, #16]
 8002170:	4b6e      	ldr	r3, [pc, #440]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 8002172:	430a      	orrs	r2, r1
 8002174:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8002176:	4b6d      	ldr	r3, [pc, #436]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	4b6c      	ldr	r3, [pc, #432]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 800217c:	2180      	movs	r1, #128	@ 0x80
 800217e:	0049      	lsls	r1, r1, #1
 8002180:	430a      	orrs	r2, r1
 8002182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002184:	f7fe fd10 	bl	8000ba8 <HAL_GetTick>
 8002188:	0003      	movs	r3, r0
 800218a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800218e:	f7fe fd0b 	bl	8000ba8 <HAL_GetTick>
 8002192:	0002      	movs	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e0ff      	b.n	80023a0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021a0:	4b62      	ldr	r3, [pc, #392]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	2380      	movs	r3, #128	@ 0x80
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4013      	ands	r3, r2
 80021aa:	d0f0      	beq.n	800218e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ac:	4b5f      	ldr	r3, [pc, #380]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	4a61      	ldr	r2, [pc, #388]	@ (8002338 <HAL_RCC_OscConfig+0x34c>)
 80021b2:	4013      	ands	r3, r2
 80021b4:	0019      	movs	r1, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	021a      	lsls	r2, r3, #8
 80021bc:	4b5b      	ldr	r3, [pc, #364]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 80021be:	430a      	orrs	r2, r1
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	e019      	b.n	80021f8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80021c4:	4b59      	ldr	r3, [pc, #356]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4b58      	ldr	r3, [pc, #352]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 80021ca:	4960      	ldr	r1, [pc, #384]	@ (800234c <HAL_RCC_OscConfig+0x360>)
 80021cc:	400a      	ands	r2, r1
 80021ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d0:	f7fe fcea 	bl	8000ba8 <HAL_GetTick>
 80021d4:	0003      	movs	r3, r0
 80021d6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80021da:	f7fe fce5 	bl	8000ba8 <HAL_GetTick>
 80021de:	0002      	movs	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e0d9      	b.n	80023a0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021ec:	4b4f      	ldr	r3, [pc, #316]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	2380      	movs	r3, #128	@ 0x80
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4013      	ands	r3, r2
 80021f6:	d1f0      	bne.n	80021da <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2208      	movs	r2, #8
 80021fe:	4013      	ands	r3, r2
 8002200:	d042      	beq.n	8002288 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002202:	4b4a      	ldr	r3, [pc, #296]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	2238      	movs	r2, #56	@ 0x38
 8002208:	4013      	ands	r3, r2
 800220a:	2b18      	cmp	r3, #24
 800220c:	d105      	bne.n	800221a <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d138      	bne.n	8002288 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e0c2      	b.n	80023a0 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d019      	beq.n	8002256 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002222:	4b42      	ldr	r3, [pc, #264]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 8002224:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002226:	4b41      	ldr	r3, [pc, #260]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 8002228:	2101      	movs	r1, #1
 800222a:	430a      	orrs	r2, r1
 800222c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222e:	f7fe fcbb 	bl	8000ba8 <HAL_GetTick>
 8002232:	0003      	movs	r3, r0
 8002234:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002238:	f7fe fcb6 	bl	8000ba8 <HAL_GetTick>
 800223c:	0002      	movs	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e0aa      	b.n	80023a0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800224a:	4b38      	ldr	r3, [pc, #224]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 800224c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800224e:	2202      	movs	r2, #2
 8002250:	4013      	ands	r3, r2
 8002252:	d0f1      	beq.n	8002238 <HAL_RCC_OscConfig+0x24c>
 8002254:	e018      	b.n	8002288 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002256:	4b35      	ldr	r3, [pc, #212]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 8002258:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800225a:	4b34      	ldr	r3, [pc, #208]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 800225c:	2101      	movs	r1, #1
 800225e:	438a      	bics	r2, r1
 8002260:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002262:	f7fe fca1 	bl	8000ba8 <HAL_GetTick>
 8002266:	0003      	movs	r3, r0
 8002268:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800226c:	f7fe fc9c 	bl	8000ba8 <HAL_GetTick>
 8002270:	0002      	movs	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e090      	b.n	80023a0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800227e:	4b2b      	ldr	r3, [pc, #172]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 8002280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002282:	2202      	movs	r2, #2
 8002284:	4013      	ands	r3, r2
 8002286:	d1f1      	bne.n	800226c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2204      	movs	r2, #4
 800228e:	4013      	ands	r3, r2
 8002290:	d100      	bne.n	8002294 <HAL_RCC_OscConfig+0x2a8>
 8002292:	e084      	b.n	800239e <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002294:	230f      	movs	r3, #15
 8002296:	18fb      	adds	r3, r7, r3
 8002298:	2200      	movs	r2, #0
 800229a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800229c:	4b23      	ldr	r3, [pc, #140]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	2238      	movs	r2, #56	@ 0x38
 80022a2:	4013      	ands	r3, r2
 80022a4:	2b20      	cmp	r3, #32
 80022a6:	d106      	bne.n	80022b6 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d000      	beq.n	80022b2 <HAL_RCC_OscConfig+0x2c6>
 80022b0:	e075      	b.n	800239e <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e074      	b.n	80023a0 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d106      	bne.n	80022cc <HAL_RCC_OscConfig+0x2e0>
 80022be:	4b1b      	ldr	r3, [pc, #108]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 80022c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022c2:	4b1a      	ldr	r3, [pc, #104]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 80022c4:	2101      	movs	r1, #1
 80022c6:	430a      	orrs	r2, r1
 80022c8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022ca:	e01c      	b.n	8002306 <HAL_RCC_OscConfig+0x31a>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	2b05      	cmp	r3, #5
 80022d2:	d10c      	bne.n	80022ee <HAL_RCC_OscConfig+0x302>
 80022d4:	4b15      	ldr	r3, [pc, #84]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 80022d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022d8:	4b14      	ldr	r3, [pc, #80]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 80022da:	2104      	movs	r1, #4
 80022dc:	430a      	orrs	r2, r1
 80022de:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022e0:	4b12      	ldr	r3, [pc, #72]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 80022e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022e4:	4b11      	ldr	r3, [pc, #68]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 80022e6:	2101      	movs	r1, #1
 80022e8:	430a      	orrs	r2, r1
 80022ea:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022ec:	e00b      	b.n	8002306 <HAL_RCC_OscConfig+0x31a>
 80022ee:	4b0f      	ldr	r3, [pc, #60]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 80022f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022f2:	4b0e      	ldr	r3, [pc, #56]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 80022f4:	2101      	movs	r1, #1
 80022f6:	438a      	bics	r2, r1
 80022f8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022fa:	4b0c      	ldr	r3, [pc, #48]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 80022fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022fe:	4b0b      	ldr	r3, [pc, #44]	@ (800232c <HAL_RCC_OscConfig+0x340>)
 8002300:	2104      	movs	r1, #4
 8002302:	438a      	bics	r2, r1
 8002304:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d028      	beq.n	8002360 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230e:	f7fe fc4b 	bl	8000ba8 <HAL_GetTick>
 8002312:	0003      	movs	r3, r0
 8002314:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002316:	e01d      	b.n	8002354 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002318:	f7fe fc46 	bl	8000ba8 <HAL_GetTick>
 800231c:	0002      	movs	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	4a0b      	ldr	r2, [pc, #44]	@ (8002350 <HAL_RCC_OscConfig+0x364>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d915      	bls.n	8002354 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e039      	b.n	80023a0 <HAL_RCC_OscConfig+0x3b4>
 800232c:	40021000 	.word	0x40021000
 8002330:	fffeffff 	.word	0xfffeffff
 8002334:	fffbffff 	.word	0xfffbffff
 8002338:	ffff80ff 	.word	0xffff80ff
 800233c:	ffffc7ff 	.word	0xffffc7ff
 8002340:	02dc6c00 	.word	0x02dc6c00
 8002344:	20000000 	.word	0x20000000
 8002348:	2000001c 	.word	0x2000001c
 800234c:	fffffeff 	.word	0xfffffeff
 8002350:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002354:	4b14      	ldr	r3, [pc, #80]	@ (80023a8 <HAL_RCC_OscConfig+0x3bc>)
 8002356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002358:	2202      	movs	r2, #2
 800235a:	4013      	ands	r3, r2
 800235c:	d0dc      	beq.n	8002318 <HAL_RCC_OscConfig+0x32c>
 800235e:	e013      	b.n	8002388 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002360:	f7fe fc22 	bl	8000ba8 <HAL_GetTick>
 8002364:	0003      	movs	r3, r0
 8002366:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002368:	e009      	b.n	800237e <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236a:	f7fe fc1d 	bl	8000ba8 <HAL_GetTick>
 800236e:	0002      	movs	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	4a0d      	ldr	r2, [pc, #52]	@ (80023ac <HAL_RCC_OscConfig+0x3c0>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e010      	b.n	80023a0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800237e:	4b0a      	ldr	r3, [pc, #40]	@ (80023a8 <HAL_RCC_OscConfig+0x3bc>)
 8002380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002382:	2202      	movs	r2, #2
 8002384:	4013      	ands	r3, r2
 8002386:	d1f0      	bne.n	800236a <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002388:	230f      	movs	r3, #15
 800238a:	18fb      	adds	r3, r7, r3
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d105      	bne.n	800239e <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002392:	4b05      	ldr	r3, [pc, #20]	@ (80023a8 <HAL_RCC_OscConfig+0x3bc>)
 8002394:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002396:	4b04      	ldr	r3, [pc, #16]	@ (80023a8 <HAL_RCC_OscConfig+0x3bc>)
 8002398:	4905      	ldr	r1, [pc, #20]	@ (80023b0 <HAL_RCC_OscConfig+0x3c4>)
 800239a:	400a      	ands	r2, r1
 800239c:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	0018      	movs	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	b006      	add	sp, #24
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40021000 	.word	0x40021000
 80023ac:	00001388 	.word	0x00001388
 80023b0:	efffffff 	.word	0xefffffff

080023b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0df      	b.n	8002588 <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023c8:	4b71      	ldr	r3, [pc, #452]	@ (8002590 <HAL_RCC_ClockConfig+0x1dc>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2207      	movs	r2, #7
 80023ce:	4013      	ands	r3, r2
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d91e      	bls.n	8002414 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d6:	4b6e      	ldr	r3, [pc, #440]	@ (8002590 <HAL_RCC_ClockConfig+0x1dc>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2207      	movs	r2, #7
 80023dc:	4393      	bics	r3, r2
 80023de:	0019      	movs	r1, r3
 80023e0:	4b6b      	ldr	r3, [pc, #428]	@ (8002590 <HAL_RCC_ClockConfig+0x1dc>)
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023e8:	f7fe fbde 	bl	8000ba8 <HAL_GetTick>
 80023ec:	0003      	movs	r3, r0
 80023ee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023f0:	e009      	b.n	8002406 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80023f2:	f7fe fbd9 	bl	8000ba8 <HAL_GetTick>
 80023f6:	0002      	movs	r2, r0
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	4a65      	ldr	r2, [pc, #404]	@ (8002594 <HAL_RCC_ClockConfig+0x1e0>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e0c0      	b.n	8002588 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002406:	4b62      	ldr	r3, [pc, #392]	@ (8002590 <HAL_RCC_ClockConfig+0x1dc>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2207      	movs	r2, #7
 800240c:	4013      	ands	r3, r2
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d1ee      	bne.n	80023f2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2202      	movs	r2, #2
 800241a:	4013      	ands	r3, r2
 800241c:	d017      	beq.n	800244e <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2204      	movs	r2, #4
 8002424:	4013      	ands	r3, r2
 8002426:	d008      	beq.n	800243a <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002428:	4b5b      	ldr	r3, [pc, #364]	@ (8002598 <HAL_RCC_ClockConfig+0x1e4>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	4a5b      	ldr	r2, [pc, #364]	@ (800259c <HAL_RCC_ClockConfig+0x1e8>)
 800242e:	401a      	ands	r2, r3
 8002430:	4b59      	ldr	r3, [pc, #356]	@ (8002598 <HAL_RCC_ClockConfig+0x1e4>)
 8002432:	21b0      	movs	r1, #176	@ 0xb0
 8002434:	0109      	lsls	r1, r1, #4
 8002436:	430a      	orrs	r2, r1
 8002438:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800243a:	4b57      	ldr	r3, [pc, #348]	@ (8002598 <HAL_RCC_ClockConfig+0x1e4>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	4a58      	ldr	r2, [pc, #352]	@ (80025a0 <HAL_RCC_ClockConfig+0x1ec>)
 8002440:	4013      	ands	r3, r2
 8002442:	0019      	movs	r1, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68da      	ldr	r2, [r3, #12]
 8002448:	4b53      	ldr	r3, [pc, #332]	@ (8002598 <HAL_RCC_ClockConfig+0x1e4>)
 800244a:	430a      	orrs	r2, r1
 800244c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2201      	movs	r2, #1
 8002454:	4013      	ands	r3, r2
 8002456:	d04b      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d107      	bne.n	8002470 <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002460:	4b4d      	ldr	r3, [pc, #308]	@ (8002598 <HAL_RCC_ClockConfig+0x1e4>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	2380      	movs	r3, #128	@ 0x80
 8002466:	029b      	lsls	r3, r3, #10
 8002468:	4013      	ands	r3, r2
 800246a:	d11f      	bne.n	80024ac <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e08b      	b.n	8002588 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d107      	bne.n	8002488 <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002478:	4b47      	ldr	r3, [pc, #284]	@ (8002598 <HAL_RCC_ClockConfig+0x1e4>)
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	2380      	movs	r3, #128	@ 0x80
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	4013      	ands	r3, r2
 8002482:	d113      	bne.n	80024ac <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e07f      	b.n	8002588 <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b03      	cmp	r3, #3
 800248e:	d106      	bne.n	800249e <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002490:	4b41      	ldr	r3, [pc, #260]	@ (8002598 <HAL_RCC_ClockConfig+0x1e4>)
 8002492:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002494:	2202      	movs	r2, #2
 8002496:	4013      	ands	r3, r2
 8002498:	d108      	bne.n	80024ac <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e074      	b.n	8002588 <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800249e:	4b3e      	ldr	r3, [pc, #248]	@ (8002598 <HAL_RCC_ClockConfig+0x1e4>)
 80024a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a2:	2202      	movs	r2, #2
 80024a4:	4013      	ands	r3, r2
 80024a6:	d101      	bne.n	80024ac <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e06d      	b.n	8002588 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024ac:	4b3a      	ldr	r3, [pc, #232]	@ (8002598 <HAL_RCC_ClockConfig+0x1e4>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	2207      	movs	r2, #7
 80024b2:	4393      	bics	r3, r2
 80024b4:	0019      	movs	r1, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	4b37      	ldr	r3, [pc, #220]	@ (8002598 <HAL_RCC_ClockConfig+0x1e4>)
 80024bc:	430a      	orrs	r2, r1
 80024be:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024c0:	f7fe fb72 	bl	8000ba8 <HAL_GetTick>
 80024c4:	0003      	movs	r3, r0
 80024c6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c8:	e009      	b.n	80024de <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80024ca:	f7fe fb6d 	bl	8000ba8 <HAL_GetTick>
 80024ce:	0002      	movs	r2, r0
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	4a2f      	ldr	r2, [pc, #188]	@ (8002594 <HAL_RCC_ClockConfig+0x1e0>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e054      	b.n	8002588 <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024de:	4b2e      	ldr	r3, [pc, #184]	@ (8002598 <HAL_RCC_ClockConfig+0x1e4>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	2238      	movs	r2, #56	@ 0x38
 80024e4:	401a      	ands	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d1ec      	bne.n	80024ca <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024f0:	4b27      	ldr	r3, [pc, #156]	@ (8002590 <HAL_RCC_ClockConfig+0x1dc>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2207      	movs	r2, #7
 80024f6:	4013      	ands	r3, r2
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d21e      	bcs.n	800253c <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fe:	4b24      	ldr	r3, [pc, #144]	@ (8002590 <HAL_RCC_ClockConfig+0x1dc>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2207      	movs	r2, #7
 8002504:	4393      	bics	r3, r2
 8002506:	0019      	movs	r1, r3
 8002508:	4b21      	ldr	r3, [pc, #132]	@ (8002590 <HAL_RCC_ClockConfig+0x1dc>)
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	430a      	orrs	r2, r1
 800250e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002510:	f7fe fb4a 	bl	8000ba8 <HAL_GetTick>
 8002514:	0003      	movs	r3, r0
 8002516:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002518:	e009      	b.n	800252e <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800251a:	f7fe fb45 	bl	8000ba8 <HAL_GetTick>
 800251e:	0002      	movs	r2, r0
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	4a1b      	ldr	r2, [pc, #108]	@ (8002594 <HAL_RCC_ClockConfig+0x1e0>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d901      	bls.n	800252e <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e02c      	b.n	8002588 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800252e:	4b18      	ldr	r3, [pc, #96]	@ (8002590 <HAL_RCC_ClockConfig+0x1dc>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2207      	movs	r2, #7
 8002534:	4013      	ands	r3, r2
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d1ee      	bne.n	800251a <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2204      	movs	r2, #4
 8002542:	4013      	ands	r3, r2
 8002544:	d009      	beq.n	800255a <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002546:	4b14      	ldr	r3, [pc, #80]	@ (8002598 <HAL_RCC_ClockConfig+0x1e4>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	4a16      	ldr	r2, [pc, #88]	@ (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 800254c:	4013      	ands	r3, r2
 800254e:	0019      	movs	r1, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691a      	ldr	r2, [r3, #16]
 8002554:	4b10      	ldr	r3, [pc, #64]	@ (8002598 <HAL_RCC_ClockConfig+0x1e4>)
 8002556:	430a      	orrs	r2, r1
 8002558:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800255a:	f000 f82b 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 800255e:	0001      	movs	r1, r0
 8002560:	4b0d      	ldr	r3, [pc, #52]	@ (8002598 <HAL_RCC_ClockConfig+0x1e4>)
 8002562:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002564:	0a1b      	lsrs	r3, r3, #8
 8002566:	220f      	movs	r2, #15
 8002568:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800256a:	4b0f      	ldr	r3, [pc, #60]	@ (80025a8 <HAL_RCC_ClockConfig+0x1f4>)
 800256c:	0092      	lsls	r2, r2, #2
 800256e:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002570:	221f      	movs	r2, #31
 8002572:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002574:	000a      	movs	r2, r1
 8002576:	40da      	lsrs	r2, r3
 8002578:	4b0c      	ldr	r3, [pc, #48]	@ (80025ac <HAL_RCC_ClockConfig+0x1f8>)
 800257a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800257c:	4b0c      	ldr	r3, [pc, #48]	@ (80025b0 <HAL_RCC_ClockConfig+0x1fc>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	0018      	movs	r0, r3
 8002582:	f7fe fab5 	bl	8000af0 <HAL_InitTick>
 8002586:	0003      	movs	r3, r0
}
 8002588:	0018      	movs	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	b004      	add	sp, #16
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40022000 	.word	0x40022000
 8002594:	00001388 	.word	0x00001388
 8002598:	40021000 	.word	0x40021000
 800259c:	ffff84ff 	.word	0xffff84ff
 80025a0:	fffff0ff 	.word	0xfffff0ff
 80025a4:	ffff8fff 	.word	0xffff8fff
 80025a8:	08003108 	.word	0x08003108
 80025ac:	20000000 	.word	0x20000000
 80025b0:	2000001c 	.word	0x2000001c

080025b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80025ba:	4b1c      	ldr	r3, [pc, #112]	@ (800262c <HAL_RCC_GetSysClockFreq+0x78>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	2238      	movs	r2, #56	@ 0x38
 80025c0:	4013      	ands	r3, r2
 80025c2:	d10f      	bne.n	80025e4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80025c4:	4b19      	ldr	r3, [pc, #100]	@ (800262c <HAL_RCC_GetSysClockFreq+0x78>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	0adb      	lsrs	r3, r3, #11
 80025ca:	2207      	movs	r2, #7
 80025cc:	4013      	ands	r3, r2
 80025ce:	2201      	movs	r2, #1
 80025d0:	409a      	lsls	r2, r3
 80025d2:	0013      	movs	r3, r2
 80025d4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80025d6:	6839      	ldr	r1, [r7, #0]
 80025d8:	4815      	ldr	r0, [pc, #84]	@ (8002630 <HAL_RCC_GetSysClockFreq+0x7c>)
 80025da:	f7fd fd95 	bl	8000108 <__udivsi3>
 80025de:	0003      	movs	r3, r0
 80025e0:	607b      	str	r3, [r7, #4]
 80025e2:	e01e      	b.n	8002622 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80025e4:	4b11      	ldr	r3, [pc, #68]	@ (800262c <HAL_RCC_GetSysClockFreq+0x78>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2238      	movs	r2, #56	@ 0x38
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b08      	cmp	r3, #8
 80025ee:	d102      	bne.n	80025f6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002630 <HAL_RCC_GetSysClockFreq+0x7c>)
 80025f2:	607b      	str	r3, [r7, #4]
 80025f4:	e015      	b.n	8002622 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80025f6:	4b0d      	ldr	r3, [pc, #52]	@ (800262c <HAL_RCC_GetSysClockFreq+0x78>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	2238      	movs	r2, #56	@ 0x38
 80025fc:	4013      	ands	r3, r2
 80025fe:	2b20      	cmp	r3, #32
 8002600:	d103      	bne.n	800260a <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002602:	2380      	movs	r3, #128	@ 0x80
 8002604:	021b      	lsls	r3, r3, #8
 8002606:	607b      	str	r3, [r7, #4]
 8002608:	e00b      	b.n	8002622 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800260a:	4b08      	ldr	r3, [pc, #32]	@ (800262c <HAL_RCC_GetSysClockFreq+0x78>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	2238      	movs	r2, #56	@ 0x38
 8002610:	4013      	ands	r3, r2
 8002612:	2b18      	cmp	r3, #24
 8002614:	d103      	bne.n	800261e <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002616:	23fa      	movs	r3, #250	@ 0xfa
 8002618:	01db      	lsls	r3, r3, #7
 800261a:	607b      	str	r3, [r7, #4]
 800261c:	e001      	b.n	8002622 <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 800261e:	2300      	movs	r3, #0
 8002620:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8002622:	687b      	ldr	r3, [r7, #4]
}
 8002624:	0018      	movs	r0, r3
 8002626:	46bd      	mov	sp, r7
 8002628:	b002      	add	sp, #8
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40021000 	.word	0x40021000
 8002630:	02dc6c00 	.word	0x02dc6c00

08002634 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002638:	f7ff ffbc 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 800263c:	0001      	movs	r1, r0
 800263e:	4b09      	ldr	r3, [pc, #36]	@ (8002664 <HAL_RCC_GetHCLKFreq+0x30>)
 8002640:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002642:	0a1b      	lsrs	r3, r3, #8
 8002644:	220f      	movs	r2, #15
 8002646:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002648:	4b07      	ldr	r3, [pc, #28]	@ (8002668 <HAL_RCC_GetHCLKFreq+0x34>)
 800264a:	0092      	lsls	r2, r2, #2
 800264c:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800264e:	221f      	movs	r2, #31
 8002650:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002652:	000a      	movs	r2, r1
 8002654:	40da      	lsrs	r2, r3
 8002656:	4b05      	ldr	r3, [pc, #20]	@ (800266c <HAL_RCC_GetHCLKFreq+0x38>)
 8002658:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 800265a:	4b04      	ldr	r3, [pc, #16]	@ (800266c <HAL_RCC_GetHCLKFreq+0x38>)
 800265c:	681b      	ldr	r3, [r3, #0]
}
 800265e:	0018      	movs	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40021000 	.word	0x40021000
 8002668:	08003108 	.word	0x08003108
 800266c:	20000000 	.word	0x20000000

08002670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8002674:	f7ff ffde 	bl	8002634 <HAL_RCC_GetHCLKFreq>
 8002678:	0001      	movs	r1, r0
 800267a:	4b07      	ldr	r3, [pc, #28]	@ (8002698 <HAL_RCC_GetPCLK1Freq+0x28>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	0b1b      	lsrs	r3, r3, #12
 8002680:	2207      	movs	r2, #7
 8002682:	401a      	ands	r2, r3
 8002684:	4b05      	ldr	r3, [pc, #20]	@ (800269c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8002686:	0092      	lsls	r2, r2, #2
 8002688:	58d3      	ldr	r3, [r2, r3]
 800268a:	221f      	movs	r2, #31
 800268c:	4013      	ands	r3, r2
 800268e:	40d9      	lsrs	r1, r3
 8002690:	000b      	movs	r3, r1
}
 8002692:	0018      	movs	r0, r3
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40021000 	.word	0x40021000
 800269c:	08003148 	.word	0x08003148

080026a0 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80026a8:	2313      	movs	r3, #19
 80026aa:	18fb      	adds	r3, r7, r3
 80026ac:	2200      	movs	r2, #0
 80026ae:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026b0:	2312      	movs	r3, #18
 80026b2:	18fb      	adds	r3, r7, r3
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2240      	movs	r2, #64	@ 0x40
 80026be:	4013      	ands	r3, r2
 80026c0:	d100      	bne.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x24>
 80026c2:	e079      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026c4:	2011      	movs	r0, #17
 80026c6:	183b      	adds	r3, r7, r0
 80026c8:	2200      	movs	r2, #0
 80026ca:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026cc:	4b63      	ldr	r3, [pc, #396]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80026ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026d0:	2380      	movs	r3, #128	@ 0x80
 80026d2:	055b      	lsls	r3, r3, #21
 80026d4:	4013      	ands	r3, r2
 80026d6:	d110      	bne.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026d8:	4b60      	ldr	r3, [pc, #384]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80026da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026dc:	4b5f      	ldr	r3, [pc, #380]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80026de:	2180      	movs	r1, #128	@ 0x80
 80026e0:	0549      	lsls	r1, r1, #21
 80026e2:	430a      	orrs	r2, r1
 80026e4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80026e6:	4b5d      	ldr	r3, [pc, #372]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80026e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026ea:	2380      	movs	r3, #128	@ 0x80
 80026ec:	055b      	lsls	r3, r3, #21
 80026ee:	4013      	ands	r3, r2
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026f4:	183b      	adds	r3, r7, r0
 80026f6:	2201      	movs	r2, #1
 80026f8:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80026fa:	4b58      	ldr	r3, [pc, #352]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80026fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026fe:	23c0      	movs	r3, #192	@ 0xc0
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4013      	ands	r3, r2
 8002704:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d019      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	429a      	cmp	r2, r3
 8002714:	d014      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8002716:	4b51      	ldr	r3, [pc, #324]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002718:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800271a:	4a51      	ldr	r2, [pc, #324]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800271c:	4013      	ands	r3, r2
 800271e:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002720:	4b4e      	ldr	r3, [pc, #312]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002722:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002724:	4b4d      	ldr	r3, [pc, #308]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002726:	2180      	movs	r1, #128	@ 0x80
 8002728:	0249      	lsls	r1, r1, #9
 800272a:	430a      	orrs	r2, r1
 800272c:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 800272e:	4b4b      	ldr	r3, [pc, #300]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002730:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002732:	4b4a      	ldr	r3, [pc, #296]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002734:	494b      	ldr	r1, [pc, #300]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002736:	400a      	ands	r2, r1
 8002738:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 800273a:	4b48      	ldr	r3, [pc, #288]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2201      	movs	r2, #1
 8002744:	4013      	ands	r3, r2
 8002746:	d016      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002748:	f7fe fa2e 	bl	8000ba8 <HAL_GetTick>
 800274c:	0003      	movs	r3, r0
 800274e:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002750:	e00c      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002752:	f7fe fa29 	bl	8000ba8 <HAL_GetTick>
 8002756:	0002      	movs	r2, r0
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	4a42      	ldr	r2, [pc, #264]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d904      	bls.n	800276c <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8002762:	2313      	movs	r3, #19
 8002764:	18fb      	adds	r3, r7, r3
 8002766:	2203      	movs	r2, #3
 8002768:	701a      	strb	r2, [r3, #0]
          break;
 800276a:	e004      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800276c:	4b3b      	ldr	r3, [pc, #236]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800276e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002770:	2202      	movs	r2, #2
 8002772:	4013      	ands	r3, r2
 8002774:	d0ed      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8002776:	2313      	movs	r3, #19
 8002778:	18fb      	adds	r3, r7, r3
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10a      	bne.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002780:	4b36      	ldr	r3, [pc, #216]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002784:	4a36      	ldr	r2, [pc, #216]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002786:	4013      	ands	r3, r2
 8002788:	0019      	movs	r1, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699a      	ldr	r2, [r3, #24]
 800278e:	4b33      	ldr	r3, [pc, #204]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002790:	430a      	orrs	r2, r1
 8002792:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002794:	e005      	b.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002796:	2312      	movs	r3, #18
 8002798:	18fb      	adds	r3, r7, r3
 800279a:	2213      	movs	r2, #19
 800279c:	18ba      	adds	r2, r7, r2
 800279e:	7812      	ldrb	r2, [r2, #0]
 80027a0:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027a2:	2311      	movs	r3, #17
 80027a4:	18fb      	adds	r3, r7, r3
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d105      	bne.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ac:	4b2b      	ldr	r3, [pc, #172]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80027ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027b0:	4b2a      	ldr	r3, [pc, #168]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80027b2:	492e      	ldr	r1, [pc, #184]	@ (800286c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80027b4:	400a      	ands	r2, r1
 80027b6:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2201      	movs	r2, #1
 80027be:	4013      	ands	r3, r2
 80027c0:	d009      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027c2:	4b26      	ldr	r3, [pc, #152]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80027c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c6:	2203      	movs	r2, #3
 80027c8:	4393      	bics	r3, r2
 80027ca:	0019      	movs	r1, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	4b22      	ldr	r3, [pc, #136]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80027d2:	430a      	orrs	r2, r1
 80027d4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2202      	movs	r2, #2
 80027dc:	4013      	ands	r3, r2
 80027de:	d009      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027e0:	4b1e      	ldr	r3, [pc, #120]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80027e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e4:	4a22      	ldr	r2, [pc, #136]	@ (8002870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e6:	4013      	ands	r3, r2
 80027e8:	0019      	movs	r1, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68da      	ldr	r2, [r3, #12]
 80027ee:	4b1b      	ldr	r3, [pc, #108]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80027f0:	430a      	orrs	r2, r1
 80027f2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2220      	movs	r2, #32
 80027fa:	4013      	ands	r3, r2
 80027fc:	d008      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027fe:	4b17      	ldr	r3, [pc, #92]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	0899      	lsrs	r1, r3, #2
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	695a      	ldr	r2, [r3, #20]
 800280a:	4b14      	ldr	r3, [pc, #80]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800280c:	430a      	orrs	r2, r1
 800280e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2204      	movs	r2, #4
 8002816:	4013      	ands	r3, r2
 8002818:	d009      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800281a:	4b10      	ldr	r3, [pc, #64]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800281c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800281e:	4a15      	ldr	r2, [pc, #84]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002820:	4013      	ands	r3, r2
 8002822:	0019      	movs	r1, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	4b0c      	ldr	r3, [pc, #48]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800282a:	430a      	orrs	r2, r1
 800282c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2280      	movs	r2, #128	@ 0x80
 8002834:	4013      	ands	r3, r2
 8002836:	d009      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002838:	4b08      	ldr	r3, [pc, #32]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	22e0      	movs	r2, #224	@ 0xe0
 800283e:	4393      	bics	r3, r2
 8002840:	0019      	movs	r1, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	4b05      	ldr	r3, [pc, #20]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002848:	430a      	orrs	r2, r1
 800284a:	601a      	str	r2, [r3, #0]
  }
  return status;
 800284c:	2312      	movs	r3, #18
 800284e:	18fb      	adds	r3, r7, r3
 8002850:	781b      	ldrb	r3, [r3, #0]
}
 8002852:	0018      	movs	r0, r3
 8002854:	46bd      	mov	sp, r7
 8002856:	b006      	add	sp, #24
 8002858:	bd80      	pop	{r7, pc}
 800285a:	46c0      	nop			@ (mov r8, r8)
 800285c:	40021000 	.word	0x40021000
 8002860:	fffffcff 	.word	0xfffffcff
 8002864:	fffeffff 	.word	0xfffeffff
 8002868:	00001388 	.word	0x00001388
 800286c:	efffffff 	.word	0xefffffff
 8002870:	ffffcfff 	.word	0xffffcfff
 8002874:	ffff3fff 	.word	0xffff3fff

08002878 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e046      	b.n	8002918 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2288      	movs	r2, #136	@ 0x88
 800288e:	589b      	ldr	r3, [r3, r2]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d107      	bne.n	80028a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2284      	movs	r2, #132	@ 0x84
 8002898:	2100      	movs	r1, #0
 800289a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	0018      	movs	r0, r3
 80028a0:	f000 f840 	bl	8002924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2288      	movs	r2, #136	@ 0x88
 80028a8:	2124      	movs	r1, #36	@ 0x24
 80028aa:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2101      	movs	r1, #1
 80028b8:	438a      	bics	r2, r1
 80028ba:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	0018      	movs	r0, r3
 80028c8:	f000 f9b2 	bl	8002c30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	0018      	movs	r0, r3
 80028d0:	f000 f830 	bl	8002934 <UART_SetConfig>
 80028d4:	0003      	movs	r3, r0
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d101      	bne.n	80028de <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e01c      	b.n	8002918 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	490d      	ldr	r1, [pc, #52]	@ (8002920 <HAL_UART_Init+0xa8>)
 80028ea:	400a      	ands	r2, r1
 80028ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	212a      	movs	r1, #42	@ 0x2a
 80028fa:	438a      	bics	r2, r1
 80028fc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2101      	movs	r1, #1
 800290a:	430a      	orrs	r2, r1
 800290c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	0018      	movs	r0, r3
 8002912:	f000 fa41 	bl	8002d98 <UART_CheckIdleState>
 8002916:	0003      	movs	r3, r0
}
 8002918:	0018      	movs	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	b002      	add	sp, #8
 800291e:	bd80      	pop	{r7, pc}
 8002920:	ffffb7ff 	.word	0xffffb7ff

08002924 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800292c:	46c0      	nop			@ (mov r8, r8)
 800292e:	46bd      	mov	sp, r7
 8002930:	b002      	add	sp, #8
 8002932:	bd80      	pop	{r7, pc}

08002934 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800293c:	231e      	movs	r3, #30
 800293e:	18fb      	adds	r3, r7, r3
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	431a      	orrs	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	4313      	orrs	r3, r2
 800295a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4aab      	ldr	r2, [pc, #684]	@ (8002c10 <UART_SetConfig+0x2dc>)
 8002964:	4013      	ands	r3, r2
 8002966:	0019      	movs	r1, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	430a      	orrs	r2, r1
 8002970:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	4aa6      	ldr	r2, [pc, #664]	@ (8002c14 <UART_SetConfig+0x2e0>)
 800297a:	4013      	ands	r3, r2
 800297c:	0019      	movs	r1, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	4313      	orrs	r3, r2
 8002998:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	4a9d      	ldr	r2, [pc, #628]	@ (8002c18 <UART_SetConfig+0x2e4>)
 80029a2:	4013      	ands	r3, r2
 80029a4:	0019      	movs	r1, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b6:	220f      	movs	r2, #15
 80029b8:	4393      	bics	r3, r2
 80029ba:	0019      	movs	r1, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a93      	ldr	r2, [pc, #588]	@ (8002c1c <UART_SetConfig+0x2e8>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d127      	bne.n	8002a22 <UART_SetConfig+0xee>
 80029d2:	4b93      	ldr	r3, [pc, #588]	@ (8002c20 <UART_SetConfig+0x2ec>)
 80029d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029d6:	2203      	movs	r2, #3
 80029d8:	4013      	ands	r3, r2
 80029da:	2b03      	cmp	r3, #3
 80029dc:	d017      	beq.n	8002a0e <UART_SetConfig+0xda>
 80029de:	d81b      	bhi.n	8002a18 <UART_SetConfig+0xe4>
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d00a      	beq.n	80029fa <UART_SetConfig+0xc6>
 80029e4:	d818      	bhi.n	8002a18 <UART_SetConfig+0xe4>
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d002      	beq.n	80029f0 <UART_SetConfig+0xbc>
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d00a      	beq.n	8002a04 <UART_SetConfig+0xd0>
 80029ee:	e013      	b.n	8002a18 <UART_SetConfig+0xe4>
 80029f0:	231f      	movs	r3, #31
 80029f2:	18fb      	adds	r3, r7, r3
 80029f4:	2200      	movs	r2, #0
 80029f6:	701a      	strb	r2, [r3, #0]
 80029f8:	e021      	b.n	8002a3e <UART_SetConfig+0x10a>
 80029fa:	231f      	movs	r3, #31
 80029fc:	18fb      	adds	r3, r7, r3
 80029fe:	2202      	movs	r2, #2
 8002a00:	701a      	strb	r2, [r3, #0]
 8002a02:	e01c      	b.n	8002a3e <UART_SetConfig+0x10a>
 8002a04:	231f      	movs	r3, #31
 8002a06:	18fb      	adds	r3, r7, r3
 8002a08:	2204      	movs	r2, #4
 8002a0a:	701a      	strb	r2, [r3, #0]
 8002a0c:	e017      	b.n	8002a3e <UART_SetConfig+0x10a>
 8002a0e:	231f      	movs	r3, #31
 8002a10:	18fb      	adds	r3, r7, r3
 8002a12:	2208      	movs	r2, #8
 8002a14:	701a      	strb	r2, [r3, #0]
 8002a16:	e012      	b.n	8002a3e <UART_SetConfig+0x10a>
 8002a18:	231f      	movs	r3, #31
 8002a1a:	18fb      	adds	r3, r7, r3
 8002a1c:	2210      	movs	r2, #16
 8002a1e:	701a      	strb	r2, [r3, #0]
 8002a20:	e00d      	b.n	8002a3e <UART_SetConfig+0x10a>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a7f      	ldr	r2, [pc, #508]	@ (8002c24 <UART_SetConfig+0x2f0>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d104      	bne.n	8002a36 <UART_SetConfig+0x102>
 8002a2c:	231f      	movs	r3, #31
 8002a2e:	18fb      	adds	r3, r7, r3
 8002a30:	2200      	movs	r2, #0
 8002a32:	701a      	strb	r2, [r3, #0]
 8002a34:	e003      	b.n	8002a3e <UART_SetConfig+0x10a>
 8002a36:	231f      	movs	r3, #31
 8002a38:	18fb      	adds	r3, r7, r3
 8002a3a:	2210      	movs	r2, #16
 8002a3c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69da      	ldr	r2, [r3, #28]
 8002a42:	2380      	movs	r3, #128	@ 0x80
 8002a44:	021b      	lsls	r3, r3, #8
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d000      	beq.n	8002a4c <UART_SetConfig+0x118>
 8002a4a:	e06f      	b.n	8002b2c <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8002a4c:	231f      	movs	r3, #31
 8002a4e:	18fb      	adds	r3, r7, r3
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b08      	cmp	r3, #8
 8002a54:	d01f      	beq.n	8002a96 <UART_SetConfig+0x162>
 8002a56:	dc22      	bgt.n	8002a9e <UART_SetConfig+0x16a>
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d017      	beq.n	8002a8c <UART_SetConfig+0x158>
 8002a5c:	dc1f      	bgt.n	8002a9e <UART_SetConfig+0x16a>
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d002      	beq.n	8002a68 <UART_SetConfig+0x134>
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d005      	beq.n	8002a72 <UART_SetConfig+0x13e>
 8002a66:	e01a      	b.n	8002a9e <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a68:	f7ff fe02 	bl	8002670 <HAL_RCC_GetPCLK1Freq>
 8002a6c:	0003      	movs	r3, r0
 8002a6e:	61bb      	str	r3, [r7, #24]
        break;
 8002a70:	e01c      	b.n	8002aac <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002a72:	4b6b      	ldr	r3, [pc, #428]	@ (8002c20 <UART_SetConfig+0x2ec>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	095b      	lsrs	r3, r3, #5
 8002a78:	2207      	movs	r2, #7
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	0019      	movs	r1, r3
 8002a80:	4869      	ldr	r0, [pc, #420]	@ (8002c28 <UART_SetConfig+0x2f4>)
 8002a82:	f7fd fb41 	bl	8000108 <__udivsi3>
 8002a86:	0003      	movs	r3, r0
 8002a88:	61bb      	str	r3, [r7, #24]
        break;
 8002a8a:	e00f      	b.n	8002aac <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a8c:	f7ff fd92 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 8002a90:	0003      	movs	r3, r0
 8002a92:	61bb      	str	r3, [r7, #24]
        break;
 8002a94:	e00a      	b.n	8002aac <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a96:	2380      	movs	r3, #128	@ 0x80
 8002a98:	021b      	lsls	r3, r3, #8
 8002a9a:	61bb      	str	r3, [r7, #24]
        break;
 8002a9c:	e006      	b.n	8002aac <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002aa2:	231e      	movs	r3, #30
 8002aa4:	18fb      	adds	r3, r7, r3
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	701a      	strb	r2, [r3, #0]
        break;
 8002aaa:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d100      	bne.n	8002ab4 <UART_SetConfig+0x180>
 8002ab2:	e097      	b.n	8002be4 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ab8:	4b5c      	ldr	r3, [pc, #368]	@ (8002c2c <UART_SetConfig+0x2f8>)
 8002aba:	0052      	lsls	r2, r2, #1
 8002abc:	5ad3      	ldrh	r3, [r2, r3]
 8002abe:	0019      	movs	r1, r3
 8002ac0:	69b8      	ldr	r0, [r7, #24]
 8002ac2:	f7fd fb21 	bl	8000108 <__udivsi3>
 8002ac6:	0003      	movs	r3, r0
 8002ac8:	005a      	lsls	r2, r3, #1
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	085b      	lsrs	r3, r3, #1
 8002ad0:	18d2      	adds	r2, r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	0019      	movs	r1, r3
 8002ad8:	0010      	movs	r0, r2
 8002ada:	f7fd fb15 	bl	8000108 <__udivsi3>
 8002ade:	0003      	movs	r3, r0
 8002ae0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	2b0f      	cmp	r3, #15
 8002ae6:	d91c      	bls.n	8002b22 <UART_SetConfig+0x1ee>
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	2380      	movs	r3, #128	@ 0x80
 8002aec:	025b      	lsls	r3, r3, #9
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d217      	bcs.n	8002b22 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	200e      	movs	r0, #14
 8002af8:	183b      	adds	r3, r7, r0
 8002afa:	210f      	movs	r1, #15
 8002afc:	438a      	bics	r2, r1
 8002afe:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	085b      	lsrs	r3, r3, #1
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	2207      	movs	r2, #7
 8002b08:	4013      	ands	r3, r2
 8002b0a:	b299      	uxth	r1, r3
 8002b0c:	183b      	adds	r3, r7, r0
 8002b0e:	183a      	adds	r2, r7, r0
 8002b10:	8812      	ldrh	r2, [r2, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	183a      	adds	r2, r7, r0
 8002b1c:	8812      	ldrh	r2, [r2, #0]
 8002b1e:	60da      	str	r2, [r3, #12]
 8002b20:	e060      	b.n	8002be4 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002b22:	231e      	movs	r3, #30
 8002b24:	18fb      	adds	r3, r7, r3
 8002b26:	2201      	movs	r2, #1
 8002b28:	701a      	strb	r2, [r3, #0]
 8002b2a:	e05b      	b.n	8002be4 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b2c:	231f      	movs	r3, #31
 8002b2e:	18fb      	adds	r3, r7, r3
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	2b08      	cmp	r3, #8
 8002b34:	d01f      	beq.n	8002b76 <UART_SetConfig+0x242>
 8002b36:	dc22      	bgt.n	8002b7e <UART_SetConfig+0x24a>
 8002b38:	2b04      	cmp	r3, #4
 8002b3a:	d017      	beq.n	8002b6c <UART_SetConfig+0x238>
 8002b3c:	dc1f      	bgt.n	8002b7e <UART_SetConfig+0x24a>
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d002      	beq.n	8002b48 <UART_SetConfig+0x214>
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d005      	beq.n	8002b52 <UART_SetConfig+0x21e>
 8002b46:	e01a      	b.n	8002b7e <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b48:	f7ff fd92 	bl	8002670 <HAL_RCC_GetPCLK1Freq>
 8002b4c:	0003      	movs	r3, r0
 8002b4e:	61bb      	str	r3, [r7, #24]
        break;
 8002b50:	e01c      	b.n	8002b8c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002b52:	4b33      	ldr	r3, [pc, #204]	@ (8002c20 <UART_SetConfig+0x2ec>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	095b      	lsrs	r3, r3, #5
 8002b58:	2207      	movs	r2, #7
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	0019      	movs	r1, r3
 8002b60:	4831      	ldr	r0, [pc, #196]	@ (8002c28 <UART_SetConfig+0x2f4>)
 8002b62:	f7fd fad1 	bl	8000108 <__udivsi3>
 8002b66:	0003      	movs	r3, r0
 8002b68:	61bb      	str	r3, [r7, #24]
        break;
 8002b6a:	e00f      	b.n	8002b8c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b6c:	f7ff fd22 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 8002b70:	0003      	movs	r3, r0
 8002b72:	61bb      	str	r3, [r7, #24]
        break;
 8002b74:	e00a      	b.n	8002b8c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b76:	2380      	movs	r3, #128	@ 0x80
 8002b78:	021b      	lsls	r3, r3, #8
 8002b7a:	61bb      	str	r3, [r7, #24]
        break;
 8002b7c:	e006      	b.n	8002b8c <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b82:	231e      	movs	r3, #30
 8002b84:	18fb      	adds	r3, r7, r3
 8002b86:	2201      	movs	r2, #1
 8002b88:	701a      	strb	r2, [r3, #0]
        break;
 8002b8a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d028      	beq.n	8002be4 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b96:	4b25      	ldr	r3, [pc, #148]	@ (8002c2c <UART_SetConfig+0x2f8>)
 8002b98:	0052      	lsls	r2, r2, #1
 8002b9a:	5ad3      	ldrh	r3, [r2, r3]
 8002b9c:	0019      	movs	r1, r3
 8002b9e:	69b8      	ldr	r0, [r7, #24]
 8002ba0:	f7fd fab2 	bl	8000108 <__udivsi3>
 8002ba4:	0003      	movs	r3, r0
 8002ba6:	001a      	movs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	085b      	lsrs	r3, r3, #1
 8002bae:	18d2      	adds	r2, r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	0019      	movs	r1, r3
 8002bb6:	0010      	movs	r0, r2
 8002bb8:	f7fd faa6 	bl	8000108 <__udivsi3>
 8002bbc:	0003      	movs	r3, r0
 8002bbe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	2b0f      	cmp	r3, #15
 8002bc4:	d90a      	bls.n	8002bdc <UART_SetConfig+0x2a8>
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	2380      	movs	r3, #128	@ 0x80
 8002bca:	025b      	lsls	r3, r3, #9
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d205      	bcs.n	8002bdc <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	60da      	str	r2, [r3, #12]
 8002bda:	e003      	b.n	8002be4 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002bdc:	231e      	movs	r3, #30
 8002bde:	18fb      	adds	r3, r7, r3
 8002be0:	2201      	movs	r2, #1
 8002be2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	226a      	movs	r2, #106	@ 0x6a
 8002be8:	2101      	movs	r1, #1
 8002bea:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2268      	movs	r2, #104	@ 0x68
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002c00:	231e      	movs	r3, #30
 8002c02:	18fb      	adds	r3, r7, r3
 8002c04:	781b      	ldrb	r3, [r3, #0]
}
 8002c06:	0018      	movs	r0, r3
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	b008      	add	sp, #32
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	46c0      	nop			@ (mov r8, r8)
 8002c10:	cfff69f3 	.word	0xcfff69f3
 8002c14:	ffffcfff 	.word	0xffffcfff
 8002c18:	11fff4ff 	.word	0x11fff4ff
 8002c1c:	40013800 	.word	0x40013800
 8002c20:	40021000 	.word	0x40021000
 8002c24:	40004400 	.word	0x40004400
 8002c28:	02dc6c00 	.word	0x02dc6c00
 8002c2c:	08003170 	.word	0x08003170

08002c30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c3c:	2208      	movs	r2, #8
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d00b      	beq.n	8002c5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	4a4a      	ldr	r2, [pc, #296]	@ (8002d74 <UART_AdvFeatureConfig+0x144>)
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	0019      	movs	r1, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c5e:	2201      	movs	r2, #1
 8002c60:	4013      	ands	r3, r2
 8002c62:	d00b      	beq.n	8002c7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	4a43      	ldr	r2, [pc, #268]	@ (8002d78 <UART_AdvFeatureConfig+0x148>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	0019      	movs	r1, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c80:	2202      	movs	r2, #2
 8002c82:	4013      	ands	r3, r2
 8002c84:	d00b      	beq.n	8002c9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	4a3b      	ldr	r2, [pc, #236]	@ (8002d7c <UART_AdvFeatureConfig+0x14c>)
 8002c8e:	4013      	ands	r3, r2
 8002c90:	0019      	movs	r1, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca2:	2204      	movs	r2, #4
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d00b      	beq.n	8002cc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	4a34      	ldr	r2, [pc, #208]	@ (8002d80 <UART_AdvFeatureConfig+0x150>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	0019      	movs	r1, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc4:	2210      	movs	r2, #16
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	d00b      	beq.n	8002ce2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	4a2c      	ldr	r2, [pc, #176]	@ (8002d84 <UART_AdvFeatureConfig+0x154>)
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	0019      	movs	r1, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	4013      	ands	r3, r2
 8002cea:	d00b      	beq.n	8002d04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	4a25      	ldr	r2, [pc, #148]	@ (8002d88 <UART_AdvFeatureConfig+0x158>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	0019      	movs	r1, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d08:	2240      	movs	r2, #64	@ 0x40
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	d01d      	beq.n	8002d4a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	4a1d      	ldr	r2, [pc, #116]	@ (8002d8c <UART_AdvFeatureConfig+0x15c>)
 8002d16:	4013      	ands	r3, r2
 8002d18:	0019      	movs	r1, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d2a:	2380      	movs	r3, #128	@ 0x80
 8002d2c:	035b      	lsls	r3, r3, #13
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d10b      	bne.n	8002d4a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	4a15      	ldr	r2, [pc, #84]	@ (8002d90 <UART_AdvFeatureConfig+0x160>)
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	0019      	movs	r1, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4e:	2280      	movs	r2, #128	@ 0x80
 8002d50:	4013      	ands	r3, r2
 8002d52:	d00b      	beq.n	8002d6c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	4a0e      	ldr	r2, [pc, #56]	@ (8002d94 <UART_AdvFeatureConfig+0x164>)
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	0019      	movs	r1, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	605a      	str	r2, [r3, #4]
  }
}
 8002d6c:	46c0      	nop			@ (mov r8, r8)
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	b002      	add	sp, #8
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	ffff7fff 	.word	0xffff7fff
 8002d78:	fffdffff 	.word	0xfffdffff
 8002d7c:	fffeffff 	.word	0xfffeffff
 8002d80:	fffbffff 	.word	0xfffbffff
 8002d84:	ffffefff 	.word	0xffffefff
 8002d88:	ffffdfff 	.word	0xffffdfff
 8002d8c:	ffefffff 	.word	0xffefffff
 8002d90:	ff9fffff 	.word	0xff9fffff
 8002d94:	fff7ffff 	.word	0xfff7ffff

08002d98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b092      	sub	sp, #72	@ 0x48
 8002d9c:	af02      	add	r7, sp, #8
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2290      	movs	r2, #144	@ 0x90
 8002da4:	2100      	movs	r1, #0
 8002da6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002da8:	f7fd fefe 	bl	8000ba8 <HAL_GetTick>
 8002dac:	0003      	movs	r3, r0
 8002dae:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2208      	movs	r2, #8
 8002db8:	4013      	ands	r3, r2
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d12d      	bne.n	8002e1a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dc0:	2280      	movs	r2, #128	@ 0x80
 8002dc2:	0391      	lsls	r1, r2, #14
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	4a47      	ldr	r2, [pc, #284]	@ (8002ee4 <UART_CheckIdleState+0x14c>)
 8002dc8:	9200      	str	r2, [sp, #0]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f000 f88e 	bl	8002eec <UART_WaitOnFlagUntilTimeout>
 8002dd0:	1e03      	subs	r3, r0, #0
 8002dd2:	d022      	beq.n	8002e1a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002dd4:	f3ef 8310 	mrs	r3, PRIMASK
 8002dd8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002ddc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002dde:	2301      	movs	r3, #1
 8002de0:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002de4:	f383 8810 	msr	PRIMASK, r3
}
 8002de8:	46c0      	nop			@ (mov r8, r8)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2180      	movs	r1, #128	@ 0x80
 8002df6:	438a      	bics	r2, r1
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e00:	f383 8810 	msr	PRIMASK, r3
}
 8002e04:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2288      	movs	r2, #136	@ 0x88
 8002e0a:	2120      	movs	r1, #32
 8002e0c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2284      	movs	r2, #132	@ 0x84
 8002e12:	2100      	movs	r1, #0
 8002e14:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e060      	b.n	8002edc <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2204      	movs	r2, #4
 8002e22:	4013      	ands	r3, r2
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d146      	bne.n	8002eb6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e2a:	2280      	movs	r2, #128	@ 0x80
 8002e2c:	03d1      	lsls	r1, r2, #15
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	4a2c      	ldr	r2, [pc, #176]	@ (8002ee4 <UART_CheckIdleState+0x14c>)
 8002e32:	9200      	str	r2, [sp, #0]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f000 f859 	bl	8002eec <UART_WaitOnFlagUntilTimeout>
 8002e3a:	1e03      	subs	r3, r0, #0
 8002e3c:	d03b      	beq.n	8002eb6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8002e42:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e44:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002e46:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e48:	2301      	movs	r3, #1
 8002e4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	f383 8810 	msr	PRIMASK, r3
}
 8002e52:	46c0      	nop			@ (mov r8, r8)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4922      	ldr	r1, [pc, #136]	@ (8002ee8 <UART_CheckIdleState+0x150>)
 8002e60:	400a      	ands	r2, r1
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	f383 8810 	msr	PRIMASK, r3
}
 8002e6e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e70:	f3ef 8310 	mrs	r3, PRIMASK
 8002e74:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e76:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e78:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	f383 8810 	msr	PRIMASK, r3
}
 8002e84:	46c0      	nop			@ (mov r8, r8)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2101      	movs	r1, #1
 8002e92:	438a      	bics	r2, r1
 8002e94:	609a      	str	r2, [r3, #8]
 8002e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e98:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	f383 8810 	msr	PRIMASK, r3
}
 8002ea0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	228c      	movs	r2, #140	@ 0x8c
 8002ea6:	2120      	movs	r1, #32
 8002ea8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2284      	movs	r2, #132	@ 0x84
 8002eae:	2100      	movs	r1, #0
 8002eb0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e012      	b.n	8002edc <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2288      	movs	r2, #136	@ 0x88
 8002eba:	2120      	movs	r1, #32
 8002ebc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	228c      	movs	r2, #140	@ 0x8c
 8002ec2:	2120      	movs	r1, #32
 8002ec4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2284      	movs	r2, #132	@ 0x84
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	0018      	movs	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	b010      	add	sp, #64	@ 0x40
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	01ffffff 	.word	0x01ffffff
 8002ee8:	fffffedf 	.word	0xfffffedf

08002eec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	603b      	str	r3, [r7, #0]
 8002ef8:	1dfb      	adds	r3, r7, #7
 8002efa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002efc:	e051      	b.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	3301      	adds	r3, #1
 8002f02:	d04e      	beq.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f04:	f7fd fe50 	bl	8000ba8 <HAL_GetTick>
 8002f08:	0002      	movs	r2, r0
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d302      	bcc.n	8002f1a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e051      	b.n	8002fc2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2204      	movs	r2, #4
 8002f26:	4013      	ands	r3, r2
 8002f28:	d03b      	beq.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	2b80      	cmp	r3, #128	@ 0x80
 8002f2e:	d038      	beq.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2b40      	cmp	r3, #64	@ 0x40
 8002f34:	d035      	beq.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	69db      	ldr	r3, [r3, #28]
 8002f3c:	2208      	movs	r2, #8
 8002f3e:	4013      	ands	r3, r2
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	d111      	bne.n	8002f68 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2208      	movs	r2, #8
 8002f4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f000 f83c 	bl	8002fcc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2290      	movs	r2, #144	@ 0x90
 8002f58:	2108      	movs	r1, #8
 8002f5a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2284      	movs	r2, #132	@ 0x84
 8002f60:	2100      	movs	r1, #0
 8002f62:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e02c      	b.n	8002fc2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	69da      	ldr	r2, [r3, #28]
 8002f6e:	2380      	movs	r3, #128	@ 0x80
 8002f70:	011b      	lsls	r3, r3, #4
 8002f72:	401a      	ands	r2, r3
 8002f74:	2380      	movs	r3, #128	@ 0x80
 8002f76:	011b      	lsls	r3, r3, #4
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d112      	bne.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2280      	movs	r2, #128	@ 0x80
 8002f82:	0112      	lsls	r2, r2, #4
 8002f84:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f000 f81f 	bl	8002fcc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2290      	movs	r2, #144	@ 0x90
 8002f92:	2120      	movs	r1, #32
 8002f94:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2284      	movs	r2, #132	@ 0x84
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e00f      	b.n	8002fc2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	69db      	ldr	r3, [r3, #28]
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	4013      	ands	r3, r2
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	425a      	negs	r2, r3
 8002fb2:	4153      	adcs	r3, r2
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	001a      	movs	r2, r3
 8002fb8:	1dfb      	adds	r3, r7, #7
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d09e      	beq.n	8002efe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	b004      	add	sp, #16
 8002fc8:	bd80      	pop	{r7, pc}
	...

08002fcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08e      	sub	sp, #56	@ 0x38
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002fd4:	f3ef 8310 	mrs	r3, PRIMASK
 8002fd8:	617b      	str	r3, [r7, #20]
  return(result);
 8002fda:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002fdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fde:	2301      	movs	r3, #1
 8002fe0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	f383 8810 	msr	PRIMASK, r3
}
 8002fe8:	46c0      	nop			@ (mov r8, r8)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4926      	ldr	r1, [pc, #152]	@ (8003090 <UART_EndRxTransfer+0xc4>)
 8002ff6:	400a      	ands	r2, r1
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ffc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	f383 8810 	msr	PRIMASK, r3
}
 8003004:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003006:	f3ef 8310 	mrs	r3, PRIMASK
 800300a:	623b      	str	r3, [r7, #32]
  return(result);
 800300c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800300e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003010:	2301      	movs	r3, #1
 8003012:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003016:	f383 8810 	msr	PRIMASK, r3
}
 800301a:	46c0      	nop			@ (mov r8, r8)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	491b      	ldr	r1, [pc, #108]	@ (8003094 <UART_EndRxTransfer+0xc8>)
 8003028:	400a      	ands	r2, r1
 800302a:	609a      	str	r2, [r3, #8]
 800302c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800302e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003032:	f383 8810 	msr	PRIMASK, r3
}
 8003036:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800303c:	2b01      	cmp	r3, #1
 800303e:	d118      	bne.n	8003072 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003040:	f3ef 8310 	mrs	r3, PRIMASK
 8003044:	60bb      	str	r3, [r7, #8]
  return(result);
 8003046:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003048:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800304a:	2301      	movs	r3, #1
 800304c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f383 8810 	msr	PRIMASK, r3
}
 8003054:	46c0      	nop			@ (mov r8, r8)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2110      	movs	r1, #16
 8003062:	438a      	bics	r2, r1
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003068:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	f383 8810 	msr	PRIMASK, r3
}
 8003070:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	228c      	movs	r2, #140	@ 0x8c
 8003076:	2120      	movs	r1, #32
 8003078:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003086:	46c0      	nop			@ (mov r8, r8)
 8003088:	46bd      	mov	sp, r7
 800308a:	b00e      	add	sp, #56	@ 0x38
 800308c:	bd80      	pop	{r7, pc}
 800308e:	46c0      	nop			@ (mov r8, r8)
 8003090:	fffffedf 	.word	0xfffffedf
 8003094:	effffffe 	.word	0xeffffffe

08003098 <memset>:
 8003098:	0003      	movs	r3, r0
 800309a:	1882      	adds	r2, r0, r2
 800309c:	4293      	cmp	r3, r2
 800309e:	d100      	bne.n	80030a2 <memset+0xa>
 80030a0:	4770      	bx	lr
 80030a2:	7019      	strb	r1, [r3, #0]
 80030a4:	3301      	adds	r3, #1
 80030a6:	e7f9      	b.n	800309c <memset+0x4>

080030a8 <__libc_init_array>:
 80030a8:	b570      	push	{r4, r5, r6, lr}
 80030aa:	2600      	movs	r6, #0
 80030ac:	4c0c      	ldr	r4, [pc, #48]	@ (80030e0 <__libc_init_array+0x38>)
 80030ae:	4d0d      	ldr	r5, [pc, #52]	@ (80030e4 <__libc_init_array+0x3c>)
 80030b0:	1b64      	subs	r4, r4, r5
 80030b2:	10a4      	asrs	r4, r4, #2
 80030b4:	42a6      	cmp	r6, r4
 80030b6:	d109      	bne.n	80030cc <__libc_init_array+0x24>
 80030b8:	2600      	movs	r6, #0
 80030ba:	f000 f819 	bl	80030f0 <_init>
 80030be:	4c0a      	ldr	r4, [pc, #40]	@ (80030e8 <__libc_init_array+0x40>)
 80030c0:	4d0a      	ldr	r5, [pc, #40]	@ (80030ec <__libc_init_array+0x44>)
 80030c2:	1b64      	subs	r4, r4, r5
 80030c4:	10a4      	asrs	r4, r4, #2
 80030c6:	42a6      	cmp	r6, r4
 80030c8:	d105      	bne.n	80030d6 <__libc_init_array+0x2e>
 80030ca:	bd70      	pop	{r4, r5, r6, pc}
 80030cc:	00b3      	lsls	r3, r6, #2
 80030ce:	58eb      	ldr	r3, [r5, r3]
 80030d0:	4798      	blx	r3
 80030d2:	3601      	adds	r6, #1
 80030d4:	e7ee      	b.n	80030b4 <__libc_init_array+0xc>
 80030d6:	00b3      	lsls	r3, r6, #2
 80030d8:	58eb      	ldr	r3, [r5, r3]
 80030da:	4798      	blx	r3
 80030dc:	3601      	adds	r6, #1
 80030de:	e7f2      	b.n	80030c6 <__libc_init_array+0x1e>
 80030e0:	08003188 	.word	0x08003188
 80030e4:	08003188 	.word	0x08003188
 80030e8:	0800318c 	.word	0x0800318c
 80030ec:	08003188 	.word	0x08003188

080030f0 <_init>:
 80030f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030f2:	46c0      	nop			@ (mov r8, r8)
 80030f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030f6:	bc08      	pop	{r3}
 80030f8:	469e      	mov	lr, r3
 80030fa:	4770      	bx	lr

080030fc <_fini>:
 80030fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fe:	46c0      	nop			@ (mov r8, r8)
 8003100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003102:	bc08      	pop	{r3}
 8003104:	469e      	mov	lr, r3
 8003106:	4770      	bx	lr
